<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郝继亮的笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.iaiot.com/"/>
  <updated>2020-01-09T01:56:35.455Z</updated>
  <id>https://blog.iaiot.com/</id>
  
  <author>
    <name>郝继亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>logstash 接收识别华为交换机 snmptrap 消息</title>
    <link href="https://blog.iaiot.com/logstash_snmptrap.html"/>
    <id>https://blog.iaiot.com/logstash_snmptrap.html</id>
    <published>2019-06-28T06:55:35.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/snmptrap.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>  <h1 id="华为-MIB-获取"><a href="#华为-MIB-获取" class="headerlink" title="华为 MIB 获取"></a>华为 MIB 获取</h1><p>华为设备 MIB 获取方法：<a href="http://support.huawei.com/onlinetoolweb/infoM/index.do?domain=1&amp;lang=zh&amp;topicType=mib" target="_blank" rel="noopener">http://support.huawei.com/onlinetoolweb/infoM/index.do?domain=1&amp;lang=zh&amp;topicType=mib</a><br>导出 excel 后取出所需的 OID 列即可<br><img src="/images/huaweimib.jpg" alt>  </p><p>这是我基于华为 S5700-V200R013C00 整理的 logstash 用的 OID 信息：<a href="https://download.csdn.net/download/iaiot/11263207" target="_blank" rel="noopener">https://download.csdn.net/download/iaiot/11263207</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/huaweioid.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>  </p><h1 id="logstash-接收"><a href="#logstash-接收" class="headerlink" title="logstash 接收"></a>logstash 接收</h1><p>将上一步整理的 yaml 文件放到 logstash yamlmibdir 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">  snmptrap &#123;</span><br><span class="line">    type =&gt; &quot;snmptrap&quot;</span><br><span class="line">    id =&gt; &quot;my_snmptrap&quot;</span><br><span class="line">    community =&gt; &quot;***&quot;</span><br><span class="line">    port =&gt; &quot;162&quot;</span><br><span class="line">    yamlmibdir =&gt; &quot;/usr/share/logstash/vendor/bundle/jruby/1.9/gems/snmp-1.2.0/data/ruby/snmp/mibs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h1><p>使用 docker 部署 logstash 映射端口时需注意设备发的是 udp 消息<br>compose.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">  ports:</span><br><span class="line">     - &quot;9600:9600&quot;</span><br><span class="line">     - &quot;7777:7777&quot;</span><br><span class="line">     - &quot;2224:2224&quot;</span><br><span class="line">     - &quot;514:514/udp&quot;</span><br><span class="line">     - &quot;2223:2223&quot;</span><br><span class="line">     - &quot;162:162/udp&quot;</span><br><span class="line">……</span><br></pre></td></tr></table></figure></p><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p><a href="http://blog.sina.com.cn/s/blog_4502d59c0101fcy2.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_4502d59c0101fcy2.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先看效果&quot;&gt;&lt;a href=&quot;#先看效果&quot; class=&quot;headerlink&quot; title=&quot;先看效果&quot;&gt;&lt;/a&gt;先看效果&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lig
      
    
    </summary>
    
    
      <category term="logstash" scheme="https://blog.iaiot.com/tags/logstash/"/>
    
      <category term="snmptrap" scheme="https://blog.iaiot.com/tags/snmptrap/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记 优化 性能测试</title>
    <link href="https://blog.iaiot.com/regexp.html"/>
    <id>https://blog.iaiot.com/regexp.html</id>
    <published>2019-06-10T09:36:54.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组捕获"><a href="#分组捕获" class="headerlink" title="分组捕获"></a>分组捕获</h1><p>分组捕获又分为两种，一种是自定义命名的分组，还有一种是未命名的分组（或者称为自动编号分组）<br>命名分组的格式为：(?&lt;name&gt;X)  其中X表示一个正则表达式  如：(?&lt;ip&gt;[\d]{1,3}.[\d]{1,3}.[\d]{1,3}.[\d]{1,3})  </p><h1 id="DFA-NFA"><a href="#DFA-NFA" class="headerlink" title="DFA NFA"></a>DFA NFA</h1><p>JDK 中的正则是 NFA 实现的<br>java DFA 开源实现：<a href="https://github.com/zhztheplayer/DFA-Regex" target="_blank" rel="noopener">https://github.com/zhztheplayer/DFA-Regex</a><br>DFA 速度快但是部分正则功能不支持<br><a href="https://www.jb51.net/article/31168.htm" target="_blank" rel="noopener">https://www.jb51.net/article/31168.htm</a>  </p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>1.减少回溯<br>2.对固定正则在循环前提前编译 Pattern.compile<br>3.使用位置匹配符号 ^ 和 $<br>4.使用 DFA 正则引擎<br>5.参考文章：<br><a href="https://www.jianshu.com/p/bbf3c382fd30" target="_blank" rel="noopener">https://www.jianshu.com/p/bbf3c382fd30</a><br><a href="https://blog.csdn.net/csdncjh/article/details/51191616" target="_blank" rel="noopener">https://blog.csdn.net/csdncjh/article/details/51191616</a><br><a href="http://blog.chacuo.net/329.html" target="_blank" rel="noopener">http://blog.chacuo.net/329.html</a><br><a href="http://blog.chacuo.net/255.html" target="_blank" rel="noopener">http://blog.chacuo.net/255.html</a><br><a href="https://my.oschina.net/u/3147332/blog/807081" target="_blank" rel="noopener">https://my.oschina.net/u/3147332/blog/807081</a><br><a href="https://segmentfault.com/a/1190000000735725" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000735725</a>  </p><h1 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h1><p>RegexBuddy4.9<br><a href="http://blog.chacuo.net/238.html" target="_blank" rel="noopener">http://blog.chacuo.net/238.html</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分组捕获&quot;&gt;&lt;a href=&quot;#分组捕获&quot; class=&quot;headerlink&quot; title=&quot;分组捕获&quot;&gt;&lt;/a&gt;分组捕获&lt;/h1&gt;&lt;p&gt;分组捕获又分为两种，一种是自定义命名的分组，还有一种是未命名的分组（或者称为自动编号分组）&lt;br&gt;命名分组的格式为：(?&amp;l
      
    
    </summary>
    
    
      <category term="正则表达式" scheme="https://blog.iaiot.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>NB-IOT LoRa Zigbee 无线组网方案对比</title>
    <link href="https://blog.iaiot.com/nbiot_lora_zigbee.html"/>
    <id>https://blog.iaiot.com/nbiot_lora_zigbee.html</id>
    <published>2019-05-10T12:54:58.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.adminiot.com.cn/news/3.html" target="_blank" rel="noopener">https://www.adminiot.com.cn/news/3.html</a></p><p>物联网设备节点组网存在2种组网方式，无线组网和有线组网。无线组网我们常见到的有Zigbee,LoRa,NB-IOT等，其中Lora/NB-IOT属于LPWAN技术，LPWAN技术有覆盖广、连接多、速率低、成本低、功耗少等特点。  </p><p>NB-IoT有个明显的优势是数据采集后可直接上传到云端，不需要通过网关，简化了现场部署。通常要部署一个网关需要考虑位置，周围信号影响，考虑因素较多。  </p><p>现在把这个三个无线组网方案做一个较全面对比，以供在做方案选择时候做参考：  </p><table><thead><tr><th></th><th>NB-IOT</th><th>LoRa</th><th>Zigbee</th></tr></thead><tbody><tr><td>组网方式</td><td>基于现有蜂窝组网</td><td>基于LoRa网关</td><td>基于Zigbee网关</td></tr><tr><td>网络部署方式</td><td>节点</td><td>节点 + 网关（网关部署位置要求较高，需要考虑因素多）</td><td>节点 + 网关</td></tr><tr><td>传输距离</td><td>远距离（可达十几公里，一般情况下10KM以上）</td><td>远距离（可达十几公里，城市1~2公里,郊区可达20km）</td><td>短距离（10米~百米级别）</td></tr><tr><td>单网接入节点容量</td><td>约20万</td><td>约6万，实际受网关信道数量，节点发包频率，数据包大小等有关。一般有500~5000个不等</td><td>理论6万多个，一般情况200~500个</td></tr><tr><td>电池续航</td><td>理论约10年/AA电池</td><td>理论约10年/AA电池</td><td>理论约2年/AA电池</td></tr><tr><td>成本</td><td>模块5-10$，未来目标降到1$</td><td>模块约5$</td><td>模块约1~2$</td></tr><tr><td>频段</td><td>License频段，运营商频段</td><td>unlicense频段，Sub-GHZ(433、868、915 MHz等)</td><td>unlicense频段2.4G</td></tr><tr><td>传输速度</td><td>理论160kbp ~ 250Kbps，实际一般小于100kbps，受限低速通信接口UART</td><td>0.3~50kbps</td><td>理论250kps，实际一般小于100kbps，受限低速通信接口UART</td></tr><tr><td>网络时延</td><td>6s -10s</td><td>TBD</td><td>不到1S</td></tr><tr><td>适合领域</td><td>户外场景，LPWAN；大面积传感器应用</td><td>户外场景，LPWAN；大面积传感器应用；可搭私有网网络，蜂窝网络覆盖不到地方</td><td>常见于户内场景，户外也有,LPLAN；小范围传感器应用；可搭建私有网网络。</td></tr><tr><td>联网方式</td><td>终端设备本身就具备联网能力，直接接入网络</td><td>终端设备本身不具备入网能力，需要在本地组网后，需要统一通过网关再接入到网络</td><td>终端设备本身不具备入网能力，需要在本地组网后，需要统一通过网关再接入到网络</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;https://www.adminiot.com.cn/news/3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.adminiot.com.cn/news/3.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;物联
      
    
    </summary>
    
    
      <category term="物联网" scheme="https://blog.iaiot.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="nb-iot" scheme="https://blog.iaiot.com/tags/nb-iot/"/>
    
      <category term="lora" scheme="https://blog.iaiot.com/tags/lora/"/>
    
      <category term="zigbee" scheme="https://blog.iaiot.com/tags/zigbee/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch cat api 查询索引信息</title>
    <link href="https://blog.iaiot.com/es_cat_api.html"/>
    <id>https://blog.iaiot.com/es_cat_api.html</id>
    <published>2019-05-09T06:55:20.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://127.0.0.1:9201/_cat/indices?v&amp;h=index,docs.count,store.size&amp;s=store.size:desc&amp;bytes=b&quot;</span><br></pre></td></tr></table></figure><p>v：verbose 有无标题<br>h：headers 返回的字段<br>s：排序<br>bytes：store.size 单位，数字格式输出，不带 mb，gb 等单位，方便在代码中计算<br>help：查看字段意思</p><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html</a></p><p>或者 _stats，这个要比 _cat 慢很多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;http://127.0.0.1:9201/_all/_stats&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.iaiot.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>java 堆栈</title>
    <link href="https://blog.iaiot.com/java_stack.html"/>
    <id>https://blog.iaiot.com/java_stack.html</id>
    <published>2019-04-27T23:42:43.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.2cto.com/kf/201302/190704.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201302/190704.html</a></p><p>简单的说： Java把内存划分成两种：一种是栈内存，一种是堆内存。<br>在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。 当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</p><h1 id="堆内存用来存放由new创建的对象和数组。"><a href="#堆内存用来存放由new创建的对象和数组。" class="headerlink" title="堆内存用来存放由new创建的对象和数组。"></a>堆内存用来存放由new创建的对象和数组。</h1><p>在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</p><ol><li><p>栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。</p></li><li><p>栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。</p></li><li><p>Java中的数据类型有两种。 一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。</p></li></ol><p>另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义</p><p> int a = 3; int b = 3；</p><p>编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。</p><p>特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与 b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p><p>另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显式地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。</p><ol start="4"><li>String是一个特殊的包装类数据。即可以用String str = new String(“abc”);的形式来创建，也可以用String str = “abc”；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java 中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = “abc”；中，并没有通过new()来创建实例，</li></ol><p>是不是违反了上述原则？其实没有。</p><ol start="5"><li>关于String str = “abc”的内部工作。Java内部将此语句转化为以下几个步骤：</li></ol><p>(1)先定义一个名为str的对String类的对象引用变量：String str；</p><p>(2)在栈中查找有没有存放值为”abc”的地址，如果没有，则开辟一个存放字面值为”abc”的地址，接着创建一个新的String类的对象o，并将o 的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为”abc”的地址，则查找对象o，并返回o的地址。</p><p>(3)将str指向对象o的地址。 值得注意的是，一般String类中字符串值都是直接存值的。但像String str = “abc”；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！ 为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。</p><p>String str1 = “abc”; String str2 = “abc”;</p><p>System.out.println(str1==str2); //true</p><p> 注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。 结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。 我们再来更进一步，将以上代码改成：</p><p>String str1 = “abc”;</p><p>String str2 = “abc”;</p><p>str1 = “bcd”;</p><p>System.out.println(str1 + “,” + str2); //bcd, abc</p><p>System.out.println(str1==str2); //false</p><p>这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为”bcd”时，JVM发现在栈中没有存</p><p>放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。</p><p>事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。 再修改原来代码：</p><p>String str1 = “abc”;</p><p>String str2 = “abc”;</p><p>str1 = “bcd”;</p><p>String str3 = str1;</p><p>System.out.println(str3); //bcd</p><p>String str4 = “bcd”;</p><p>System.out.println(str1 == str4); //true</p><p>str3 这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。 我们再接着看以下的代码。</p><p>String str1 = new String(“abc”);</p><p>String str2 = “abc”;</p><p>System.out.println(str1==str2); //false</p><p>创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。</p><p>String str1 = “abc”;</p><p>String str2 = new String(“abc”);</p><p> System.out.println(str1==str2); //false</p><p>创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。</p><ol start="6"><li>数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型</li></ol><p>包装类都不能更改其内部的值。</p><ol start="7"><li>结论与建议：</li></ol><p>(1)我们在使用诸如String str = “abc”；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向 String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为”abc”的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。</p><p>(2)使用String str = “abc”；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(“abc”)；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。</p><p>(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。</p><p>(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。</p><h1 id="java中内存分配策略及堆和栈的比较"><a href="#java中内存分配策略及堆和栈的比较" class="headerlink" title="java中内存分配策略及堆和栈的比较"></a>java中内存分配策略及堆和栈的比较</h1><p>内存分配策略</p><p>按照编译原理的观点,程序运行时的内存分配有三种策略,分别是静态的,栈式的,和堆式的.</p><p>静态存储分配是指在编译时就能确定每个数据目标在运行时刻的存储空间需求,因而在</p><p>编译时就可以给他们分配固定的内存空间.这种分配策略要求程序代码中不允许有可变数据结构(比如可变数组)的存在,也不允许有嵌套或者递归的结构出现,因为它们都会导致编译程序无法计算准确的存储空间需求.</p><p>栈式存储分配也可称为动态存储分配,是由一个类似于堆栈的运行栈来实现的.和静态存储分配相反,在栈式存储方案中,程序对数据区的需求在编译时是完全未知的,只有到运行的时候才能够知道,但是规定在运行中进入一个程序模块时,必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样,栈式存储分配按照先进后出的原则进行分配。</p><p>静态存储分配要求在编译时能知道所有变量的存储要求,栈式存储分配要求在过程的入口处必须知道所有的存储要求,而堆式存储分配则专门负责在编译时或运行时模块入口处都无法确定存储要求的数据结构的内存分配,比如可变长度串和对象实例.堆由大片的可利用块或空闲块组成,堆中的内存可以按照任意顺序分配和释放.</p><h1 id="堆和栈的比较"><a href="#堆和栈的比较" class="headerlink" title="堆和栈的比较"></a>堆和栈的比较</h1><p>上面的定义从编译原理的教材中总结而来,除静态存储分配之外,都显得很呆板和难以理解,下面撇开静态存储分配,集中比较堆和栈:</p><p>从堆和栈的功能和作用来通俗的比较,堆主要用来存放对象的，栈主要是用来执行程序的.而这种不同又主要是由于堆和栈的特点决定的:</p><p>在编程中，例如C/C++中，所有的方法调用都是通过栈来进行的,所有的局部变量,形式参数都是从栈中分配内存空间的。实际上也不是什么分配,只是从栈顶向上用就行,就好像工厂中的传送带(conveyor belt)一样,Stack Pointer会自动指引你到放东西的位置,你所要做的只是把东西放下来就行.退出函数的时候，修改栈指针就可以把栈中的内容销毁.这样的模式速度最快,当然要用来运行程序了.需要注意的是,在分配的时候,比如为一个即将要调用的程序模块分配数据区时,应事先知道这个数据区的大小,也就说是虽然分配是在程序运行时进行的,但是分配的大小多少是确定的,不变的,而这个”大小多少”是在编译时确定的,不是在运行时.</p><p>堆是应用程序在运行的时候请求操作系统分配给自己内存，由于从操作系统管理的内存分配,所以在分配和销毁时都要占用时间，因此用堆的效率非常低.但是堆的优点在于,编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间,因此,用堆保存数据时会得到更大的灵活性。事实上,面向对象的多态性,堆内存分配是必不可少的,因为多态变量所需的存储空间只有在运行时创建了对象之后才能确定.在C++中，要求创建一个对象时，只需用 new命令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存.当然，为达到这种灵活性，必然会付出一定的代价:在堆里分配存储空间时会花掉更长的时间！这也正是导致我们刚才所说的效率低的原因,看来列宁同志说的好,人的优点往往也是人的缺点,人的缺点往往也是人的优点(晕~).</p><h1 id="JVM中的堆和栈"><a href="#JVM中的堆和栈" class="headerlink" title="JVM中的堆和栈"></a>JVM中的堆和栈</h1><p>JVM是基于堆栈的虚拟机.JVM为每个新创建的线程都分配一个堆栈.也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。 我们知道,某个线程正在执行的方法称为此线程的当前方法.我们可能不知道,当前方法使用的帧称为当前帧。当线程激活一个Java方法,JVM就会在线程的 Java堆栈里新压入一个帧。这个帧自然成为了当前帧.在此方法执行期间,这个帧将用来保存参数,局部变量,中间计算过程和其他数据.这个帧在这里和编译原理中的活动纪录的概念是差不多的. 从Java的这种分配机制来看,堆栈又可以这样理解:堆栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有先进后出的特性。 每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中,并由应用所有的线程 共享.跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配,也就是说在建立一个对象时从两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针(引用)而已。</p><h1 id="GC的思考"><a href="#GC的思考" class="headerlink" title="GC的思考"></a>GC的思考</h1><p>Java为什么慢?JVM的存在当然是一个原因,但有人说,在Java中,除了简单类型(int,char等)的数据结构,其它都是在堆中分配内存(所以说Java的一切都是对象)，这也</p><p>是程序慢的原因之一。</p><p>我的想法是(应该说代表TIJ的观点),如果没有Garbage Collector(GC),上面的说法就是成立的.堆不象栈是连续的空间,没有办法指望堆本身的内存分配能够象堆栈一样拥有传送带般的速度,因为,谁会 为你整理庞大的堆空间,让你几乎没有延迟的从堆中获取新的空间呢?</p><p>这个时候,GC站出来解决问题.我们都知道GC用来清除内存垃圾,为堆腾出空间供程序使用,但GC同时也担负了另外一个重要的任务,就是要让Java中堆的内存分配和其他语言中堆栈的内存分配一样快,因为速度的问题几乎是众口一词的对Java的诟病.要达到这样的目的,就必须使堆的分配也能够做到象传送带一样,不用自己操心去找空闲空间.这样,GC除了负责清除Garbage外,还要负责整理堆中的对象,把它们转移到一个远离Garbage的纯净空间中无间隔的排列起来,就象堆栈中一样紧凑,这样Heap Pointer就可以方便的指向传送带的起始位置,或者说一个未使用的空间,为下一个需要分配内存的对象”指引方向”.因此可以这样说,垃圾收集影响了对象的创建速度,听起来很怪,对不对?</p><p> 那GC怎样在堆中找到所有存活的对象呢?前面说了,在建立一个对象时，在堆中分配实际建立这个对象的内存,而在堆栈中分配一个指向这个堆对象的指针(引 用),那么只要在堆栈(也有可能在静态存储区)找到这个引用,就可以跟踪到所有存活的对象.找到之后,GC将它们从一个堆的块中移到另外一个堆的块中,并 将它们一个挨一个的排列起来,就象我们上面说的那样,模拟出了一个栈的结构,但又不是先进后出的分配,而是可以任意分配的,在速度可以保证的情况下, Isn’t it great?</p><p> 但是，列宁同志说了,人的优点往往也是人的缺点,人的缺点往往也是人的优点(再晕~~).GC()的运行要占用一个线程,这本身就是一个降低程序运行性能 的缺陷,更何况这个线程还要在堆中把内存翻来覆去的折腾.不仅如此,如上面所说,堆中存活的对象被搬移了位置,那么所有对这些对象的引用都要重新赋值.这 些开销都会导致性能的降低.</p><p>基础数据类型直接在栈空间分配，方法的形式参数，直接在栈空间分配，当方法调用完成后从栈空间回收。引用数据类型，需要用new来创建，既在栈空间 分配一个地址空间，又在堆空间分配对象的类变量 。方法的引用参数，在栈空间分配一个地址空间，并指向堆空间的对象区，当方法调用完成后从栈空间回收。局部变量new出来时，在栈空间和堆空间中分配空 间，当局部变量生命周期结束后，栈空间立刻被回收，堆空间区域等待GC回收。方法调用时传入的literal参数，先在栈空间分配，在方法调用完成后从栈 空间分配。字</p><p>符串常量在DATA区域分配，this在堆空间分配。数组既在栈空间分配数组名称，又在堆空间分配数组实际的大小！</p><h1 id="JVM中的堆和栈-1"><a href="#JVM中的堆和栈-1" class="headerlink" title="JVM中的堆和栈"></a>JVM中的堆和栈</h1><p>JVM是基于堆栈的虚拟机。JVM为每个新创建的线程都分配一个堆栈。也就是说，对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。 我们知道，某个线程正在执行的方法称为此线程的当前方法。我们可能不知道，当前方法使用的帧称为当前帧。当线程激活一个Java方法，JVM就会在 线程的Java堆栈里新压入一个帧。这个帧自然成为了当前帧.在此方法执行期间，这个帧将用来保存参数，局部变量，中间计算过程和其他数据。这个帧在这里 和编译原理中的活动纪录的概念是差不多的。 从Java的这种分配机制来看,堆栈又可以这样理解：堆栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有先进后出的特性。</p><p>每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中，并由应用所有 的线程共享。跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分 配,也就是说在建立一个对象时从两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针(引用)而已。  </p><h1 id="堆、栈区别总结"><a href="#堆、栈区别总结" class="headerlink" title="堆、栈区别总结"></a>堆、栈区别总结</h1><p>原文地址：<a href="https://www.cnblogs.com/guoxiaoyan/p/8664150.html" target="_blank" rel="noopener">https://www.cnblogs.com/guoxiaoyan/p/8664150.html</a>  </p><h2 id="堆栈空间分配"><a href="#堆栈空间分配" class="headerlink" title="堆栈空间分配"></a>堆栈空间分配</h2><p> ①栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。<br> ②堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。  </p><h2 id="堆栈缓存方式"><a href="#堆栈缓存方式" class="headerlink" title="堆栈缓存方式"></a>堆栈缓存方式</h2><p> ①栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。<br> ②堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。  </p><h2 id="堆栈数据结构区别"><a href="#堆栈数据结构区别" class="headerlink" title="堆栈数据结构区别"></a>堆栈数据结构区别</h2><p> ①堆（数据结构）：堆可以被看成是一棵树，如：堆排序。<br> ②栈（数据结构）：一种先进后出的数据结构。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;https://www.2cto.com/kf/201302/190704.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.2cto.com/kf/201302/190704.html&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.iaiot.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI 持续集成</title>
    <link href="https://blog.iaiot.com/travis_ci.html"/>
    <id>https://blog.iaiot.com/travis_ci.html</id>
    <published>2019-04-25T07:27:19.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Travis-CI-生命周期-travis-yml"><a href="#Travis-CI-生命周期-travis-yml" class="headerlink" title="Travis CI 生命周期(.travis.yml)"></a>Travis CI 生命周期(.travis.yml)</h1><p>before_install：install 之前执行<br>install：安装依赖<br>before_script：script 之前执行<br>script：运行脚本<br>aftersuccess：script 成功后执行<br>afterfailure：script 失败后执行<br>before_deploy：deploy 之前执行<br>deploy：部署<br>after_deploy：deploy 之后执行<br>after_script：script 之后执行</p><h1 id="hexo-travis-yml-示例"><a href="#hexo-travis-yml-示例" class="headerlink" title="hexo .travis.yml 示例"></a>hexo .travis.yml 示例</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">node_js:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">7.9</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"> <span class="comment"># - npm install -g gulp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"haojiliang"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"hjl669@qq.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/access_tokens/$&#123;access_tokens&#125;/g"</span> <span class="string">./_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其中配置中有不便于公开的参数值，比如用户名密码、各种 token 等都可以放到 Travis 的环境变量中，然后在 .travis.yml 中通过 ${env_key} 引用  </p><p>这个博客就是使用 Travis CI 构建的，见：<a href="https://github.com/haojiliang/haojiliang.github.io/tree/dev" target="_blank" rel="noopener">https://github.com/haojiliang/haojiliang.github.io/tree/dev</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Travis-CI-生命周期-travis-yml&quot;&gt;&lt;a href=&quot;#Travis-CI-生命周期-travis-yml&quot; class=&quot;headerlink&quot; title=&quot;Travis CI 生命周期(.travis.yml)&quot;&gt;&lt;/a&gt;Travis CI
      
    
    </summary>
    
    
      <category term="travis" scheme="https://blog.iaiot.com/tags/travis/"/>
    
      <category term="devOps" scheme="https://blog.iaiot.com/tags/devOps/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 数据维护脚本 shell</title>
    <link href="https://blog.iaiot.com/shell_demo.html"/>
    <id>https://blog.iaiot.com/shell_demo.html</id>
    <published>2019-04-25T05:06:33.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><p>定期清理 elasticsearch 中 n 天以前的数据</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><p>通过shell脚本实现：<br>选择功能模块（<br>1.清理日志<br>2.添加清理任务<br>3.删除清理任务<br>）<br>清理日志：手动清理指定天数之前的日志数据<br>添加清理任务：包含内置的清理周期(小时、天、周、月)<br>删除清理任务：删除添加的日志清理任务</p><h1 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">clear</span><br><span class="line">echo</span><br><span class="line">echo "######################################################"</span><br><span class="line">echo "#               es 数据维护工具                        #"</span><br><span class="line">echo "#     脚本工具谨慎使用，误操作会导致es数据被误删           #"</span><br><span class="line">echo "######################################################"</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Current directory</span></span><br><span class="line">cur_dir=`pwd`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> es url(Please configure this parameter)</span></span><br><span class="line">eshost="http://127.0.0.1:9200"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Function module</span></span><br><span class="line">module=(</span><br><span class="line">清理日志</span><br><span class="line">添加清理任务</span><br><span class="line">删除清理任务</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log cleaning cycle</span></span><br><span class="line">cycle=(</span><br><span class="line">每小时</span><br><span class="line">每天</span><br><span class="line">每周</span><br><span class="line">每月</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log cleaning cycle value</span></span><br><span class="line">cycle_dir=(</span><br><span class="line">hourly</span><br><span class="line">daily</span><br><span class="line">weekly</span><br><span class="line">monthly</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Highlight Color</span></span><br><span class="line">red='\033[0;31m'</span><br><span class="line">green='\033[0;32m'</span><br><span class="line">yellow='\033[0;33m'</span><br><span class="line">plain='\033[0m'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Manual <span class="built_in">log</span> cleaning</span></span><br><span class="line">clean()&#123;</span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">read -p "请输入清理多少天以前的数据，须大于180（默认：365*2）:" days</span><br><span class="line">    [ -z "$days" ] &amp;&amp; days=730</span><br><span class="line">expr $&#123;days&#125; + 1 &amp;&gt;/dev/null</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入整数数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">if [ $days -lt 180 ]</span><br><span class="line">    then</span><br><span class="line">       echo -e "[$&#123;yellow&#125;Warning$&#123;plain&#125;] 只能清理180天以前的数据"</span><br><span class="line">   continue</span><br><span class="line">    else</span><br><span class="line">       echo -e "[$&#123;red&#125;提示$&#123;plain&#125;] 该操作将清理$&#123;days&#125;天以前的所有日志数据" </span><br><span class="line">       read -s -n1 -p "按任意键继续或Ctrl+C取消..."</span><br><span class="line">   echo</span><br><span class="line">       echo "开始清理..."</span><br><span class="line">   input_date=`date -d "$&#123;days&#125; days ago" +%Y-%m-%d`</span><br><span class="line">   curl -X POST -u elastic:changeme "$&#123;eshost&#125;/_all/_delete_by_query" -H 'Content-Type: application/json' -d"</span><br><span class="line">          &#123;</span><br><span class="line">            \"query\": &#123;</span><br><span class="line">              \"range\": &#123;</span><br><span class="line">                \"@timestamp\": &#123;</span><br><span class="line">   \"format\": \"yyyy-MM-dd HH:mm:ss\",</span><br><span class="line">   \"lt\":\"$&#123;input_date&#125; 00:00:00\"</span><br><span class="line">&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          "</span><br><span class="line">       echo</span><br><span class="line">   echo "清理完成！"</span><br><span class="line">    fi</span><br><span class="line">break</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add timed tasks to clean up logs</span></span><br><span class="line">install_clean_tasks()&#123;</span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">    echo -e "请选择日志清理周期:"</span><br><span class="line">    for ((i=1;i&lt;=$&#123;#cycle[@]&#125;;i++ )); do</span><br><span class="line">        hint="$&#123;cycle[$i-1]&#125;"</span><br><span class="line">        echo -e "$&#123;green&#125;$&#123;i&#125;$&#123;plain&#125;) $&#123;hint&#125;"</span><br><span class="line">    done</span><br><span class="line">    read -p "请选择日志清理周期:(默认: 1):" pick</span><br><span class="line">    [ -z "$pick" ] &amp;&amp; pick=1</span><br><span class="line">    expr $&#123;pick&#125; + 1 &amp;&gt;/dev/null</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入一个介于1和$&#123;#cycle[@]&#125;之间的数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    if [[ "$pick" -lt 1 || "$pick" -gt $&#123;#cycle[@]&#125; ]]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入一个介于1和$&#123;#cycle[@]&#125;之间的数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    selected=$&#123;cycle[$pick-1]&#125;</span><br><span class="line">    echo</span><br><span class="line">    echo "---------------------------"</span><br><span class="line">    echo "已选：$&#123;selected&#125;"</span><br><span class="line">    echo "---------------------------"</span><br><span class="line">    echo</span><br><span class="line">    break</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">    do</span><br><span class="line">read -p "请输入清理多少天以前的数据，须大于180（默认：365*2）:" days</span><br><span class="line">    [ -z "$days" ] &amp;&amp; days=730</span><br><span class="line">expr $&#123;days&#125; + 1 &amp;&gt;/dev/null</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入整数数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">if [ $days -lt 180 ]</span><br><span class="line">    then</span><br><span class="line">       echo -e "[$&#123;yellow&#125;Warning$&#123;plain&#125;] 只能清理180天以前的数据"</span><br><span class="line">   continue</span><br><span class="line">    else</span><br><span class="line">       input_date=`date -d "$&#123;days&#125; days ago" +%Y-%m-%d`</span><br><span class="line">   cat &lt;&lt; EOF &gt; /etc/cron.$&#123;cycle_dir[$pick-1]&#125;/esdata_clean_$&#123;days&#125;.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The task of regularly cleaning esdatas</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: 2345 85 15</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: www.iaiot.com</span></span><br><span class="line">echo "开始清理$&#123;days&#125;天以前的数据..."</span><br><span class="line">curl -X POST -u elastic:changeme "$&#123;eshost&#125;/_all/_delete_by_query" -H 'Content-Type: application/json' -d"</span><br><span class="line">          &#123;</span><br><span class="line">            \"query\": &#123;</span><br><span class="line">              \"range\": &#123;</span><br><span class="line">                \"@timestamp\": &#123;</span><br><span class="line">   \"format\": \"yyyy-MM-dd HH:mm:ss\",</span><br><span class="line">   \"lt\":\"$&#123;input_date&#125; 00:00:00\"</span><br><span class="line">&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          "</span><br><span class="line">echo "清理完成！"</span><br><span class="line">EOF</span><br><span class="line">       chmod +x /etc/cron.$&#123;cycle_dir[$pick-1]&#125;/esdata_clean_$&#123;days&#125;.sh</span><br><span class="line">    fi</span><br><span class="line">break</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">echo -e "$&#123;green&#125;清理任务已添加！$&#123;plain&#125;"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Todo：Add cron timed tasks to clean up logs</span></span><br><span class="line">install_clean_task_cron()&#123;</span><br><span class="line">read -p "请输入cron表达式(默认: 0 0 1 * * ?):" cron</span><br><span class="line">    [ -z "$cron" ] &amp;&amp; cron="0 0 1 * * ?"</span><br><span class="line">    # ...</span><br><span class="line">    #chmod +x /etc/cron.d/esdata_clean.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Delete timed tasks <span class="keyword">for</span> <span class="built_in">log</span> cleanup</span></span><br><span class="line">uninstall_clean_tasks()&#123;</span><br><span class="line">    echo -e "[$&#123;red&#125;提示$&#123;plain&#125;] 该操作将删除所有已添加的日志清理任务" </span><br><span class="line">    read -s -n1 -p "按任意键继续或Ctrl+C取消..."</span><br><span class="line">    rm -rf /etc/cron.hourly/esdata_clean*.sh</span><br><span class="line">rm -rf /etc/cron.daily/esdata_clean*.sh</span><br><span class="line">rm -rf /etc/cron.weekly/esdata_clean*.sh</span><br><span class="line">rm -rf /etc/cron.monthly/esdata_clean*.sh</span><br><span class="line">echo</span><br><span class="line">echo "已删除"</span><br><span class="line">echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Main</span></span><br><span class="line">main()&#123;</span><br><span class="line">    # Select function module</span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">    echo -e "请选择功能模块"</span><br><span class="line">    for ((i=1;i&lt;=$&#123;#module[@]&#125;;i++ )); do</span><br><span class="line">        hint="$&#123;module[$i-1]&#125;"</span><br><span class="line">        echo -e "$&#123;green&#125;$&#123;i&#125;$&#123;plain&#125;) $&#123;hint&#125;"</span><br><span class="line">    done</span><br><span class="line">    read -p "请选择功能模块(默认: 1):" pick</span><br><span class="line">    [ -z "$pick" ] &amp;&amp; pick=1</span><br><span class="line">    expr $&#123;pick&#125; + 1 &amp;&gt;/dev/null</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入一个介于1和$&#123;#module[@]&#125;之间的数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    if [[ "$pick" -lt 1 || "$pick" -gt $&#123;#module[@]&#125; ]]; then</span><br><span class="line">        echo -e "[$&#123;red&#125;Error$&#123;plain&#125;] 请输入一个介于1和$&#123;#module[@]&#125;之间的数字"</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    selected=$&#123;module[$pick-1]&#125;</span><br><span class="line">    echo</span><br><span class="line">    echo "---------------------------"</span><br><span class="line">    echo "已选：$&#123;selected&#125;"</span><br><span class="line">    echo "---------------------------"</span><br><span class="line">    echo</span><br><span class="line">    break</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    case $&#123;pick&#125; in</span><br><span class="line">        1)  clean</span><br><span class="line">        ;;</span><br><span class="line">        2)  install_clean_tasks</span><br><span class="line">        ;;</span><br><span class="line">        3)  uninstall_clean_tasks</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h1&gt;&lt;p&gt;定期清理 elasticsearch 中 n 天以前的数据&lt;/p&gt;
&lt;h1 id=&quot;实现：&quot;&gt;&lt;a href=&quot;#实现：&quot; clas
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.iaiot.com/tags/elasticsearch/"/>
    
      <category term="shell" scheme="https://blog.iaiot.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>ssl 证书访问 docker 远程 api</title>
    <link href="https://blog.iaiot.com/docker_cert.html"/>
    <id>https://blog.iaiot.com/docker_cert.html</id>
    <published>2019-04-24T02:21:59.000Z</published>
    <updated>2020-01-09T01:56:35.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><p>$ openssl genrsa -aes256 -out ca-key.pem 4096<br>$ openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem  </p><p>$ openssl genrsa -out server-key.pem 4096<br>$ openssl req -subj “/CN=docker-server” -sha256 -new -key server-key.pem -out server.csr  </p><p>$ echo subjectAltName = DNS:docker-server,IP:127.0.0.1 &gt;&gt; extfile.cnf<br>$ echo extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf<br>$ openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf  </p><p>$ openssl genrsa -out key.pem 4096<br>$ openssl req -subj ‘/CN=client’ -new -key key.pem -out client.csr  </p><p>$ echo extendedKeyUsage = clientAuth &gt; extfile-client.cnf<br>$ openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf  </p><p>$ rm -v client.csr server.csr extfile.cnf extfile-client.cnf<br>参考：<a href="https://docs.docker.com/engine/security/https/" target="_blank" rel="noopener">https://docs.docker.com/engine/security/https/</a></p><p>其中 docker-server 为访问 docker api 用的域名<br>配置host：192.168.153.7 docker-server<br>这个docker-server就相当于ssl证书的域名，这个证书是这个域名用的，换用其他域名连接会报证书验证失败</p><h1 id="docker-配置"><a href="#docker-配置" class="headerlink" title="docker 配置"></a>docker 配置</h1><p>配置 /etc/docker/daemon.json，没有则新建<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tlsverify"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"tlscert"</span>: <span class="string">"/root/cert/server-cert.pem"</span>,</span><br><span class="line">  <span class="attr">"tlskey"</span>: <span class="string">"/root/cert/server-key.pem"</span>,</span><br><span class="line">  <span class="attr">"tlscacert"</span>: <span class="string">"/root/cert/ca.pem"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"tcp://0.0.0.0:2376"</span>,</span><br><span class="line">    <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Java-连接-docker"><a href="#Java-连接-docker" class="headerlink" title="Java 连接 docker"></a>Java 连接 docker</h1><p>docker-java：<a href="https://github.com/docker-java/docker-java" target="_blank" rel="noopener">https://github.com/docker-java/docker-java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DockerClient <span class="title">getDockerClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DockerClientConfig config = DefaultDockerClientConfig.createDefaultConfigBuilder()</span><br><span class="line">                .withDockerHost(<span class="string">"tcp://docker-server:2376"</span>)</span><br><span class="line">                .withDockerTlsVerify(<span class="keyword">true</span>)</span><br><span class="line">                .withDockerCertPath(<span class="string">"/root/youCertPath"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        DockerCmdExecFactory dockerCmdExecFactory = <span class="keyword">new</span> JerseyDockerCmdExecFactory()</span><br><span class="line">                .withReadTimeout(<span class="number">20000</span>)</span><br><span class="line">                .withConnectTimeout(<span class="number">1000</span>)</span><br><span class="line">                .withMaxTotalConnections(<span class="number">100</span>)</span><br><span class="line">                .withMaxPerRouteConnections(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder.getInstance(config)</span><br><span class="line">                .withDockerCmdExecFactory(dockerCmdExecFactory)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dockerClient;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生成证书&quot;&gt;&lt;a href=&quot;#生成证书&quot; class=&quot;headerlink&quot; title=&quot;生成证书&quot;&gt;&lt;/a&gt;生成证书&lt;/h1&gt;&lt;p&gt;$ openssl genrsa -aes256 -out ca-key.pem 4096&lt;br&gt;$ openssl req
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.iaiot.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>charles 抓包 mac android ios</title>
    <link href="https://blog.iaiot.com/charles.html"/>
    <id>https://blog.iaiot.com/charles.html</id>
    <published>2019-04-20T00:08:32.000Z</published>
    <updated>2020-01-09T01:56:35.451Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/90d33904a191" target="_blank" rel="noopener">https://www.jianshu.com/p/90d33904a191</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/90d33904a191&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/90d33904a191&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="charles" scheme="https://blog.iaiot.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>String StringBuffer StringBuilder</title>
    <link href="https://blog.iaiot.com/string.html"/>
    <id>https://blog.iaiot.com/string.html</id>
    <published>2019-04-01T14:22:26.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>StringBuffer和StringBuilder都实现了AbstractStringBuilder抽象类，拥有几乎一致对外提供的调用接口；其底层在内存中的存储方式与String相同，都是以一个有序的字符序列（char类型的数组）进行存储，不同点是StringBuffer/StringBuilder对象的值是可以改变的，并且值改变以后，对象引用不会发生改变;两者对象在构造过程中，首先按照默认大小申请一个字符数组，由于会不断加入新数据，当超过默认大小后，会创建一个更大的数组，并将原先的数组内容复制过来，再丢弃旧的数组。因此，对于较大对象的扩容会涉及大量的内存复制操作，如果能够预先评估大小，可提升性能。</p><p>唯一需要注意的是：StringBuffer是线程安全的，但是StringBuilder是线程不安全的。可参看Java标准类库的源代码，StringBuffer类中方法定义前面都会有synchronize关键字。为此，StringBuffer的性能要远低于StringBuilder。</p><p>所以：<br>在频繁进行字符串的运算（如拼接、替换、删除等），且运行在多线程环境下，使用StringBuffer。<br>在频繁进行字符串的运算（如拼接、替换、删除等），且运行在单线程环境下，使用StringBuilder。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;StringBuffer和StringBuilder都实现了AbstractStringBuilder抽象类，拥有几乎一致对外提供的调用接口；其底层在内存中的存储方式与String相同，都是以一个有序的字符序列（char类型的数组）进行存储，不同点是StringBuffer
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.iaiot.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis 实现消息的发布订阅（Java）</title>
    <link href="https://blog.iaiot.com/redis-publish-subscribe.html"/>
    <id>https://blog.iaiot.com/redis-publish-subscribe.html</id>
    <published>2019-03-22T09:28:33.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>系统中一个简单的边缘功能要用消息系统，不值得再接入各种 mq，redis 也可以实现消息的发布订阅  </p><h2 id="发布消息（消息生产者-MessageProducer）"><a href="#发布消息（消息生产者-MessageProducer）" class="headerlink" title="发布消息（消息生产者 MessageProducer）"></a>发布消息（消息生产者 MessageProducer）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_KEY = <span class="string">"channel:1"</span>;</span><br><span class="line">jedis.publish(CHANNEL_KEY, message);</span><br></pre></td></tr></table></figure><h2 id="订阅消息（消息消费者）"><a href="#订阅消息（消息消费者）" class="headerlink" title="订阅消息（消息消费者）"></a>订阅消息（消息消费者）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频道</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_KEY = <span class="string">"channel:1"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理接收消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AlarmJedisPubSub alarmJedisPubSub = <span class="keyword">new</span> AlarmJedisPubSub();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(MessageConsumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = JedisPoolUtils.getPublicJedis();</span><br><span class="line">            jedis.subscribe(alarmJedisPubSub, CHANNEL_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"消费消息失败："</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            JedisPoolUtils.returnRes(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收到消息后推给前端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> ab</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AlarmJedisPubSub</span> <span class="keyword">extends</span> <span class="title">JedisPubSub</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">            LOG.info(<span class="string">"接收到来自频道"</span> + channel + <span class="string">"的消息："</span> + message);</span><br><span class="line">            ResinWebSocketListener.sendToOneUser(JSON.parseObject(message), message, <span class="string">"msg"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageConsumer messageConsumer = <span class="keyword">new</span> MessageConsumer();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(messageConsumer);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/qlqwjy/p/9763754.html" target="_blank" rel="noopener">https://www.cnblogs.com/qlqwjy/p/9763754.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统中一个简单的边缘功能要用消息系统，不值得再接入各种 mq，redis 也可以实现消息的发布订阅  &lt;/p&gt;
&lt;h2 id=&quot;发布消息（消息生产者-MessageProducer）&quot;&gt;&lt;a href=&quot;#发布消息（消息生产者-MessageProducer）&quot; class
      
    
    </summary>
    
    
      <category term="redis" scheme="https://blog.iaiot.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>webSocket 笔记 问题汇总 400 302 spring-websocket resin-websocket nginx-websocket</title>
    <link href="https://blog.iaiot.com/websocket-400-302-spring-resin-nginx.html"/>
    <id>https://blog.iaiot.com/websocket-400-302-spring-resin-nginx.html</id>
    <published>2019-03-22T09:15:58.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webSocket-400"><a href="#webSocket-400" class="headerlink" title="webSocket 400"></a>webSocket 400</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190322173348403.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /ws/createwebsocket &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://my.api.iaiot.com:8080/ws/createwebsocket;</span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="webSocket-302"><a href="#webSocket-302" class="headerlink" title="webSocket 302"></a>webSocket 302</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190322171006565.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="spring-websocket（4-2-5-RELEASE）"><a href="#spring-websocket（4-2-5-RELEASE）" class="headerlink" title="spring-websocket（4.2.5.RELEASE）"></a>spring-websocket（4.2.5.RELEASE）</h2><p>spring-websocket 不支持 resin，如果用 resin 部署服务，需基于 com.caucho.websocket.WebSocketListener 自己实现，或者依赖一个其他的 spring 支持的 websocket 包，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.undertow&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;undertow-websockets-jsr&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.17.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>spring-websocket 支持的 RequestUpgradeStrategy：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190322171454875.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190322171428208.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webSocket-400&quot;&gt;&lt;a href=&quot;#webSocket-400&quot; class=&quot;headerlink&quot; title=&quot;webSocket 400&quot;&gt;&lt;/a&gt;webSocket 400&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
      <category term="socket" scheme="https://blog.iaiot.com/tags/socket/"/>
    
      <category term="resin" scheme="https://blog.iaiot.com/tags/resin/"/>
    
      <category term="websocket" scheme="https://blog.iaiot.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 笔记 倒排索引 keyword 和 text</title>
    <link href="https://blog.iaiot.com/elasticsearch-notes.html"/>
    <id>https://blog.iaiot.com/elasticsearch-notes.html</id>
    <published>2019-03-19T01:42:54.000Z</published>
    <updated>2020-01-09T01:56:35.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="倒排索引-Inverted-Index"><a href="#倒排索引-Inverted-Index" class="headerlink" title="倒排索引(Inverted Index)"></a>倒排索引(Inverted Index)</h2><p>倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。<br>原文：<a href="http://www.cnblogs.com/zlslch/p/6440114.html" target="_blank" rel="noopener">http://www.cnblogs.com/zlslch/p/6440114.html</a><br><img src="/images/20190319101437635.png" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190319101449412.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br><strong>单词ID</strong>：记录每个单词的单词编号；<br><strong>单词</strong>：对应的单词；<br><strong>文档频率</strong>：代表文档集合中有多少个文档包含某个单词<br><strong>倒排列表</strong>：包含单词ID及其他必要信息<br><strong>DocId</strong>：单词出现的文档id<br><strong>TF</strong>：单词在某个文档中出现的次数<br><strong>POS</strong>：单词在文档中出现的位置<br>     以单词“加盟”为例，其单词编号为6，文档频率为3，代表整个文档集合中有三个文档包含这个单词，对应的倒排列表为{(2;1;<4>),(3;1;<7>),(5;1;<5>)}，含义是在文档2，3，5出现过这个单词，在每个文档的出现过1次，单词“加盟”在第一个文档的POS是4，即文档的第四个单词是“加盟”，其他的类似。<br>这个倒排索引已经是一个非常完备的索引系统，实际搜索系统的索引结构基本如此。</5></7></4></p><h2 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h2><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a><br><a href="http://www.cnblogs.com/zlslch/p/6440373.html" target="_blank" rel="noopener">http://www.cnblogs.com/zlslch/p/6440373.html</a></p><h2 id="keyword-和-text"><a href="#keyword-和-text" class="headerlink" title="keyword 和 text"></a>keyword 和 text</h2><p>keyword：不进行分词，直接索引、支持模糊、精确查询、支持聚合<br>text：会分词，然后进行索引、支持模糊、精确查询、不支持聚合<br>默认的动态模板，可以同时支持两种类型<br>参考：<a href="https://elasticsearch.cn/question/2099" target="_blank" rel="noopener">https://elasticsearch.cn/question/2099</a><br><a href="https://www.jianshu.com/p/0d13dd7d813a" target="_blank" rel="noopener">https://www.jianshu.com/p/0d13dd7d813a</a><br><a href="https://blog.csdn.net/u011652364/article/details/78581737" target="_blank" rel="noopener">https://blog.csdn.net/u011652364/article/details/78581737</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;倒排索引-Inverted-Index&quot;&gt;&lt;a href=&quot;#倒排索引-Inverted-Index&quot; class=&quot;headerlink&quot; title=&quot;倒排索引(Inverted Index)&quot;&gt;&lt;/a&gt;倒排索引(Inverted Index)&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.iaiot.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>xpack忘记密码</title>
    <link href="https://blog.iaiot.com/xpack-password.html"/>
    <id>https://blog.iaiot.com/xpack-password.html</id>
    <published>2019-03-18T08:30:30.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>1、集群停机<br>2、备份plugin下的xpack 并删除<br>3、重启集群<br>4、删掉 .security 索引<br>5、停机<br>6、恢复plugin下的xpack<br>7、重启集群（现在密码已经重置为changeme了）<br>8、直接修改密码（后续步骤不用看了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic &apos;http://127.0.0.1:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class="line">&quot;password&quot; : &quot;123456&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>9、修改kibana配置文件elastic的密码改为changeme并启动<br>10、使用kibana修改elastic密码<br>11、kibana停机重新修改配置文件为新密码<br>12、重启kibana 并测试es使用新密码连接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、集群停机&lt;br&gt;2、备份plugin下的xpack 并删除&lt;br&gt;3、重启集群&lt;br&gt;4、删掉 .security 索引&lt;br&gt;5、停机&lt;br&gt;6、恢复plugin下的xpack&lt;br&gt;7、重启集群（现在密码已经重置为changeme了）&lt;br&gt;8、直接修改密码（后续步
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.iaiot.com/tags/elasticsearch/"/>
    
      <category term="xpack" scheme="https://blog.iaiot.com/tags/xpack/"/>
    
      <category term="kibana" scheme="https://blog.iaiot.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>x-pack license 过期</title>
    <link href="https://blog.iaiot.com/x-pack-license.html"/>
    <id>https://blog.iaiot.com/x-pack-license.html</id>
    <published>2019-03-18T03:47:35.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="http://www.lanrenkaifa.com/post/61" target="_blank" rel="noopener">http://www.lanrenkaifa.com/post/61</a><br><a href="http://blog.51yip.com/server/1906.html" target="_blank" rel="noopener">http://blog.51yip.com/server/1906.html</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>kibana x-pack安装完了后，license有效期只有1个月，并且每年需要，要重新续一次。</p><ol><li>注册   <a href="https://register.elastic.co/" target="_blank" rel="noopener">https://register.elastic.co/</a></li><li>登录到注册的邮件，里面会有一个下载license的邮件。</li><li><p>通过curl，重新续一下license，注意：文件名前面有一个@符号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -u elastic:xxxxxxx 'http://localhost:9200/_xpack/license?acknowledge=true&amp;pretty' -H "Content-Type: application/json" -d @hao-jiliang-a07994e8-9e65-404c-a8d1-4d84cbe62fc8-v5.json</span><br></pre></td></tr></table></figure></li><li><p>查看license状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -u admin:123456 'localhost:9200/_xpack/license'</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原文&quot;&gt;&lt;a href=&quot;#原文&quot; class=&quot;headerlink&quot; title=&quot;原文&quot;&gt;&lt;/a&gt;原文&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lanrenkaifa.com/post/61&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://blog.iaiot.com/tags/elasticsearch/"/>
    
      <category term="xpack" scheme="https://blog.iaiot.com/tags/xpack/"/>
    
      <category term="kibana" scheme="https://blog.iaiot.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>logstash 接收 syslog 消息调试</title>
    <link href="https://blog.iaiot.com/logstash-syslog.html"/>
    <id>https://blog.iaiot.com/logstash-syslog.html</id>
    <published>2019-02-22T08:03:50.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>linux logger、rsyslog：<br>logger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm<br>查看生成的日志：tail -f /var/log/messages<br>rsyslog 配置：/etc/rsyslog.conf<br>配置 rsyslog 输出到指定地址（如 logstash）：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190222155850774.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>重启 rsyslog 服务：service rsyslog restart</p><p>logstash 接收 rsyslog 消息：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">syslog</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="string">"514"</span></span><br><span class="line">    <span class="string">add_field</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"type"</span><span class="string">,</span> <span class="string">"syslog"</span><span class="string">]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">if</span> <span class="string">"syslog"</span> <span class="string">in</span> <span class="string">[type]</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">       <span class="string">grok</span> <span class="string">&#123;&#125;</span></span><br><span class="line">       <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">add_field</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"a"</span><span class="string">,</span> <span class="string">"<span class="template-variable">%&#123;[host]&#125;</span>"</span><span class="string">]</span></span><br><span class="line">        <span class="string">add_field</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"b"</span><span class="string">,</span> <span class="string">"0"</span><span class="string">]</span></span><br><span class="line">       <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">geoip</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">kafka</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">bootstrap_servers</span> <span class="string">=&gt;</span> <span class="string">"192.168.0.100:9092"</span></span><br><span class="line">    <span class="string">topic_id</span> <span class="string">=&gt;</span> <span class="string">"tttttest"</span></span><br><span class="line">    <span class="comment">#compression_type =&gt; "snappy"</span></span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">"json"</span></span><br><span class="line">  <span class="string">&#125;</span> </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># stdout &#123; codec =&gt; rubydebug &#125;  # 调试输出</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux logger、rsyslog：&lt;br&gt;logger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm&lt;br&gt;查看生成的日志：tail -f /var/log/messages&lt;br&gt;rsyslog 配置：/etc/rsy
      
    
    </summary>
    
    
      <category term="logstash" scheme="https://blog.iaiot.com/tags/logstash/"/>
    
      <category term="syslog" scheme="https://blog.iaiot.com/tags/syslog/"/>
    
  </entry>
  
  <entry>
    <title>java spring 定时任务</title>
    <link href="https://blog.iaiot.com/spring-task.html"/>
    <id>https://blog.iaiot.com/spring-task.html</id>
    <published>2019-02-18T03:07:34.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.iaiot.xxx"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--定时任务--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">"myScheduler"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"myScheduler"</span> <span class="attr">pool-size</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iaiot.xxx.task;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成报告的定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportTask</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOG = LoggerFactory.getLogger(ReportTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成日报的定时任务(每天凌晨1点执行)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 1 * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateDayReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"开始生成日报..."</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成周报的定时任务(每周一凌晨2点30执行)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 30 2 ? * MON"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateWeekReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"开始生成周报..."</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成月报的定时任务(每月1号凌晨4点执行)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 4 1 * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateMonthReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"开始生成月报..."</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="corn-表达式"><a href="#corn-表达式" class="headerlink" title="corn 表达式"></a>corn 表达式</h2><p>每天凌晨1点执行：0 0 1 <em> </em> ?<br>每周一凌晨2点30执行：0 30 2 ? <em> MON<br>每月1号凌晨4点执行：0 0 4 1 </em> ?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;xml-配置&quot;&gt;&lt;a href=&quot;#xml-配置&quot; class=&quot;headerlink&quot; title=&quot;xml 配置&quot;&gt;&lt;/a&gt;xml 配置&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="spring" scheme="https://blog.iaiot.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>resin、tomcat 中添加 host 配置后 spring 定时任务执行多次</title>
    <link href="https://blog.iaiot.com/resin-tomcat-spring-task.html"/>
    <id>https://blog.iaiot.com/resin-tomcat-spring-task.html</id>
    <published>2019-02-15T09:16:38.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>配置文件 server.xml 中 appBase=”webapps” 改为 appBase=””<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190215170932231.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="resin"><a href="#resin" class="headerlink" title="resin"></a>resin</h2><p>配置文件 resin.xml 中 &lt;web-app-deploy path=”webapps” 改为 &lt;web-app-deploy path=””<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190215171432824.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tomcat&quot;&gt;&lt;a href=&quot;#tomcat&quot; class=&quot;headerlink&quot; title=&quot;tomcat&quot;&gt;&lt;/a&gt;tomcat&lt;/h2&gt;&lt;p&gt;配置文件 server.xml 中 appBase=”webapps” 改为 appBase=””&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="tomcat" scheme="https://blog.iaiot.com/tags/tomcat/"/>
    
      <category term="resin" scheme="https://blog.iaiot.com/tags/resin/"/>
    
      <category term="spring" scheme="https://blog.iaiot.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 自定义函数</title>
    <link href="https://blog.iaiot.com/mysql_fun.html"/>
    <id>https://blog.iaiot.com/mysql_fun.html</id>
    <published>2019-01-21T05:43:46.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> childOrgIds <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> topOrgIds <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> childOrgIds = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> topOrgIds = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(kroa.org_id) <span class="keyword">INTO</span> topOrgIds <span class="keyword">FROM</span> kk_role_org_authority kroa </span><br><span class="line"><span class="keyword">WHERE</span> kroa.org_authority_bh <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> kr.org_authority_bh <span class="keyword">FROM</span> kk_role kr <span class="keyword">WHERE</span> kr.role_id <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> kur.role_id <span class="keyword">FROM</span> kk_user_role kur <span class="keyword">WHERE</span> kur.user_id = userId)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">WHILE topOrgIds IS NOT NULL</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line"><span class="keyword">SET</span> childOrgIds = <span class="keyword">CONCAT</span>(childOrgIds, <span class="string">','</span>, topOrgIds);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(org_id) <span class="keyword">INTO</span> topOrgIds <span class="keyword">FROM</span> kk_org <span class="keyword">WHERE</span> FIND_IN_SET(father_id, topOrgIds) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">RETURN RIGHT(childOrgIds, CHAR_LENGTH(childOrgIds)-1);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>SELECT kuo.user_id FROM kk_user_org kuo WHERE kuo.org_id IN(getChildOrgIdsByUserId(100))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.iaiot.com/tags/mysql/"/>
    
      <category term="存储过程" scheme="https://blog.iaiot.com/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 笔记</title>
    <link href="https://blog.iaiot.com/ubuntu-notes.html"/>
    <id>https://blog.iaiot.com/ubuntu-notes.html</id>
    <published>2019-01-12T09:07:28.000Z</published>
    <updated>2020-01-09T01:56:35.455Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>设置 root 密码：sudo passwd root</p></li><li><p>开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes<br>然后：sudo service ssh restart</p></li><li><p>Ubuntu16 配置静态 ip：<a href="https://www.jianshu.com/p/d69a95aa1ed7" target="_blank" rel="noopener">https://www.jianshu.com/p/d69a95aa1ed7</a><br>ubuntu18 配置静态 ip：<a href="https://blog.csdn.net/u010039418/article/details/80934346" target="_blank" rel="noopener">https://blog.csdn.net/u010039418/article/details/80934346</a></p></li><li><p>查询软件：apt-cache madison kubeadm</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20190117141627122.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>安装指定版本：apt-get install -y kubeadm=1.11.6-00<br>彻底卸载软件：<br>删除软件及其配置文件  apt-get –purge remove kubeadm<br>删除没用的依赖包  apt-get autoremove kubeadm<br>此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理  dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p></li><li><p>关闭防火墙<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置 root 密码：sudo passwd root&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes&lt;br&gt;然后
      
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.iaiot.com/tags/linux/"/>
    
  </entry>
  
</feed>
