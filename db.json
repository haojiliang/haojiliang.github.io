{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/20170607105750931.png","path":"images/20170607105750931.png","modified":1,"renderable":0},{"_id":"source/images/20170607105812369.png","path":"images/20170607105812369.png","modified":1,"renderable":0},{"_id":"source/images/20160828144815858.png","path":"images/20160828144815858.png","modified":1,"renderable":0},{"_id":"source/images/20180120104417488.png","path":"images/20180120104417488.png","modified":1,"renderable":0},{"_id":"source/images/20180120104433898.png","path":"images/20180120104433898.png","modified":1,"renderable":0},{"_id":"source/images/20180120104449366.png","path":"images/20180120104449366.png","modified":1,"renderable":0},{"_id":"source/images/20180120104503821.png","path":"images/20180120104503821.png","modified":1,"renderable":0},{"_id":"source/images/201808140930396.jpeg","path":"images/201808140930396.jpeg","modified":1,"renderable":0},{"_id":"source/images/20180120105116570.png","path":"images/20180120105116570.png","modified":1,"renderable":0},{"_id":"source/images/20180814093241342.png","path":"images/20180814093241342.png","modified":1,"renderable":0},{"_id":"source/images/20180907162713361.png","path":"images/20180907162713361.png","modified":1,"renderable":0},{"_id":"source/images/20180907162520781.png","path":"images/20180907162520781.png","modified":1,"renderable":0},{"_id":"source/images/2018090716255676.png","path":"images/2018090716255676.png","modified":1,"renderable":0},{"_id":"source/images/20180818224047613.png","path":"images/20180818224047613.png","modified":1,"renderable":0},{"_id":"source/images/20180928100047591.png","path":"images/20180928100047591.png","modified":1,"renderable":0},{"_id":"source/images/20181126084920478.jpg","path":"images/20181126084920478.jpg","modified":1,"renderable":0},{"_id":"source/images/20181130105842729.jpg","path":"images/20181130105842729.jpg","modified":1,"renderable":0},{"_id":"source/images/2018120317301921.png","path":"images/2018120317301921.png","modified":1,"renderable":0},{"_id":"source/images/20190322171006565.png","path":"images/20190322171006565.png","modified":1,"renderable":0},{"_id":"source/images/20190322173348403.png","path":"images/20190322173348403.png","modified":1,"renderable":0},{"_id":"source/images/pmgr_menu_item.png","path":"images/pmgr_menu_item.png","modified":1,"renderable":0},{"_id":"source/images/20180112173241641.png","path":"images/20180112173241641.png","modified":1,"renderable":0},{"_id":"source/images/20180619190149680.jpeg","path":"images/20180619190149680.jpeg","modified":1,"renderable":0},{"_id":"source/images/20180112173621526.png","path":"images/20180112173621526.png","modified":1,"renderable":0},{"_id":"source/images/20180925140319547.png","path":"images/20180925140319547.png","modified":1,"renderable":0},{"_id":"source/images/20181108144249774.jpg","path":"images/20181108144249774.jpg","modified":1,"renderable":0},{"_id":"source/images/20181023113000234.png","path":"images/20181023113000234.png","modified":1,"renderable":0},{"_id":"source/images/20181108143944390.jpg","path":"images/20181108143944390.jpg","modified":1,"renderable":0},{"_id":"source/images/20181122191859785.png","path":"images/20181122191859785.png","modified":1,"renderable":0},{"_id":"source/images/20190112153020353.png","path":"images/20190112153020353.png","modified":1,"renderable":0},{"_id":"source/images/20190215170932231.png","path":"images/20190215170932231.png","modified":1,"renderable":0},{"_id":"source/images/20190215171432824.png","path":"images/20190215171432824.png","modified":1,"renderable":0},{"_id":"source/images/20190117141627122.png","path":"images/20190117141627122.png","modified":1,"renderable":0},{"_id":"source/images/20190222155850774.png","path":"images/20190222155850774.png","modified":1,"renderable":0},{"_id":"source/images/20190322171454875.png","path":"images/20190322171454875.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/images/20190319101449412.png","path":"images/20190319101449412.png","modified":1,"renderable":0},{"_id":"source/images/20190322171428208.png","path":"images/20190322171428208.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"source/images/20180927081010321.png","path":"images/20180927081010321.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"source/images/20190319101437635.png","path":"images/20190319101437635.png","modified":1,"renderable":0},{"_id":"source/images/20181120222005471.png","path":"images/20181120222005471.png","modified":1,"renderable":0},{"_id":"source/images/20181118141726250.png","path":"images/20181118141726250.png","modified":1,"renderable":0},{"_id":"source/images/20181224205905268.png","path":"images/20181224205905268.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"source/images/20180112173844671.png","path":"images/20180112173844671.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"source/images/20181122144236560.jpg","path":"images/20181122144236560.jpg","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/20151231172153087.png","path":"images/20151231172153087.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4d4e25365c772369b4572856ad652d36b2594e51","modified":1553472204245},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1553264983032},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1553264983033},{"_id":"themes/indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1553266994329},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1553264983033},{"_id":"themes/indigo/_config.yml","hash":"dfdc8233f5ef636f3177995cc02e3732a5137caa","modified":1553435280441},{"_id":"source/about/index.md","hash":"cc146a65e2faa6641c280562d0bac85c9f0cfd50","modified":1553401031612},{"_id":"source/tags/index.md","hash":"e1ed936fc441d054cdb3ee868106b19d78110942","modified":1553435859862},{"_id":"source/images/20170607105750931.png","hash":"fba0ba637bdd2c91b560809f88a11a7b2b380f48","modified":1553435133793},{"_id":"source/images/20170607105812369.png","hash":"87533794345f272d5f283ee7913fc473d9364e99","modified":1553435133827},{"_id":"source/images/20160828144815858.png","hash":"66a8e0d99a514c1d2082512e861d0e080c1f5f1f","modified":1553435133760},{"_id":"source/images/20180120104417488.png","hash":"73795931e2e8d9786720e90c7592755b0a76e5ba","modified":1553435133961},{"_id":"source/images/20180120104433898.png","hash":"f9e9d4d49d5219616227a9802f3772578467c844","modified":1553435133990},{"_id":"source/images/20180120104449366.png","hash":"3a1b0f36e427dc9e24b27cd819510c13092f7ffe","modified":1553435134021},{"_id":"source/images/20180120104503821.png","hash":"f741c9f2ac9ae9b86e525a68e96802138a3024f7","modified":1553435134091},{"_id":"source/images/201808140930396.jpeg","hash":"b95646f0eca345483c03595f0c72559c8a3fd082","modified":1553435133676},{"_id":"source/images/20180120105116570.png","hash":"66d8006eedbfe2d6b247532f8a274b128184cd5b","modified":1553435134131},{"_id":"source/images/20180814093241342.png","hash":"4558aa9fcfabdd760bbe1d654752e58a257b472b","modified":1553435134190},{"_id":"source/images/20180907162713361.png","hash":"1d6f667090c97527ee8a532f62e438d26819c1dd","modified":1553427466959},{"_id":"source/images/20180907162520781.png","hash":"111cfd3b4a206c25bd87299682dc8df3809d1407","modified":1553427466924},{"_id":"source/images/2018090716255676.png","hash":"9f936c5445c6cb53949b82a6c5238548b3311121","modified":1553427461373},{"_id":"source/images/20180818224047613.png","hash":"d472b524654c77545a0fa4ed2cb6be266c9c6a78","modified":1553426625602},{"_id":"source/images/20180928100047591.png","hash":"b1b9d520f93e40da7ce2ea18aef45fabd61beeb0","modified":1553427660044},{"_id":"source/images/20181126084920478.jpg","hash":"1cde3c86997b8c4fdda9c278898f2be6f26c63d1","modified":1553423027793},{"_id":"source/images/20181130105842729.jpg","hash":"da61ec58330307d41decbc24a16aa2999856da2e","modified":1553426279221},{"_id":"source/images/2018120317301921.png","hash":"4c8659d4155b1fc2ddc6d0f2714a1ae620301bd0","modified":1553420474111},{"_id":"source/images/20190322171006565.png","hash":"a1ab2612f89127c857cb380af7b7807dbc146239","modified":1553413011990},{"_id":"source/images/20190322173348403.png","hash":"904f2bf0a865f60a5687d3b11d75a83c4dac1674","modified":1553413012038},{"_id":"source/images/pmgr_menu_item.png","hash":"2960c2a2647aa162a0a4aeb830d79bd15eb83839","modified":1553419187079},{"_id":"source/_posts/Elasticsearch-buckets.md","hash":"8aca8a2eb3eb6d39c679a43cf917a7068b86b0d0","modified":1553521806401},{"_id":"source/_posts/Elasticsearch-cmd.md","hash":"30970aa8c274bfa07950b5ae9566d5d8c71965a9","modified":1553520100845},{"_id":"source/_posts/Elasticsearch-metrics.md","hash":"35c43d170974e0be8c042c9eeb54162ce7afdd65","modified":1553521829687},{"_id":"source/_posts/FastDFS-cmd.md","hash":"ffdc6b65520d487c124fa8742642f97eb9829941","modified":1553522124459},{"_id":"source/_posts/Elasticsearch-python.md","hash":"fd81d14ecbd7438fd5785b90da7a1b90ea635b1c","modified":1553520112066},{"_id":"source/_posts/FastDFS-filesystem.md","hash":"b67b5ea7e86a3d6604820e97d2cf98717adeb1e3","modified":1553522130048},{"_id":"source/_posts/Harbor.md","hash":"395a4072ca01bf4d73822932a146f8b48f147b11","modified":1553522161711},{"_id":"source/_posts/IntelliJ-IDEA-For-Mac.md","hash":"b5eea8517d269aa1d6923820ac43ce70aab67e32","modified":1553522180287},{"_id":"source/_posts/JMeter-URISyntaxException.md","hash":"c8ac3e04b5788318f958e7d469fa44fa25a57b34","modified":1553522214306},{"_id":"source/_posts/Mac-Shuttle-sshpass-xshell.md","hash":"ecabf407d548fdbf19fc8aa3340505623fcdd9a2","modified":1553522455270},{"_id":"source/_posts/Java-Socket.md","hash":"d530e9e11ba4ad55af09b3dde4da15583e2aae26","modified":1553522194873},{"_id":"source/_posts/Jmeter-webSocket.md","hash":"7b61ef7b6dcf8317378b1459bb80bbf17f5c7de0","modified":1553522226094},{"_id":"source/_posts/Kubernetes-notes.md","hash":"9855139121fa6c56cc832672ba50c62fe136ce47","modified":1553522279939},{"_id":"source/_posts/adb.md","hash":"d14abf24695470748e361ae805dd98e1a49498ff","modified":1553523313518},{"_id":"source/_posts/SELECT-CONCAT-GROUP-CONCAT.md","hash":"3b226e73f759b436396d203b2a7eae2fc0085ece","modified":1553522627471},{"_id":"source/_posts/WebStorm-debug-angular.md","hash":"1f5b59a871c0dd106f6ce2e28c1369cd43f50224","modified":1553432664018},{"_id":"source/_posts/Windows-PowerShell-ExecutionPolicy.md","hash":"6e32669291f513514afc6d4c35c93c2df8a35280","modified":1553522729673},{"_id":"source/_posts/app-api-token.md","hash":"cee5eb8afd75098d118ca0649b7a0845f75e1159","modified":1553521944276},{"_id":"source/_posts/cannot-open-url-please-check-this-url-is-correct.md","hash":"80179d12f1e93a13bf1e990923283c7bdfbc5bba","modified":1553521967928},{"_id":"source/_posts/bash-ng-command-not-found.md","hash":"93f19e9c19c837f30acd98c3cd0bff24116c1a3a","modified":1553422122267},{"_id":"source/_posts/apache-httpd-apache-proxy.md","hash":"98688bed9491f0ca4b43770c8383ed63d8348be8","modified":1553521879465},{"_id":"source/_posts/centos-install-mysql.md","hash":"bfbddec1c80ea45d5cff7473764d2a27b88e45ee","modified":1553433724787},{"_id":"source/_posts/could-NOT-be-bound.md","hash":"e4f587f97dc9e05a47acbf47b83c3e5054ee6e75","modified":1553521987462},{"_id":"source/_posts/centos-notes.md","hash":"ffcc1d18d3ab839001cb689fea87c5cfd13fcff6","modified":1553521978484},{"_id":"source/_posts/data-normalization.md","hash":"9032c79b68b95a709a2e94c53a3d6948b0f4082b","modified":1553522000728},{"_id":"source/_posts/docker-compose-move-wordpress.md","hash":"40427c2222723596fd6a42ad443e248bae7d95ca","modified":1553522031615},{"_id":"source/_posts/docker-compose-custom-network.md","hash":"e6e1d2718c0ef1e3c3a58b1a37934acd7f521b0c","modified":1553522017331},{"_id":"source/_posts/docker-nginx.md","hash":"73f776d1f90b31c50785664f55eeeff0f18894ee","modified":1553426305719},{"_id":"source/_posts/docker-daemon.md","hash":"c24acc007fb432fdb9093bdbfafdae824e490d2a","modified":1553522037739},{"_id":"source/_posts/docker-image-container.md","hash":"e1f2b8abed3a8f06c7924b03c30ca79104fba625","modified":1553522040323},{"_id":"source/_posts/docker-notes.md","hash":"d0f8efb1fbec5b60397e236e957dd6ca41e9acca","modified":1553433967934},{"_id":"source/_posts/docker-v-inode.md","hash":"1dab0ee6780035350b82d965819c2effe4116c52","modified":1553522059736},{"_id":"source/_posts/docker-install.md","hash":"b170dec6986953ef2b72eb8c0a2e5a6b596165ee","modified":1553434293229},{"_id":"source/_posts/docker-volume-device-or-resource-busy.md","hash":"b68df7e969a96f7e32bc324158566ec06f794807","modified":1553522066606},{"_id":"source/_posts/eclipse.md","hash":"a03ee48b2e70dd5b96d096131421e251a8e4b2c2","modified":1553435157648},{"_id":"source/_posts/elasticsearch-head.md","hash":"d98b7b0edfcda09baf93f8130606a4a00345d340","modified":1553421883105},{"_id":"source/_posts/elasticsearch-notes.md","hash":"440afe3e4904fc7218549c6f00a542db43c9cdef","modified":1553522088767},{"_id":"source/_posts/fastJson-$ref.md","hash":"0903442ec3efdab3c47aef0fe1c4088561f938e8","modified":1553522138112},{"_id":"source/_posts/es-nostop-up-mapping.md","hash":"a75ade75573ee11c88940fbc88b12b0500d2362f","modified":1553520594232},{"_id":"source/_posts/facet-Dynamic-web.md","hash":"1fd26e572546b9b9f2e737fe32f681b14e803470","modified":1553522116160},{"_id":"source/_posts/filebeat-error1.md","hash":"49a0c588dc80c166d29a6907ac5dc70cc228998c","modified":1553420499223},{"_id":"source/_posts/fastjson.md","hash":"e2dcb3b3faa86c913314928918fa52fd0eb1086b","modified":1553522142903},{"_id":"source/_posts/git-notes.md","hash":"a0431e61504f44576f94fd0a7dca36432efc3ab2","modified":1553433257949},{"_id":"source/_posts/gitignore.md","hash":"54ee8b5f394fa64a79136c6df06494fadacda7f2","modified":1553427517754},{"_id":"source/_posts/hello-hexo.md","hash":"0a7b8e09bcff579b716f902e3f77367e4579644f","modified":1553414112764},{"_id":"source/_posts/java-image-base64.md","hash":"745edd95e25bb785671797d982a962da28e76bb6","modified":1553428683674},{"_id":"source/_posts/java-deep-clone.md","hash":"c737587efd1567730e6b7907f9131c6779d278e6","modified":1553426939182},{"_id":"source/_posts/js-xss.md","hash":"67225026a8301b27486f2287da8728da588c5651","modified":1553522239781},{"_id":"source/_posts/javah-hellondk.md","hash":"9409a1602d306388f6db36805162e6d6dbf8bddd","modified":1553522209831},{"_id":"source/_posts/jstorm-kill-mytopo-1.md","hash":"84ce7051d72bd044ba9b929cafeaf67be595c2ec","modified":1553522257372},{"_id":"source/_posts/linux-arm9.md","hash":"0a4076f7e0ff522a25ab4fdbc0f765d819c30c7c","modified":1553522307049},{"_id":"source/_posts/jstorm-nimbus-Supervisor.md","hash":"01980cd9aa459f3979b3cb8986e8f6d2f53a39b9","modified":1553522250755},{"_id":"source/_posts/kubernetes-notes-0.md","hash":"136b783195fd1fddadbbc59fe0b03ba005eeaa85","modified":1553522274222},{"_id":"source/_posts/k8s-6443-was-refused.md","hash":"fe80214adf46a59a91e6c786a8288e4cf8ce09d3","modified":1553522267956},{"_id":"source/_posts/linux-notes.md","hash":"a8ba6ff53ed1caeaff8229ef8a3aa97399eb2ac7","modified":1553522326432},{"_id":"source/_posts/linux-ping.md","hash":"455a12193fbe1c8153079e67e57972885c46d772","modified":1553522330661},{"_id":"source/_posts/linux-widows-service.md","hash":"e7f51f41a0bda5841bb578581cf0a249ab440de5","modified":1553522342596},{"_id":"source/_posts/logstash-conf.md","hash":"2275000c8822a9179ed5bb9ec514c6e132e7ad8e","modified":1553423788470},{"_id":"source/_posts/logstash-syslog.md","hash":"04aefa6360f57eb2d68fcf2f5df18b46d3a6706e","modified":1553522400946},{"_id":"source/_posts/lua-notes.md","hash":"0cb97229551f33f9127806991960990e3b71c9a8","modified":1553432449184},{"_id":"source/_posts/log-example.md","hash":"d7b4138d8c240c73480188418335fa0079805b56","modified":1553522387094},{"_id":"source/_posts/maven-jar-NoClassDefFoundError.md","hash":"5c408f017b098a3c448fdd08ee76f20f21f0fd18","modified":1553429152159},{"_id":"source/_posts/mysql-python-redis.md","hash":"287353bde7158489d88e9e1a17c8770a01c0aea1","modified":1553433146569},{"_id":"source/_posts/mysql-notes.md","hash":"8ab5da3e7701cf4033a64d015ef3cd16bb29f418","modified":1553433859799},{"_id":"source/_posts/nginx-agent.md","hash":"bc19c929053c21ba9d702d93ce6c4746a718492c","modified":1553435027845},{"_id":"source/_posts/mybaits-int.md","hash":"5a387b438cfd1196121ced6160b2f469c9fe66b3","modified":1553420250161},{"_id":"source/_posts/nginx-notes.md","hash":"24f5483694b05a128ec87e01cd148d777a9ee9d6","modified":1553421974787},{"_id":"source/_posts/node-modules-codelyzer.md","hash":"b3711bfb77a26d46366d9f7a4870ee41963efaed","modified":1553421623129},{"_id":"source/_posts/nginx-php-fpm-alpine.md","hash":"f67bcdf5c9ce4fffea68419ff0f054771a1c9d7b","modified":1553522500162},{"_id":"source/_posts/npm-angular-4058.md","hash":"a37d2a4b8bb3a38696dc11f4d4187b6d61fbedf5","modified":1553421519384},{"_id":"source/_posts/npm-install-webpack-g.md","hash":"4abb11766a6c17b5cbe7e778fe2e291a1723d2be","modified":1553522534730},{"_id":"source/_posts/openresty.md","hash":"0958bc7bdd7652e93269906f2340c361e2e2944c","modified":1553431147001},{"_id":"source/_posts/openresty-lua-nginx-module.md","hash":"a5ce74a4f97a60f323297e55c6d0c30021ee8c8f","modified":1553522549782},{"_id":"source/_posts/proguard-java.md","hash":"5c1f30598542d2196384dcaeeb2a18a7b007fe9b","modified":1553425901848},{"_id":"source/_posts/pip-install-tensorflow.md","hash":"5eef42b394c4c78fead46bbf7c479cd26b43cffb","modified":1553428613691},{"_id":"source/_posts/pyspark-spark-shell-sparkDriver-failed.md","hash":"a8229e33d4a631dcdaf5ac8248a797e793aafee6","modified":1553522564617},{"_id":"source/_posts/redis-publish-subscribe.md","hash":"7e8d6692ac64d668a068aed0be8bed03da13ca81","modified":1553522595464},{"_id":"source/_posts/redis-notes.md","hash":"80f60bee6b45ba49f5e270dfed50f5ba71512fcc","modified":1553422847382},{"_id":"source/_posts/resin-tomcat-spring-task.md","hash":"f8e6927f37f4a8d45dc7abb479bfdb2d8d7f180e","modified":1553522615965},{"_id":"source/_posts/resin.md","hash":"9783f6efdd92fab34454f61bc43cb9fa4e219d87","modified":1553430830311},{"_id":"source/_posts/shangqiao.md","hash":"03599deb4d721d8ed2a61e34e675c3e76af798c4","modified":1553522636122},{"_id":"source/_posts/storm-ack.md","hash":"7351c42b97ab31eb3011c163349a5349fd6717da","modified":1553434847702},{"_id":"source/_posts/seo.md","hash":"3531d68a89ead8bd7f5ec596cb9d461798ac2975","modified":1553427265030},{"_id":"source/_posts/storm-no-IRichSpout.md","hash":"a83b136fd83f39292a4cc2eec57cebe90ddb43dd","modified":1553427075503},{"_id":"source/_posts/spring-task.md","hash":"a5f94d2e31d7c76d4c9f2f2972bb8e15f8a80a8d","modified":1553522640771},{"_id":"source/_posts/ubuntu-notes.md","hash":"b91df1dee939666c446b26063574a2c9196565e0","modified":1553522659409},{"_id":"source/_posts/urllib2.md","hash":"238b0d406f2c8b471bac22d5d635ca4443b85e0a","modified":1553522667486},{"_id":"source/_posts/storm-zookeeper.md","hash":"ac9acd9fe43d13bac6764af39041915f5ea5eb69","modified":1553429447312},{"_id":"source/_posts/storm-topology-message-timeout-secs.md","hash":"e5566c7e5e791aeac3693390192456936b24865f","modified":1553522652092},{"_id":"source/_posts/x-pack-license.md","hash":"f38cb924d1106434f6b69bbf22ef2a93b075ba31","modified":1553522944602},{"_id":"source/_posts/windows-miss-dll.md","hash":"2040dff03069b631f3fd0e3f991667eae8b69216","modified":1553522720832},{"_id":"source/_posts/vmware-nat.md","hash":"7a1f9429594742589f8532f2acb37a2fe8514414","modified":1553423032085},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1553264983033},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1553264983033},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1553264983033},{"_id":"source/_posts/websocket.md","hash":"f5c2fc3f8c0fc9f124ac29e37f2463d3127d6cc0","modified":1553522701947},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1553264983033},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1553398623309},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1553264983041},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1553264983041},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1553264983041},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1553264983041},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1553264983041},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1553264983041},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1553264983041},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1553264983042},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1553264983043},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1553264983042},{"_id":"source/_posts/xpack-password.md","hash":"35391264b7a9aa33654772bc65d90ae5dd618d07","modified":1553523198645},{"_id":"source/images/20180112173241641.png","hash":"9fa9c92c184eac650607074e423ca6d850a9437b","modified":1553435133863},{"_id":"source/images/20180619190149680.jpeg","hash":"f6c73ad9f4d7699c6c9f3d86f2406673ab61f6ea","modified":1553435134161},{"_id":"source/images/20180112173621526.png","hash":"2ec693e9ecf65eafe52e448289acf57f3ff13f21","modified":1553435133897},{"_id":"source/images/20180925140319547.png","hash":"28d0e0d203ea16158c88aaedaca2598a259381e5","modified":1553427660037},{"_id":"source/images/20181108144249774.jpg","hash":"1079ecc445b7c2afb90e508f413fcbc53c6946ad","modified":1553423675893},{"_id":"source/images/20181023113000234.png","hash":"60dce9d10bfed9da0457af262178599eab5f87da","modified":1553428620630},{"_id":"source/images/20181108143944390.jpg","hash":"95343438e39f6d4b57a97c3232f1904800e5f3ce","modified":1553423675857},{"_id":"source/images/20181122191859785.png","hash":"f26e96a1d9eb02cf7b5e7f2338b5dfc9806997e7","modified":1553421451428},{"_id":"source/images/20190112153020353.png","hash":"6ea66831413486aadba95127e1adcb23b189b219","modified":1553417090133},{"_id":"source/images/20190215170932231.png","hash":"b4a27e0901472bc1fea28409ac654957ee42a5e5","modified":1553416198845},{"_id":"source/images/20190215171432824.png","hash":"52bd38abae9bd9acc4b92519e906c702262998d7","modified":1553416198868},{"_id":"source/images/20190117141627122.png","hash":"6c92ff5d8d6de8a75d598040d1afc9c7f3052a25","modified":1553416502919},{"_id":"source/images/20190222155850774.png","hash":"0488bb68f4f5855e033caec89f4db64bcb9f390c","modified":1553415648069},{"_id":"source/images/20190322171454875.png","hash":"bbe7fa35c0fff17f519c8804bebc5d2816814b5b","modified":1553413012035},{"_id":"themes/indigo/source/favicon.ico","hash":"77b96799b970db62c269a0b8f1223d223adfa134","modified":1553352801695},{"_id":"source/images/20190319101449412.png","hash":"782a6de53193246a76b91f970ff9403cf2358558","modified":1553414534986},{"_id":"source/images/20190322171428208.png","hash":"bbc0afd1d21cfb5ff6b8ee12ec8a84dc99e105c9","modified":1553413012032},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1553264983034},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1553264983034},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1553264983035},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1553264983035},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1553264983035},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1553264983036},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1553264983036},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1553264983035},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1553264983036},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1553264983038},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"7e06d1c3ecf964a0a31e811d2c4935e084c6ad5c","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1553264983041},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1553264983071},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1553264983072},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1553264983073},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1553264983073},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1553264983075},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1553264983073},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1553264983074},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1553264983074},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1553264983076},{"_id":"source/images/20180927081010321.png","hash":"334e5679853fcab43749904e41b92bae2a26d9f3","modified":1553435134220},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"e39b04c4d997d7aea765385cd0f97736e597368b","modified":1553330852627},{"_id":"themes/indigo/source/img/avatar.png","hash":"2659858d07227584e64ebd4b89c4f5612e4a09bb","modified":1553330058689},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"767e704f7a6d57b7a4d7a1d78b7656c6e57e8b70","modified":1553331027132},{"_id":"source/images/20190319101437635.png","hash":"69eaf866d1b94c53d9c94723d9364fe089d15f47","modified":1553414534979},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1553264983036},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1553264983036},{"_id":"themes/indigo/layout/_partial/plugins/gitalk.ejs","hash":"bcf792a5633151fd999319fd91cf477e6860ae9c","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1553264983037},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1553264983038},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1553264983038},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1553264983038},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1553264983038},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"21530a1bc362d286d08dbce0baf37d09d7c58c92","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1553264983039},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1553264983040},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1553264983040},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1553264983043},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1553264983043},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1553264983044},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1553264983044},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1553264983044},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1553264983044},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1553264983045},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1553264983046},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1553264983047},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1553264983048},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1553264983047},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1553264983047},{"_id":"source/images/20181120222005471.png","hash":"11f3e08e0b093e96f8bcfdcf0f5cce178c600a2e","modified":1553421865407},{"_id":"source/images/20181118141726250.png","hash":"d724d84751ade1220623a0aede7a2a77f4f5219d","modified":1553423158301},{"_id":"source/images/20181224205905268.png","hash":"1296f820c065add25f9f174077ce52d03ea3077c","modified":1553419408154},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1553264983044},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1553264983058},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1553264983060},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1553264983060},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1553264983063},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1553264983063},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1553264983066},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1553264983065},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1553264983068},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1553264983069},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1553264983069},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1553264983071},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1553264983070},{"_id":"source/images/20180112173844671.png","hash":"648b00a2d30a1189b1f95cee60f94311a650a45d","modified":1553435133932},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553264983056},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1553264983060},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553264983057},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1553264983062},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1553264983065},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1553264983067},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553264983050},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553264983056},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1553264983059},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1553264983064},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1553264983070},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553264983052},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1553264983062},{"_id":"source/images/20181122144236560.jpg","hash":"91a2c4e41f4249605c65bebfe7dc373a2eb5e72a","modified":1553421436117},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553264983054},{"_id":"source/images/20151231172153087.png","hash":"fa8ea14f0a60dafa3e9b7a7d3b61eead166410c9","modified":1553435133728},{"_id":"public/atom.xml","hash":"270bce4c76c571172424d85763566608bd283516","modified":1553524702266},{"_id":"public/content.json","hash":"e1b662013f1ceab9194bbd3d4036c3b0d994bf0e","modified":1553524702267},{"_id":"public/about/index.html","hash":"b4868dfea39a0f72198f98a452e66405b1ecf081","modified":1553524704111},{"_id":"public/archives/2015/index.html","hash":"c4a5a2aed93eefe533e20d050bfd1a85eb6b7142","modified":1553524704111},{"_id":"public/archives/2015/12/index.html","hash":"502d408d62e447d3d708cceff58499a1e8d9fc4c","modified":1553524704111},{"_id":"public/archives/2016/index.html","hash":"13a3dda930cdba3e835620b5d5af0f3640bde8b4","modified":1553524704111},{"_id":"public/archives/2016/01/index.html","hash":"b038c958f48ce87ddcd8d7a3ac6a6ddf927af525","modified":1553524704111},{"_id":"public/archives/2016/08/index.html","hash":"e714b42f5dc607ab10a5972e58b74915c9a72ee8","modified":1553524704111},{"_id":"public/archives/2017/03/index.html","hash":"aaaa63e460430a6a6275d01898c264b47848ebd4","modified":1553524704111},{"_id":"public/archives/2017/06/index.html","hash":"da5acc304ac1b481f889ef292fbf59d48688a513","modified":1553524704116},{"_id":"public/archives/2017/09/index.html","hash":"610a6df0486a55972e3b051ffaeb26fd95c87dbc","modified":1553524704117},{"_id":"public/archives/2017/10/index.html","hash":"d6fd96756daca6fc2e0c4218e56081c4f0e64a5f","modified":1553524704117},{"_id":"public/archives/2017/12/index.html","hash":"a95932608e638d562982517d066add66c895c4c4","modified":1553524704118},{"_id":"public/archives/2018/page/4/index.html","hash":"8d0d47102867f6de68614432b9669a93ca0e48a3","modified":1553524704118},{"_id":"public/archives/2018/01/index.html","hash":"f2495591c6e0e9629b80f4b24f0e7005745efa92","modified":1553524704118},{"_id":"public/archives/2018/02/index.html","hash":"70ac181edfda3cf939a0d67250eeab16e481b18a","modified":1553524704118},{"_id":"public/archives/2018/04/index.html","hash":"b1c2501c153a060d0b1f3fbd7819b6a02a151c3e","modified":1553524704118},{"_id":"public/archives/2018/05/index.html","hash":"be1f70202937033d4f4f61b23fe113e248b9b489","modified":1553524704118},{"_id":"public/archives/2018/06/index.html","hash":"0e25522f60be349efd389a2aaf0dd0bd9d329a71","modified":1553524704118},{"_id":"public/archives/2018/07/index.html","hash":"a2ec9968dee12de773b1ffff104a4fa0792fd420","modified":1553524704118},{"_id":"public/archives/2018/09/index.html","hash":"117b5ea39cb80bb2b92e8ed1bfb2af18b140129d","modified":1553524704118},{"_id":"public/archives/2018/10/index.html","hash":"0f421daf82a554fa5c72fd21c0f8f479cdfc1581","modified":1553524704118},{"_id":"public/archives/2019/01/index.html","hash":"ae4401a93358993a67e8d61d377934fac2a689bf","modified":1553524704118},{"_id":"public/archives/2019/02/index.html","hash":"948b901717053a38c2109132e8ac78943fab00ea","modified":1553524704118},{"_id":"public/archives/2019/03/index.html","hash":"b3dea96f8aebf60216fd7914e8c629fea08f1089","modified":1553524704118},{"_id":"public/tags/index.html","hash":"1c35b83f09276d9c6a5a7a5e0cb1c2a328f71136","modified":1553524704118},{"_id":"public/20190322/Hello-Hexo.html","hash":"775c9d518810ab5e04a14d8535db186568873182","modified":1553524704118},{"_id":"public/20190322/redis-publish-subscribe.html","hash":"820c757eb2ea00471caa341bb00eda5df866dd41","modified":1553524704118},{"_id":"public/20190322/websocket-400-302-spring-resin-nginx.html","hash":"4fff4bd776d1deb2fb260d0d570d2508e87c2203","modified":1553524704119},{"_id":"public/20190319/elasticsearch-notes.html","hash":"53c1b91a95daa4ddc5f8cc4c5d03155d704dc975","modified":1553524704119},{"_id":"public/20190318/xpack-password.html","hash":"cbe3ce7dc6356ac8647b162dc72b1a1ae6fa8ab6","modified":1553524704119},{"_id":"public/20190318/x-pack-license.html","hash":"1b426ca961f6963fae25f7095c62fbc6e0d6a0c3","modified":1553524704119},{"_id":"public/20190222/logstash-syslog.html","hash":"701e45dc61946a445604021971a9e202decd08ff","modified":1553524704119},{"_id":"public/20190218/spring-task.html","hash":"6be5dffcda43bba2c4249f3f0667fed7519caf19","modified":1553524704119},{"_id":"public/20190215/resin-tomcat-spring-task.html","hash":"b9c807a0ef00274a27f69af97eb7134fce46af67","modified":1553524704119},{"_id":"public/20190112/ubuntu-notes.html","hash":"f9398dd70d2fc048fa4b1ca873de82f56cf30423","modified":1553524704119},{"_id":"public/20190112/Kubernetes-notes.html","hash":"24f9a1dd75abb40c0abbc522cf50e6dd33e08cc5","modified":1553524704119},{"_id":"public/20190112/openresty-lua-nginx-module.html","hash":"0f2ed6c3b0d5c99cb9c3ca97eb8b178bc717b36f","modified":1553524704119},{"_id":"public/20190109/fastJson-$ref.html","hash":"4110eb1abc95139b78ffd92bbfd0a8a438491c32","modified":1553524704119},{"_id":"public/20190104/docker-volume-device-or-resource-busy.html","hash":"9987edeccf49c30c9aa249add23acf850fce6d9e","modified":1553524704119},{"_id":"public/20181225/Jmeter-webSocket.html","hash":"68d600812356ee0394ad2334e34ef75014360cc6","modified":1553524704119},{"_id":"public/20181223/pyspark-spark-shell-sparkDriver-failed.html","hash":"25404b31fab6d1073a4580489b22ad5e48518a52","modified":1553524704119},{"_id":"public/20181222/SELECT-CONCAT-GROUP_CONCAT.html","hash":"052bebcfdec7aeb15c3bca995ec60ca66ee61108","modified":1553524704119},{"_id":"public/20181218/windows-miss-dll.html","hash":"fbad1afa88b4b0cedb5023612b11cc96c6cefbf8","modified":1553524704119},{"_id":"public/20181222/undefined.html","hash":"3c6a64011a507615dfb73cb742b9761acf6e78dc","modified":1553524704119},{"_id":"public/20181213/docker-compose-custom-network.html","hash":"e0969f14646c9141d36e1bb21b35b986599a392f","modified":1553524704119},{"_id":"public/20181213/mybaits-int.html","hash":"97beaf7a4d0ff76b3fe1d0869ab5e0bf63eed193","modified":1553524704119},{"_id":"public/20181205/nginx-php-fpm-alpine.html","hash":"c6e5035774d705beb5217ef7291af851d096c3cc","modified":1553524704119},{"_id":"public/20181203/filebeat-error1.html","hash":"118879f78917464723b69f4316a9cd0def6e4c87","modified":1553524704119},{"_id":"public/20181203/Windows-PowerShell-ExecutionPolicy.html","hash":"f6464619e579227c22c88aac4376ad508a68ba99","modified":1553524704119},{"_id":"public/20181202/docker-compose-move-wordpress.html","hash":"0d5d3b6e6c8f888d3a914db9f99fbab5a0b88a0a","modified":1553524704119},{"_id":"public/20181201/docker-daemon.html","hash":"e637119b1d1d56cedc0d07a2c4f5b6083b54e4e1","modified":1553524704119},{"_id":"public/20181124/docker-v-inode.html","hash":"53831bf728aaa193ef1dadcc756b9aa1ee36f8f4","modified":1553524704119},{"_id":"public/20181122/bash-ng-command-not-found.html","hash":"f9dc1df08f6f13aea47234dfa04c16bd954c1d6d","modified":1553524704120},{"_id":"public/20181122/npm-angular-4058.html","hash":"248341be6350b9de742ea30902d7af0aeb6def8b","modified":1553524704120},{"_id":"public/20181122/node_modules-codelyzer.html","hash":"594db24960a42008028ea832cc00eb2858545dbd","modified":1553524704120},{"_id":"public/20181120/FastDFS-cmd.html","hash":"af7e729fcdaf0340f5cb4624380255eb5cf93e68","modified":1553524704120},{"_id":"public/20181120/elasticsearch-head.html","hash":"e0e0e1b61dfc3f22520af74f6a3a9631dac41464","modified":1553524704120},{"_id":"public/20181120/nginx-notes.html","hash":"b478aef39a79d7ea3a581c9dce152ef7b3a7683e","modified":1553524704120},{"_id":"public/20181120/centos-notes.html","hash":"fcf1e6e51f6cce02da4dea5985d67a4dbcb3c205","modified":1553524704120},{"_id":"public/20181120/linux-widows-service.html","hash":"b4adcdd1b08e1f4badb6c059bb45db26863075ea","modified":1553524704120},{"_id":"public/20181118/redis-notes.html","hash":"5290142e70e2c7a58ed46dc30a0b9e06008a0973","modified":1553524704120},{"_id":"public/20181118/vmware-nat.html","hash":"257fc67f3f6d7341c6c2ea9b6339064ce0bbe8dd","modified":1553524704120},{"_id":"public/20181118/Mac-Shuttle-sshpass-xshell.html","hash":"1a4533b61ef5e826380e28330bd6c3604cd1a5df","modified":1553524704120},{"_id":"public/20181114/log-example.html","hash":"95dc3bac59efa8d9aae55100251573fd9807d98f","modified":1553524704120},{"_id":"public/20181108/Harbor.html","hash":"4897a16a7df4680121ce78ccc38b23436447e457","modified":1553524704120},{"_id":"public/20181108/logstash-conf.html","hash":"9b1be35cbf24aed7433f5e9bf82873095afde952","modified":1553524704120},{"_id":"public/20181023/pip-install-tensorflow.html","hash":"19bf44be41a1149aff3f2a444c03508c64a55f6b","modified":1553524704120},{"_id":"public/20181012/IntelliJ-IDEA-For-Mac.html","hash":"f47a920f50032ba588d773abd6b531dfcc722f6d","modified":1553524704120},{"_id":"public/20181008/es-nostop-up-mapping.html","hash":"2cfe6bf97eb8fda28a98851536db756eacc25e64","modified":1553524704120},{"_id":"public/20180925/cannot-open-url-please-check-this-url-is-correct.html","hash":"d82e37d3c67f5e4968614872d7d55358f2ae641c","modified":1553524704121},{"_id":"public/20180907/gitignore.html","hash":"0244d5176aa9ae85fed9bfbf5c7303fd40dafe55","modified":1553524704121},{"_id":"public/20180907/seo.html","hash":"e9f6cb0749283277deeb2d6829f7e10c190b5c45","modified":1553524704121},{"_id":"public/20180907/storm-no-IRichSpout.html","hash":"1df6a340bcefe85f2ff9c77cae3bd997f52157e9","modified":1553524704121},{"_id":"public/20180907/java-deep-clone.html","hash":"8853819ac123e2e7ed98710763ab30e1ecce1537","modified":1553524704121},{"_id":"public/20180820/shangqiao.html","hash":"2f0f9f49479d76bb221ee41a5434c4cefb0e85ce","modified":1553524704121},{"_id":"public/20180818/adb.html","hash":"4f1feed5bb2dabc5981c97fe6d6403210b2f2b50","modified":1553524704121},{"_id":"public/20180818/npm-install-webpack-g.html","hash":"a0f12017a8142c67929ed0aa1cf27c6547de3ac6","modified":1553524704121},{"_id":"public/20180814/app-api-token.html","hash":"873fc9d5a1310adbfb601dc9fcc97d8d22bec0f8","modified":1553524704121},{"_id":"public/20180813/docker-nginx.html","hash":"06a24e3cca45f7d10306bcd1cf3356a2b7fd0f11","modified":1553524704121},{"_id":"public/20180813/apache-httpd-apache-proxy.html","hash":"1e9f75eb3252ebd01693efa92165363437ad9da1","modified":1553524704121},{"_id":"public/20180813/proguard-java.html","hash":"c32ec7c47551d39fc4d2b2f1e079a61a5479945c","modified":1553524704121},{"_id":"public/20180809/Java-Socket.html","hash":"445ab086b895df377b313a7477f3c75228d8bdb2","modified":1553524704121},{"_id":"public/20180809/FastDFS-filesystem.html","hash":"c2f718465e888af9bb69bb9c254aabb849e3adc0","modified":1553524704121},{"_id":"public/20180809/java-image-base64.html","hash":"3994ba810b15056198479fba73ce2b709da2d891","modified":1553524704121},{"_id":"public/20180807/data-normalization.html","hash":"cd048ee50c79b13bdc8359e395aed212a9ef6624","modified":1553524704121},{"_id":"public/20180801/storm-topology-message-timeout-secs.html","hash":"168bb194dff45ff6263c81416a05c8814e6d8206","modified":1553524704121},{"_id":"public/20180801/nginx-agent.html","hash":"86a3f80ecd9c3f9a6f6787f37495de4914295342","modified":1553524704121},{"_id":"public/20180801/jstorm-kill-mytopo-1.html","hash":"4d3c516a39bdae3bf961c61f46a308dcdd0b47c6","modified":1553524704121},{"_id":"public/20180801/storm-ack.html","hash":"4db143ca421e38866dad227683efeec927530a91","modified":1553524704122},{"_id":"public/20180718/kubernetes-notes.html","hash":"4701e8706c90f7ce36c4b36ffa6d3ccccf8eea13","modified":1553524704122},{"_id":"public/20180716/docker-install.html","hash":"6e18edb3ca5d71806dd259af1726ef594055e52e","modified":1553524704122},{"_id":"public/20180628/docker-image-container.html","hash":"536a709d282e647cc207e7a34c43f0ee6539b861","modified":1553524704122},{"_id":"public/20180628/docker-notes.html","hash":"97f89f2cefda050ef84c7515132afc4517cdc5d1","modified":1553524704122},{"_id":"public/20180619/mysql-notes.html","hash":"36c54e859540f7936d0f82331189ba5e4f30717e","modified":1553524704122},{"_id":"public/20180619/centos-install-mysql.html","hash":"d2bae5db43665ceeb000d71fa7c00267e93f4d44","modified":1553524704122},{"_id":"public/20180522/jstorm-nimbus-Supervisor.html","hash":"47f86f7e560eb3717955899410aa45e085b40fd3","modified":1553524704122},{"_id":"public/20180404/git-notes.html","hash":"58bd7af2648146c7400dd97dbf1b437a3ffad721","modified":1553524704122},{"_id":"public/20180206/mysql-python-redis.html","hash":"2cff04f1b64d6e883f4d6d1f35e174094db56200","modified":1553524704122},{"_id":"public/20180206/Elasticsearch-python.html","hash":"5aa841d5edb90128fe618404debc96093239855a","modified":1553524704122},{"_id":"public/20180516/fastjson.html","hash":"a167c96e6da8723b4e02e37bb130bcff9a3d8dc0","modified":1553524704122},{"_id":"public/20180206/js-xss.html","hash":"59776c3aad5c25266a3830b9ae5ad1d0b32ef1e2","modified":1553524704122},{"_id":"public/20180124/Elasticsearch-cmd.html","hash":"6bc194565a0b595f286c33b06d105a32507b5945","modified":1553524704122},{"_id":"public/20180120/WebStorm-debug-angular.html","hash":"9617b202e6bce483c05d2e997775ecb7968f01ef","modified":1553524704122},{"_id":"public/20180112/lua-notes.html","hash":"b11fba69ae04e3261ff14cb9f569a104ff7e9248","modified":1553524704122},{"_id":"public/20171228/Elasticsearch-buckets.html","hash":"68da7a0194a6af88bc58f7dbe743c7048bcef681","modified":1553524704122},{"_id":"public/20171227/Elasticsearch-metrics.html","hash":"6f422a73cfbcf5275fdf39a586c129bd8856ee7a","modified":1553524704122},{"_id":"public/20171206/could-NOT-be-bound.html","hash":"fbd03b8bb2ffd0ea1f45e1fd70deb9588981aae5","modified":1553524704123},{"_id":"public/20171018/openresty.html","hash":"4d3d74a5842b242ba00660aa68b945bae72d6924","modified":1553524704123},{"_id":"public/20171201/urllib2.html","hash":"eb026f6b7aa6267344435c9c3ef6dd2f3b2aa411","modified":1553524704123},{"_id":"public/20171013/JMeter-URISyntaxException.html","hash":"923a20a3d70cdc6f4c172d3255bef4fe634ad505","modified":1553524704123},{"_id":"public/20170918/linux-notes.html","hash":"c7cd0f79c57d78469ce4a85a96ecf7cdc8e06be2","modified":1553524704123},{"_id":"public/20170918/resin.html","hash":"6b872de377ea186a92ee60170c0fc57f2916458b","modified":1553524704123},{"_id":"public/20170906/storm-zookeeper.html","hash":"51efac0b75a34137e669b23b6473bbcce404117e","modified":1553524704123},{"_id":"public/20170901/eclipse.html","hash":"143181ec89535ee9498530a2cf52f75a11de4329","modified":1553524704123},{"_id":"public/20170618/facet-Dynamic-web.html","hash":"4679f71d38fd73fe959b58f2b9d93f803408c545","modified":1553524704123},{"_id":"public/20170308/maven-jar-NoClassDefFoundError.html","hash":"d22d5afe8aca560bcc2f633b31fae1cfa74b9705","modified":1553524704123},{"_id":"public/20160104/linux-ping.html","hash":"259efd2112dc2b0cdf281e78ee6658f08acb6522","modified":1553524704123},{"_id":"public/20160828/javah-hellondk.html","hash":"3365a097c71bf64cdcc0a85d282aaf0cafa57ccc","modified":1553524704123},{"_id":"public/20151231/linux-arm9.html","hash":"ee7a5217a1f10d1e1b1548a84d639395a375ca3f","modified":1553524704123},{"_id":"public/archives/index.html","hash":"762885b71f0a2d9cf314dd1a51c7641afcf15de8","modified":1553524704123},{"_id":"public/archives/page/2/index.html","hash":"4b7bdfd938032e740bac86911fdd14537f55b3ec","modified":1553524704123},{"_id":"public/archives/page/3/index.html","hash":"d069a70333fe8f070952a02f8cf1c340aa73f6f3","modified":1553524704123},{"_id":"public/archives/page/4/index.html","hash":"7476f13e96286d4728d66d470a8cf069a016ab61","modified":1553524704123},{"_id":"public/archives/page/5/index.html","hash":"70e6ac69cff90beb8507abf3ffe69881031ba5ad","modified":1553524704123},{"_id":"public/archives/2017/index.html","hash":"6795d7911d16c833e0b9f095e63afe0a88f9bcba","modified":1553524704123},{"_id":"public/archives/2018/index.html","hash":"1b44b84d642d6ab27ee766914afb032016ffcc3a","modified":1553524704123},{"_id":"public/archives/2018/page/2/index.html","hash":"83fef6a7d964a3d4132e901bff7074f0af43d108","modified":1553524704123},{"_id":"public/archives/2018/page/3/index.html","hash":"f67829f6a7b420582862b88e95c863b12ab96fdb","modified":1553524704123},{"_id":"public/archives/2018/08/index.html","hash":"3021cd4d760ed86f102c801428be2d2c7d213384","modified":1553524704124},{"_id":"public/archives/2018/11/index.html","hash":"23352c174a39aaa703a8fcfafba59596de769ca5","modified":1553524704124},{"_id":"public/archives/2018/12/index.html","hash":"d41224ccfda45ab4c9b8c685eb00e88cec93ebf9","modified":1553524704124},{"_id":"public/archives/2019/index.html","hash":"b59a85eac6f9646559f5d873524514700d2d4bee","modified":1553524704124},{"_id":"public/index.html","hash":"f0c05561098f71fabd6565a361dc552888d6fdfe","modified":1553524704124},{"_id":"public/page/2/index.html","hash":"67b36b45d38db605702c120ed6d3d08500f8eac9","modified":1553524704124},{"_id":"public/page/3/index.html","hash":"0e7f0ff979e251b210ed1f24d07f6c17580e79d6","modified":1553524704124},{"_id":"public/page/4/index.html","hash":"6ccf362b2c23b2b11b3f71043c434e53590d8b5e","modified":1553524704124},{"_id":"public/page/5/index.html","hash":"45ba1ee384ac1ea06546423131f28f19aa730021","modified":1553524704124},{"_id":"public/tags/elasticsearch/index.html","hash":"5d05476f354a932f3bcb6964f33c78df650f62c4","modified":1553524704124},{"_id":"public/tags/fastDFS/index.html","hash":"5408cb0b827c6daa3d5e505cc2f159154374db48","modified":1553524704124},{"_id":"public/tags/python/index.html","hash":"e6dea5c855223ecca6376d8cc0cb931349266407","modified":1553524704124},{"_id":"public/tags/harbor/index.html","hash":"7bcdfa6fc900c723232b9b817e252c1c78fa9077","modified":1553524704124},{"_id":"public/tags/docker/index.html","hash":"e2da3d75cee432eea3f445960af57e320f5da059","modified":1553524704124},{"_id":"public/tags/jMeter/index.html","hash":"d6bb50e83455a5f395563cbfb9a8d941b53dcfd3","modified":1553524704124},{"_id":"public/tags/mac/index.html","hash":"533f83883417b5a1aeb46a0dfe523a22a9ee4fce","modified":1553524704124},{"_id":"public/tags/java/index.html","hash":"86f1a807521fa0814b6676d4d72d5f40a6e0b662","modified":1553524704124},{"_id":"public/tags/socket/index.html","hash":"0a5e7deed8b1bfe70e96603d7925c51a59c6851d","modified":1553524704124},{"_id":"public/tags/jmeter/index.html","hash":"0070659207ee70adfcc32858e8e9044076dca7bb","modified":1553524704124},{"_id":"public/tags/webSocket/index.html","hash":"e36aa8b8c1ff8de0aad35c3452d338d1cbbc0cf5","modified":1553524704124},{"_id":"public/tags/kubernetes/index.html","hash":"9a1dbda1297828b6a7226cee276b4a66a6e25471","modified":1553524704124},{"_id":"public/tags/android/index.html","hash":"8018e0c4c398fd49587c08460b785a392e407aee","modified":1553524704124},{"_id":"public/tags/adb/index.html","hash":"456a9976edf7decd46787e86249d17a11c5563eb","modified":1553524704125},{"_id":"public/tags/mysql/index.html","hash":"9382af318c6d73652f17f25c029f00eed05bc0af","modified":1553524704125},{"_id":"public/tags/angular/index.html","hash":"d31f992ef32cb3d4cf8f04ad7617cae4073e9a39","modified":1553524704125},{"_id":"public/tags/windows/index.html","hash":"7f5ae7dad3d58d591891ca61b786857c47fb918c","modified":1553524704125},{"_id":"public/tags/项目/index.html","hash":"31b1b5fedb9b0e75d6766b34012a91d4fa3b7687","modified":1553524704125},{"_id":"public/tags/idea/index.html","hash":"817a9a119f0c485c529b39e261e5a5ad0649f444","modified":1553524704125},{"_id":"public/tags/apache/index.html","hash":"02ef2462edd590a4e530effbc63fef51bb11f160","modified":1553524704125},{"_id":"public/tags/httpd/index.html","hash":"36f3bbf5c2e8e015723b59423a9c208ccc6ce6b1","modified":1553524704125},{"_id":"public/tags/linux/index.html","hash":"50ee4d7d05799b69ad603a4662d9a38d1018cd1d","modified":1553524704125},{"_id":"public/tags/算法/index.html","hash":"21e98a7b9edc292687114450a39583b39a87f6d6","modified":1553524704125},{"_id":"public/tags/wordpress/index.html","hash":"f8b08c7785acaabd87cb45771c5673e92998b78e","modified":1553524704125},{"_id":"public/tags/nginx/index.html","hash":"75c32d840838e41a26a43d367ab1cb125e653439","modified":1553524704125},{"_id":"public/tags/eclipse/index.html","hash":"826c0c11a81c8ab6dcfa8c36f01b58edc841ed32","modified":1553524704125},{"_id":"public/tags/filebeat/index.html","hash":"e33ea2cf7e40683c01f5a1247d8e522f3252a80d","modified":1553524704125},{"_id":"public/tags/git/index.html","hash":"52542f4e0c4d0a5eb1f6e03ce999fa32c237410e","modified":1553524704125},{"_id":"public/tags/xss/index.html","hash":"ac33457ff38291e796881b149689a3d8348b3c1f","modified":1553524704125},{"_id":"public/tags/js/index.html","hash":"c97929ab554d9536a7440747e0b4c98496c12168","modified":1553524704125},{"_id":"public/tags/ndk/index.html","hash":"ee4ac3f7fb2a56fabb50df9bb593a0cd596ad8f9","modified":1553524704125},{"_id":"public/tags/jstorm/index.html","hash":"cf7c74c33c3d8793b827d049da9154b5d4782f50","modified":1553524704125},{"_id":"public/tags/物联网/index.html","hash":"dc4c725d7213e0591fb5f61b168df13992d7156e","modified":1553524704125},{"_id":"public/tags/logstash/index.html","hash":"70b7d9f54a7692f853db7e01a8438d004f1da0b2","modified":1553524704125},{"_id":"public/tags/syslog/index.html","hash":"0ff9a4026eba7b9351f7bf8b1fc667a2fe41aebf","modified":1553524704125},{"_id":"public/tags/lua/index.html","hash":"d7c8220f943a674a4c24cd35cd7326db362a9b53","modified":1553524704126},{"_id":"public/tags/tomcat/index.html","hash":"f938ace8a35b1c11b3ae26def4b2b508ac320e9b","modified":1553524704126},{"_id":"public/tags/resin/index.html","hash":"80e2406eedccd2a40882f4ed231bd4e5557bc2c5","modified":1553524704126},{"_id":"public/tags/IIS/index.html","hash":"abac451ba4bfd018b3856e56f22e2c05e5edc9c6","modified":1553524704126},{"_id":"public/tags/jboss/index.html","hash":"36b40ad4b5f1522de7ab25db01474af9eb10d59c","modified":1553524704126},{"_id":"public/tags/wildfly/index.html","hash":"c592bab981fed085dab038745bb471351d5aa12d","modified":1553524704126},{"_id":"public/tags/weblogic/index.html","hash":"0cad7b576a56b93248fe70c4cc7a19d684b9e412","modified":1553524704126},{"_id":"public/tags/maven/index.html","hash":"b34851cfe54e1245846727231eeba26edcf6c8b4","modified":1553524704126},{"_id":"public/tags/mybaits/index.html","hash":"0bf9f4f1d81df81b0c89ee2b4cff18a50dedfd5f","modified":1553524704126},{"_id":"public/tags/php/index.html","hash":"e27c9167a7d0a07c355132ac16ddc58c5c9d0707","modified":1553524704126},{"_id":"public/tags/node/index.html","hash":"b20e8042cc7c0ff114fceb086d66a711d2dd3d8a","modified":1553524704126},{"_id":"public/tags/openresty/index.html","hash":"6fafc201eefdb2f2493feab3ac146e8cbb9da5ca","modified":1553524704126},{"_id":"public/tags/vue/index.html","hash":"dce9c4d380cb9689e4e197bb4c17eb407b0a67bd","modified":1553524704126},{"_id":"public/tags/tensorflow/index.html","hash":"3e1c18091dc43885113f0b60930fbe42e0edbeba","modified":1553524704126},{"_id":"public/tags/redis/index.html","hash":"d625e5203e1b953124acefa8e8a0978203795dfc","modified":1553524704126},{"_id":"public/tags/spark/index.html","hash":"75c670ecb9fd46dd6614e4d3be8c06402bf9ea2b","modified":1553524704126},{"_id":"public/tags/spring/index.html","hash":"0546ec3b07435e06445a2e9740f89d70e224b54d","modified":1553524704126},{"_id":"public/tags/seo/index.html","hash":"a65723aaac83eada74b4cfe5f15b8d84d54534c4","modified":1553524704126},{"_id":"public/tags/storm/index.html","hash":"c196d66f02195b088e17c4c24d3ca197be1b1af9","modified":1553524704126},{"_id":"public/tags/zookeeper/index.html","hash":"afc06858d4e8a948c3f6f194a46a6fcc4ae53d98","modified":1553524704126},{"_id":"public/tags/dll/index.html","hash":"9c9e2f0e7fdf932d47ec4571ebe449d7e0e25109","modified":1553524704126},{"_id":"public/tags/xpack/index.html","hash":"4220288f4e0b030fbaa8272de43225860bbe7fd4","modified":1553524704126},{"_id":"public/tags/kibana/index.html","hash":"4591f6a30045bc0664b62a3af0ee778fe45e7764","modified":1553524704126},{"_id":"public/tags/vmware/index.html","hash":"33c65fc0488dde17e318b8573e2b6ea8bb736d45","modified":1553524704127},{"_id":"public/tags/websocket/index.html","hash":"b8ce2a20ff09cc523e0fb562fe886809a5122182","modified":1553524704127},{"_id":"public/tags/proguard/index.html","hash":"4f8e8f8b809561d9a42bded9437f1b05a040705f","modified":1553524704127},{"_id":"public/CNAME","hash":"4d4e25365c772369b4572856ad652d36b2594e51","modified":1553524704135},{"_id":"public/images/20170607105750931.png","hash":"fba0ba637bdd2c91b560809f88a11a7b2b380f48","modified":1553524704135},{"_id":"public/images/20170607105812369.png","hash":"87533794345f272d5f283ee7913fc473d9364e99","modified":1553524704135},{"_id":"public/images/20160828144815858.png","hash":"66a8e0d99a514c1d2082512e861d0e080c1f5f1f","modified":1553524704135},{"_id":"public/images/20180120104449366.png","hash":"3a1b0f36e427dc9e24b27cd819510c13092f7ffe","modified":1553524704135},{"_id":"public/images/201808140930396.jpeg","hash":"b95646f0eca345483c03595f0c72559c8a3fd082","modified":1553524704135},{"_id":"public/images/20180120105116570.png","hash":"66d8006eedbfe2d6b247532f8a274b128184cd5b","modified":1553524704135},{"_id":"public/images/20180120104433898.png","hash":"f9e9d4d49d5219616227a9802f3772578467c844","modified":1553524704135},{"_id":"public/images/20180120104417488.png","hash":"73795931e2e8d9786720e90c7592755b0a76e5ba","modified":1553524704135},{"_id":"public/images/20180120104503821.png","hash":"f741c9f2ac9ae9b86e525a68e96802138a3024f7","modified":1553524704135},{"_id":"public/images/20180907162713361.png","hash":"1d6f667090c97527ee8a532f62e438d26819c1dd","modified":1553524704136},{"_id":"public/images/20180818224047613.png","hash":"d472b524654c77545a0fa4ed2cb6be266c9c6a78","modified":1553524704136},{"_id":"public/images/2018090716255676.png","hash":"9f936c5445c6cb53949b82a6c5238548b3311121","modified":1553524704136},{"_id":"public/images/20180814093241342.png","hash":"4558aa9fcfabdd760bbe1d654752e58a257b472b","modified":1553524704136},{"_id":"public/images/20181126084920478.jpg","hash":"1cde3c86997b8c4fdda9c278898f2be6f26c63d1","modified":1553524704136},{"_id":"public/images/20181130105842729.jpg","hash":"da61ec58330307d41decbc24a16aa2999856da2e","modified":1553524704136},{"_id":"public/images/2018120317301921.png","hash":"4c8659d4155b1fc2ddc6d0f2714a1ae620301bd0","modified":1553524704136},{"_id":"public/images/20190322173348403.png","hash":"904f2bf0a865f60a5687d3b11d75a83c4dac1674","modified":1553524704136},{"_id":"public/images/20190322171006565.png","hash":"a1ab2612f89127c857cb380af7b7807dbc146239","modified":1553524704136},{"_id":"public/images/20180928100047591.png","hash":"b1b9d520f93e40da7ce2ea18aef45fabd61beeb0","modified":1553524704136},{"_id":"public/images/pmgr_menu_item.png","hash":"2960c2a2647aa162a0a4aeb830d79bd15eb83839","modified":1553524704136},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1553524704136},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1553524704136},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1553524704136},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1553524704136},{"_id":"public/img/wechat.jpg","hash":"e39b04c4d997d7aea765385cd0f97736e597368b","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1553524704136},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1553524704137},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1553524704137},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1553524704137},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1553524704137},{"_id":"public/images/20180907162520781.png","hash":"111cfd3b4a206c25bd87299682dc8df3809d1407","modified":1553524704156},{"_id":"public/images/20180112173241641.png","hash":"9fa9c92c184eac650607074e423ca6d850a9437b","modified":1553524704156},{"_id":"public/images/20180619190149680.jpeg","hash":"f6c73ad9f4d7699c6c9f3d86f2406673ab61f6ea","modified":1553524704157},{"_id":"public/images/20180112173621526.png","hash":"2ec693e9ecf65eafe52e448289acf57f3ff13f21","modified":1553524704157},{"_id":"public/images/20180925140319547.png","hash":"28d0e0d203ea16158c88aaedaca2598a259381e5","modified":1553524704157},{"_id":"public/images/20181108144249774.jpg","hash":"1079ecc445b7c2afb90e508f413fcbc53c6946ad","modified":1553524704157},{"_id":"public/images/20181023113000234.png","hash":"60dce9d10bfed9da0457af262178599eab5f87da","modified":1553524704157},{"_id":"public/images/20181122191859785.png","hash":"f26e96a1d9eb02cf7b5e7f2338b5dfc9806997e7","modified":1553524704157},{"_id":"public/images/20181108143944390.jpg","hash":"95343438e39f6d4b57a97c3232f1904800e5f3ce","modified":1553524704157},{"_id":"public/images/20190112153020353.png","hash":"6ea66831413486aadba95127e1adcb23b189b219","modified":1553524704157},{"_id":"public/images/20190215170932231.png","hash":"b4a27e0901472bc1fea28409ac654957ee42a5e5","modified":1553524704157},{"_id":"public/images/20190215171432824.png","hash":"52bd38abae9bd9acc4b92519e906c702262998d7","modified":1553524704157},{"_id":"public/images/20190117141627122.png","hash":"6c92ff5d8d6de8a75d598040d1afc9c7f3052a25","modified":1553524704157},{"_id":"public/images/20190222155850774.png","hash":"0488bb68f4f5855e033caec89f4db64bcb9f390c","modified":1553524704157},{"_id":"public/images/20190322171454875.png","hash":"bbe7fa35c0fff17f519c8804bebc5d2816814b5b","modified":1553524704157},{"_id":"public/favicon.ico","hash":"77b96799b970db62c269a0b8f1223d223adfa134","modified":1553524704157},{"_id":"public/img/alipay.jpg","hash":"767e704f7a6d57b7a4d7a1d78b7656c6e57e8b70","modified":1553524704157},{"_id":"public/img/avatar.png","hash":"2659858d07227584e64ebd4b89c4f5612e4a09bb","modified":1553524704157},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1553524704157},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1553524704158},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553524704158},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1553524704158},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1553524704158},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1553524704165},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1553524704165},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1553524704165},{"_id":"public/images/20190322171428208.png","hash":"bbc0afd1d21cfb5ff6b8ee12ec8a84dc99e105c9","modified":1553524704165},{"_id":"public/images/20180927081010321.png","hash":"334e5679853fcab43749904e41b92bae2a26d9f3","modified":1553524704165},{"_id":"public/images/20190319101449412.png","hash":"782a6de53193246a76b91f970ff9403cf2358558","modified":1553524704169},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553524704169},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553524704170},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1553524704172},{"_id":"public/images/20181120222005471.png","hash":"11f3e08e0b093e96f8bcfdcf0f5cce178c600a2e","modified":1553524704172},{"_id":"public/images/20190319101437635.png","hash":"69eaf866d1b94c53d9c94723d9364fe089d15f47","modified":1553524704180},{"_id":"public/images/20181224205905268.png","hash":"1296f820c065add25f9f174077ce52d03ea3077c","modified":1553524704180},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553524704180},{"_id":"public/images/20181118141726250.png","hash":"d724d84751ade1220623a0aede7a2a77f4f5219d","modified":1553524704243},{"_id":"public/images/20180112173844671.png","hash":"648b00a2d30a1189b1f95cee60f94311a650a45d","modified":1553524704255},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553524704303},{"_id":"public/images/20181122144236560.jpg","hash":"91a2c4e41f4249605c65bebfe7dc373a2eb5e72a","modified":1553524704481},{"_id":"public/css/style.css","hash":"4f59712181405c963fe7e80740071022050bc096","modified":1553524704482},{"_id":"public/images/20151231172153087.png","hash":"fa8ea14f0a60dafa3e9b7a7d3b61eead166410c9","modified":1553524704482}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2019-03-23T13:24:27.000Z","reward":false,"comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2019-03-23 21:24:27\nreward: false\ncomments: false\n---\n","updated":"2019-03-24T04:17:11.612Z","path":"about/index.html","layout":"page","_id":"cjtoghto6000005abfpcxyyzf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","date":"2019-03-18T14:37:23.000Z","reward":false,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2019-03-18 22:37:23\nreward: false\ncomments: false\n---\n","updated":"2019-03-24T13:57:39.862Z","path":"tags/index.html","_id":"cjtoghtob000205abjfbywj4m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"post_url":"Elasticsearch-buckets","title":"通过 elasticsearch-sql 使用 SQL 语句聚合查询 Elasticsearch 获取各种 buckets 桶","date":"2017-12-28T10:08:58.000Z","_content":"Elasticsearch 的 buckets（桶）包含 Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等；\n\n1. Histogram：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (histogram('alias'='log_date.mthAggs', 'interval'='1', 'field'='log_date.mth'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"log_date.mthAggs\" : {\n      \"histogram\" : {\n        \"field\" : \"log_date.mth\",\n        \"interval\" : 1\n      }\n    }\n  }\n}\n```\n2. Date Histogram：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (date_histogram('format'='yyyy-MM', 'alias'='@timestampAggs', 'interval'='1M', 'field'='@timestamp'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"@timestampAggs\" : {\n      \"date_histogram\" : {\n        \"field\" : \"@timestamp\",\n        \"interval\" : \"1M\",\n        \"format\" : \"yyyy-MM\"\n      }\n    }\n  }\n}\n```\n3. Range：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (range(log_date.mth,1,6,7,12))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"range(log_date.mth,1,6,7,12)\" : {\n      \"range\" : {\n        \"field\" : \"log_date.mth\",\n        \"ranges\" : [ {\n          \"from\" : 1.0,\n          \"to\" : 6.0\n        }, {\n          \"from\" : 6.0,\n          \"to\" : 7.0\n        }, {\n          \"from\" : 7.0,\n          \"to\" : 12.0\n        } ]\n      }\n    }\n  }\n}\n```\n4. Date Range：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (date_range('format'='yyyy-MM-dd', 'alias'='dateRangeAggs', 'field'='@timestamp','2017-01-01','2017-06-01','now-1M','now-1w','now-2d','now'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"dateRangeAggs\" : {\n      \"date_range\" : {\n        \"field\" : \"@timestamp\",\n        \"ranges\" : [ {\n          \"from\" : \"2017-01-01\",\n          \"to\" : \"2017-06-01\"\n        }, {\n          \"from\" : \"2017-06-01\",\n          \"to\" : \"now-1M\"\n        }, {\n          \"from\" : \"now-1M\",\n          \"to\" : \"now-1w\"\n        }, {\n          \"from\" : \"now-1w\",\n          \"to\" : \"now-2d\"\n        }, {\n          \"from\" : \"now-2d\",\n          \"to\" : \"now\"\n        } ],\n        \"format\" : \"yyyy-MM-dd\"\n      }\n    }\n  }\n}\n```\n5. Terms：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (terms('alias'='methodAggs', 'field'='method', 'size'=6))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"methodAggs\" : {\n      \"terms\" : {\n        \"field\" : \"method\",\n        \"size\" : 6\n      }\n    }\n  }\n}\n```\n6. IPv4 Range：\n```\n稍后补充...\n```\n7. Significant Terms：\n暂时没找到求 Significant Terms 的 SQL 语句，只能用原生 ES 查询语句获取了；\nES 原生查询语句如下：\n```\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"query_string\": {\n            \"query\": \"*\",\n            \"analyze_wildcard\": true\n          }\n        },\n        {\n          \"range\": {\n            \"@timestamp\": {\n              \"gte\": 1451297220869,\n              \"lte\": 1514455620869,\n              \"format\": \"epoch_millis\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"aggs\": {\n    \"2\": {\n      \"significant_terms\": {\n        \"field\": \"log.client.system\",\n        \"size\": 4\n      }\n    }\n  }\n}\n```\ncount、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）等各种 metrics 度量值查询：https://blog.iaiot.com/20171227/Elasticsearch-metrics.html\n\n\n附 elasticsearch-sql 的 GitHub 地址：https://github.com/NLPchina/elasticsearch-sql\nElasticsearch 官方文档（中文版）地址：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\n","source":"_posts/Elasticsearch-buckets.md","raw":"---\npost_url: Elasticsearch-buckets\ntitle: 通过 elasticsearch-sql 使用 SQL 语句聚合查询 Elasticsearch 获取各种 buckets 桶\ndate: 2017-12-28 18:08:58\ntags: elasticsearch\n---\nElasticsearch 的 buckets（桶）包含 Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等；\n\n1. Histogram：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (histogram('alias'='log_date.mthAggs', 'interval'='1', 'field'='log_date.mth'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"log_date.mthAggs\" : {\n      \"histogram\" : {\n        \"field\" : \"log_date.mth\",\n        \"interval\" : 1\n      }\n    }\n  }\n}\n```\n2. Date Histogram：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (date_histogram('format'='yyyy-MM', 'alias'='@timestampAggs', 'interval'='1M', 'field'='@timestamp'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"@timestampAggs\" : {\n      \"date_histogram\" : {\n        \"field\" : \"@timestamp\",\n        \"interval\" : \"1M\",\n        \"format\" : \"yyyy-MM\"\n      }\n    }\n  }\n}\n```\n3. Range：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (range(log_date.mth,1,6,7,12))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"range(log_date.mth,1,6,7,12)\" : {\n      \"range\" : {\n        \"field\" : \"log_date.mth\",\n        \"ranges\" : [ {\n          \"from\" : 1.0,\n          \"to\" : 6.0\n        }, {\n          \"from\" : 6.0,\n          \"to\" : 7.0\n        }, {\n          \"from\" : 7.0,\n          \"to\" : 12.0\n        } ]\n      }\n    }\n  }\n}\n```\n4. Date Range：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (date_range('format'='yyyy-MM-dd', 'alias'='dateRangeAggs', 'field'='@timestamp','2017-01-01','2017-06-01','now-1M','now-1w','now-2d','now'))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"dateRangeAggs\" : {\n      \"date_range\" : {\n        \"field\" : \"@timestamp\",\n        \"ranges\" : [ {\n          \"from\" : \"2017-01-01\",\n          \"to\" : \"2017-06-01\"\n        }, {\n          \"from\" : \"2017-06-01\",\n          \"to\" : \"now-1M\"\n        }, {\n          \"from\" : \"now-1M\",\n          \"to\" : \"now-1w\"\n        }, {\n          \"from\" : \"now-1w\",\n          \"to\" : \"now-2d\"\n        }, {\n          \"from\" : \"now-2d\",\n          \"to\" : \"now\"\n        } ],\n        \"format\" : \"yyyy-MM-dd\"\n      }\n    }\n  }\n}\n```\n5. Terms：\n```sql\nSELECT * FROM INDEX-2017-12 GROUP BY (terms('alias'='methodAggs', 'field'='method', 'size'=6))\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"aggregations\" : {\n    \"methodAggs\" : {\n      \"terms\" : {\n        \"field\" : \"method\",\n        \"size\" : 6\n      }\n    }\n  }\n}\n```\n6. IPv4 Range：\n```\n稍后补充...\n```\n7. Significant Terms：\n暂时没找到求 Significant Terms 的 SQL 语句，只能用原生 ES 查询语句获取了；\nES 原生查询语句如下：\n```\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"query_string\": {\n            \"query\": \"*\",\n            \"analyze_wildcard\": true\n          }\n        },\n        {\n          \"range\": {\n            \"@timestamp\": {\n              \"gte\": 1451297220869,\n              \"lte\": 1514455620869,\n              \"format\": \"epoch_millis\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"aggs\": {\n    \"2\": {\n      \"significant_terms\": {\n        \"field\": \"log.client.system\",\n        \"size\": 4\n      }\n    }\n  }\n}\n```\ncount、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）等各种 metrics 度量值查询：https://blog.iaiot.com/20171227/Elasticsearch-metrics.html\n\n\n附 elasticsearch-sql 的 GitHub 地址：https://github.com/NLPchina/elasticsearch-sql\nElasticsearch 官方文档（中文版）地址：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\n","slug":"Elasticsearch-buckets","published":1,"updated":"2019-03-25T13:50:06.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghto7000105ab9pdnt0f8","content":"<p>Elasticsearch 的 buckets（桶）包含 Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等；</p>\n<ol>\n<li>Histogram：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (histogram(<span class=\"string\">'alias'</span>=<span class=\"string\">'log_date.mthAggs'</span>, <span class=\"string\">'interval'</span>=<span class=\"string\">'1'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'log_date.mth'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;log_date.mthAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;histogram&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.mth&quot;,</span><br><span class=\"line\">        &quot;interval&quot; : 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Date Histogram：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (date_histogram(<span class=\"string\">'format'</span>=<span class=\"string\">'yyyy-MM'</span>, <span class=\"string\">'alias'</span>=<span class=\"string\">'@timestampAggs'</span>, <span class=\"string\">'interval'</span>=<span class=\"string\">'1M'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'@timestamp'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;@timestampAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;date_histogram&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;@timestamp&quot;,</span><br><span class=\"line\">        &quot;interval&quot; : &quot;1M&quot;,</span><br><span class=\"line\">        &quot;format&quot; : &quot;yyyy-MM&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Range：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (<span class=\"keyword\">range</span>(log_date.mth,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;range(log_date.mth,1,6,7,12)&quot; : &#123;</span><br><span class=\"line\">      &quot;range&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.mth&quot;,</span><br><span class=\"line\">        &quot;ranges&quot; : [ &#123;</span><br><span class=\"line\">          &quot;from&quot; : 1.0,</span><br><span class=\"line\">          &quot;to&quot; : 6.0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : 6.0,</span><br><span class=\"line\">          &quot;to&quot; : 7.0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : 7.0,</span><br><span class=\"line\">          &quot;to&quot; : 12.0</span><br><span class=\"line\">        &#125; ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Date Range：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (date_range(<span class=\"string\">'format'</span>=<span class=\"string\">'yyyy-MM-dd'</span>, <span class=\"string\">'alias'</span>=<span class=\"string\">'dateRangeAggs'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'@timestamp'</span>,<span class=\"string\">'2017-01-01'</span>,<span class=\"string\">'2017-06-01'</span>,<span class=\"string\">'now-1M'</span>,<span class=\"string\">'now-1w'</span>,<span class=\"string\">'now-2d'</span>,<span class=\"string\">'now'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;dateRangeAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;date_range&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;@timestamp&quot;,</span><br><span class=\"line\">        &quot;ranges&quot; : [ &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;2017-01-01&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;2017-06-01&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;2017-06-01&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-1M&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-1M&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-1w&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-1w&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-2d&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-2d&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now&quot;</span><br><span class=\"line\">        &#125; ],</span><br><span class=\"line\">        &quot;format&quot; : &quot;yyyy-MM-dd&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Terms：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (terms(<span class=\"string\">'alias'</span>=<span class=\"string\">'methodAggs'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'method'</span>, <span class=\"string\">'size'</span>=<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;methodAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;terms&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;method&quot;,</span><br><span class=\"line\">        &quot;size&quot; : 6</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>IPv4 Range：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">稍后补充...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Significant Terms：<br>暂时没找到求 Significant Terms 的 SQL 语句，只能用原生 ES 查询语句获取了；<br>ES 原生查询语句如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 0,</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;query_string&quot;: &#123;</span><br><span class=\"line\">            &quot;query&quot;: &quot;*&quot;,</span><br><span class=\"line\">            &quot;analyze_wildcard&quot;: true</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;range&quot;: &#123;</span><br><span class=\"line\">            &quot;@timestamp&quot;: &#123;</span><br><span class=\"line\">              &quot;gte&quot;: 1451297220869,</span><br><span class=\"line\">              &quot;lte&quot;: 1514455620869,</span><br><span class=\"line\">              &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;must_not&quot;: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;_source&quot;: &#123;</span><br><span class=\"line\">    &quot;excludes&quot;: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;2&quot;: &#123;</span><br><span class=\"line\">      &quot;significant_terms&quot;: &#123;</span><br><span class=\"line\">        &quot;field&quot;: &quot;log.client.system&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 4</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）等各种 metrics 度量值查询：<a href=\"https://blog.iaiot.com/20171227/Elasticsearch-metrics.html\">https://blog.iaiot.com/20171227/Elasticsearch-metrics.html</a></p>\n<p>附 elasticsearch-sql 的 GitHub 地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a><br>Elasticsearch 官方文档（中文版）地址：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Elasticsearch 的 buckets（桶）包含 Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等；</p>\n<ol>\n<li>Histogram：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (histogram(<span class=\"string\">'alias'</span>=<span class=\"string\">'log_date.mthAggs'</span>, <span class=\"string\">'interval'</span>=<span class=\"string\">'1'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'log_date.mth'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;log_date.mthAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;histogram&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.mth&quot;,</span><br><span class=\"line\">        &quot;interval&quot; : 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Date Histogram：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (date_histogram(<span class=\"string\">'format'</span>=<span class=\"string\">'yyyy-MM'</span>, <span class=\"string\">'alias'</span>=<span class=\"string\">'@timestampAggs'</span>, <span class=\"string\">'interval'</span>=<span class=\"string\">'1M'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'@timestamp'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;@timestampAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;date_histogram&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;@timestamp&quot;,</span><br><span class=\"line\">        &quot;interval&quot; : &quot;1M&quot;,</span><br><span class=\"line\">        &quot;format&quot; : &quot;yyyy-MM&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Range：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (<span class=\"keyword\">range</span>(log_date.mth,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;range(log_date.mth,1,6,7,12)&quot; : &#123;</span><br><span class=\"line\">      &quot;range&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.mth&quot;,</span><br><span class=\"line\">        &quot;ranges&quot; : [ &#123;</span><br><span class=\"line\">          &quot;from&quot; : 1.0,</span><br><span class=\"line\">          &quot;to&quot; : 6.0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : 6.0,</span><br><span class=\"line\">          &quot;to&quot; : 7.0</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : 7.0,</span><br><span class=\"line\">          &quot;to&quot; : 12.0</span><br><span class=\"line\">        &#125; ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Date Range：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (date_range(<span class=\"string\">'format'</span>=<span class=\"string\">'yyyy-MM-dd'</span>, <span class=\"string\">'alias'</span>=<span class=\"string\">'dateRangeAggs'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'@timestamp'</span>,<span class=\"string\">'2017-01-01'</span>,<span class=\"string\">'2017-06-01'</span>,<span class=\"string\">'now-1M'</span>,<span class=\"string\">'now-1w'</span>,<span class=\"string\">'now-2d'</span>,<span class=\"string\">'now'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;dateRangeAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;date_range&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;@timestamp&quot;,</span><br><span class=\"line\">        &quot;ranges&quot; : [ &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;2017-01-01&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;2017-06-01&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;2017-06-01&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-1M&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-1M&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-1w&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-1w&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now-2d&quot;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          &quot;from&quot; : &quot;now-2d&quot;,</span><br><span class=\"line\">          &quot;to&quot; : &quot;now&quot;</span><br><span class=\"line\">        &#125; ],</span><br><span class=\"line\">        &quot;format&quot; : &quot;yyyy-MM-dd&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Terms：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> (terms(<span class=\"string\">'alias'</span>=<span class=\"string\">'methodAggs'</span>, <span class=\"string\">'field'</span>=<span class=\"string\">'method'</span>, <span class=\"string\">'size'</span>=<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;methodAggs&quot; : &#123;</span><br><span class=\"line\">      &quot;terms&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;method&quot;,</span><br><span class=\"line\">        &quot;size&quot; : 6</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>IPv4 Range：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">稍后补充...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Significant Terms：<br>暂时没找到求 Significant Terms 的 SQL 语句，只能用原生 ES 查询语句获取了；<br>ES 原生查询语句如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 0,</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;query_string&quot;: &#123;</span><br><span class=\"line\">            &quot;query&quot;: &quot;*&quot;,</span><br><span class=\"line\">            &quot;analyze_wildcard&quot;: true</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;range&quot;: &#123;</span><br><span class=\"line\">            &quot;@timestamp&quot;: &#123;</span><br><span class=\"line\">              &quot;gte&quot;: 1451297220869,</span><br><span class=\"line\">              &quot;lte&quot;: 1514455620869,</span><br><span class=\"line\">              &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;must_not&quot;: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;_source&quot;: &#123;</span><br><span class=\"line\">    &quot;excludes&quot;: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;2&quot;: &#123;</span><br><span class=\"line\">      &quot;significant_terms&quot;: &#123;</span><br><span class=\"line\">        &quot;field&quot;: &quot;log.client.system&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 4</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）等各种 metrics 度量值查询：<a href=\"https://blog.iaiot.com/20171227/Elasticsearch-metrics.html\">https://blog.iaiot.com/20171227/Elasticsearch-metrics.html</a></p>\n<p>附 elasticsearch-sql 的 GitHub 地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a><br>Elasticsearch 官方文档（中文版）地址：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html</a></p>\n"},{"post_url":"Elasticsearch-cmd","title":"Elasticsearch常用命令整理","date":"2018-01-24T07:16:04.000Z","_content":"在命令行查看Elasticsearch信息及数据，另有es head插件（可以自己安装，另外在谷歌浏览器扩展程序里也有），可以直接在网页中可视化操作Elasticsearch\n![](/images/20180927081010321.png)\n\n1. 查看Elasticsearch集群状态\n```\ncurl http://10.1.1.113:9200/_cluster/health?pretty\n```\n2. 查看ES信息\n```\ncurl -XGET '10.1.1.113:9200'\n```\n3. 获取所有索引的信息\n```\ncurl -XGET '10.1.1.113:9200/_cat/indices?v&pretty'\n```\n4. 删除索引\n```\ncurl -XDELETE '10.1.1.113:9200/indexname?pretty'\n```\n5. 获取所有文档数量\n```\ncurl -XGET 'http://10.1.1.113:9200/_count?pretty' -d '\n{\n    \"query\": {\n        \"match_all\": {}\n    }\n}\n'\n```\n6. 索引一个文档并指定文档id为1\n```\ncurl -XPUT '10.1.1.113:9200/indexname/employee/1?pretty' -H 'Content-Type: application/json' -d'\n{\n    \"first_name\" : \"John\",\n    \"last_name\" :  \"Smith\",\n    \"age\" :        25,\n    \"about\" :      \"I love to go rock climbing\",\n    \"interests\": [ \"sports\", \"music\" ]\n}\n'\n```\n7. 删除一个文档\n```\ncurl -XDELETE '10.1.1.113:9200/indexname/employee/1/'\n```\n8. 创建一个索引\n```\ncurl -XPUT http://10.1.1.113:9200/indexname\n```\n9. 未完待续...\n附：Elasticsearch官方文档（中文）：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html\n","source":"_posts/Elasticsearch-cmd.md","raw":"---\npost_url: Elasticsearch-cmd\ntitle: Elasticsearch常用命令整理\ndate: 2018-01-24 15:16:04\ntags: elasticsearch\n---\n在命令行查看Elasticsearch信息及数据，另有es head插件（可以自己安装，另外在谷歌浏览器扩展程序里也有），可以直接在网页中可视化操作Elasticsearch\n![](/images/20180927081010321.png)\n\n1. 查看Elasticsearch集群状态\n```\ncurl http://10.1.1.113:9200/_cluster/health?pretty\n```\n2. 查看ES信息\n```\ncurl -XGET '10.1.1.113:9200'\n```\n3. 获取所有索引的信息\n```\ncurl -XGET '10.1.1.113:9200/_cat/indices?v&pretty'\n```\n4. 删除索引\n```\ncurl -XDELETE '10.1.1.113:9200/indexname?pretty'\n```\n5. 获取所有文档数量\n```\ncurl -XGET 'http://10.1.1.113:9200/_count?pretty' -d '\n{\n    \"query\": {\n        \"match_all\": {}\n    }\n}\n'\n```\n6. 索引一个文档并指定文档id为1\n```\ncurl -XPUT '10.1.1.113:9200/indexname/employee/1?pretty' -H 'Content-Type: application/json' -d'\n{\n    \"first_name\" : \"John\",\n    \"last_name\" :  \"Smith\",\n    \"age\" :        25,\n    \"about\" :      \"I love to go rock climbing\",\n    \"interests\": [ \"sports\", \"music\" ]\n}\n'\n```\n7. 删除一个文档\n```\ncurl -XDELETE '10.1.1.113:9200/indexname/employee/1/'\n```\n8. 创建一个索引\n```\ncurl -XPUT http://10.1.1.113:9200/indexname\n```\n9. 未完待续...\n附：Elasticsearch官方文档（中文）：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html\n","slug":"Elasticsearch-cmd","published":1,"updated":"2019-03-25T13:21:40.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoc000305ab83iu65q6","content":"<p>在命令行查看Elasticsearch信息及数据，另有es head插件（可以自己安装，另外在谷歌浏览器扩展程序里也有），可以直接在网页中可视化操作Elasticsearch<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180927081010321.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol>\n<li><p>查看Elasticsearch集群状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://10.1.1.113:9200/_cluster/health?pretty</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看ES信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;10.1.1.113:9200&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取所有索引的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;10.1.1.113:9200/_cat/indices?v&amp;pretty&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &apos;10.1.1.113:9200/indexname?pretty&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取所有文档数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;http://10.1.1.113:9200/_count?pretty&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;query&quot;: &#123;</span><br><span class=\"line\">        &quot;match_all&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>索引一个文档并指定文档id为1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT &apos;10.1.1.113:9200/indexname/employee/1?pretty&apos; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class=\"line\">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class=\"line\">    &quot;age&quot; :        25,</span><br><span class=\"line\">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class=\"line\">    &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除一个文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &apos;10.1.1.113:9200/indexname/employee/1/&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://10.1.1.113:9200/indexname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>未完待续…<br>附：Elasticsearch官方文档（中文）：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在命令行查看Elasticsearch信息及数据，另有es head插件（可以自己安装，另外在谷歌浏览器扩展程序里也有），可以直接在网页中可视化操作Elasticsearch<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180927081010321.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol>\n<li><p>查看Elasticsearch集群状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://10.1.1.113:9200/_cluster/health?pretty</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看ES信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;10.1.1.113:9200&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取所有索引的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;10.1.1.113:9200/_cat/indices?v&amp;pretty&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &apos;10.1.1.113:9200/indexname?pretty&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取所有文档数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET &apos;http://10.1.1.113:9200/_count?pretty&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;query&quot;: &#123;</span><br><span class=\"line\">        &quot;match_all&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>索引一个文档并指定文档id为1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT &apos;10.1.1.113:9200/indexname/employee/1?pretty&apos; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class=\"line\">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class=\"line\">    &quot;age&quot; :        25,</span><br><span class=\"line\">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class=\"line\">    &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除一个文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &apos;10.1.1.113:9200/indexname/employee/1/&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://10.1.1.113:9200/indexname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>未完待续…<br>附：Elasticsearch官方文档（中文）：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/index.html</a></p>\n</li>\n</ol>\n"},{"post_url":"Elasticsearch-metrics","title":"通过 elasticsearch-sql 使用 SQL 语句聚合查询 Elasticsearch 获取各种 metrics 度量值","date":"2017-12-27T02:43:07.000Z","_content":"Elasticsearch 的 metrics（度量）包含 count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）\n\n1. count（数量）：\n```sql\nSELECT count(log_date.d) AS Count FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"COUNT\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"Count\" : {\n      \"value_count\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n2. sum（和）：\n```sql\nSELECT sum(log_date.d) AS SUM FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"SUM\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"SUM\" : {\n      \"sum\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n3. avg（平均数）：\n```sql\nSELECT avg(log_date.d) AS AVG FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"AVG\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"AVG\" : {\n      \"avg\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n4. max（最大值）：\n```sql\nSELECT max(log_date.d) AS MAX FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"MAX\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"MAX\" : {\n      \"max\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n5. min（最小值）：\n```sql\nSELECT min(log_date.d) AS MIN FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"MIN\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"MIN\" : {\n      \"min\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n6. percentiles（百分位数）：\n```sql\nSELECT percentiles(log_date.d,1.0,15.0,31.0) AS Percentiles FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"percentiles\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"Percentiles\" : {\n      \"percentiles\" : {\n        \"field\" : \"log_date.d\",\n        \"percents\" : [ 1.0, 15.0, 31.0 ]\n      }\n    }\n  }\n}\n```\n7. Unique count（基数 || 去重计数，就是 SQL 中的 distinct ）：\n```sql\nSELECT count(distinct(log_date.d)) AS UniqueCount FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"COUNT\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"UniqueCount\" : {\n      \"cardinality\" : {\n        \"field\" : \"log_date.d\",\n        \"precision_threshold\" : 40000\n      }\n    }\n  }\n}\n```\n8. Median（中位数）：\n中位数没找到单独的获取方法，不过在 Kibana 中看到获取中位数时请求中的参数，其实就是获取的某个字段50的百分位数，所以可能有：中位数=50的百分位数\n```sql\nSELECT percentiles(log_date.d,50.0) AS percentiles FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"percentiles\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"percentiles\" : {\n      \"percentiles\" : {\n        \"field\" : \"log_date.d\",\n        \"percents\" : [ 50.0 ]\n      }\n    }\n  }\n}\n```\n9. 方差、平方和、标准差、标准差界限：\n这几个度量没有单独方法去获取，都是用 EXTENDED_STATS 一个请求全部获取下来，然后从中取自己需要的结果\n```sql\nSELECT EXTENDED_STATS(log_date.d) AS EXTENDED_STATS FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"EXTENDED_STATS\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"EXTENDED_STATS\" : {\n      \"extended_stats\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\nEXTENDED_STATS 查询结果包含：方差、平方和、标准差、标准差界限以及最大值、平均数等基础度量，具体如下：\n```\n\"aggregations\": {\n    \"1\": {\n      \"count\": 15304326,\n      \"min\": 1,\n      \"max\": 31,\n      \"avg\": 15.068216202399244,\n      \"sum\": 230608893,\n      \"sum_of_squares\": 4588588661,\n      \"variance\": 72.7718426201877,\n      \"std_deviation\": 8.530641395591992,\n      \"std_deviation_bounds\": {\n        \"upper\": 32.129498993583226,\n        \"lower\": -1.9930665887847407\n      }\n    }\n  }\n```\n10. Percentile ranks（百分位等级）\n暂时没找到求百分位等级的 SQL 语句，只能用原生 ES 查询语句获取了；\nES原生查询语句如下：\n```\n{\n  \"size\": 0,\n  ......\n  \"aggs\": {\n    \"1\": {\n      \"percentile_ranks\": {\n        \"field\": \"log_date.d\",\n        \"values\": [\n          6,\n          15,\n          31\n        ],\n        \"keyed\": false\n      }\n    }\n  }\n}\n```\nHistogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等各种 buckets 桶查询：https://blog.iaiot.com/20171228/Elasticsearch-buckets.html\n\n附 elasticsearch-sql 的 GitHub 地址：https://github.com/NLPchina/elasticsearch-sql\nElasticsearch 官方文档（中文版）地址：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\n","source":"_posts/Elasticsearch-metrics.md","raw":"---\npost_url: Elasticsearch-metrics\ntitle: 通过 elasticsearch-sql 使用 SQL 语句聚合查询 Elasticsearch 获取各种 metrics 度量值\ndate: 2017-12-27 10:43:07\ntags: elasticsearch\n---\nElasticsearch 的 metrics（度量）包含 count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）\n\n1. count（数量）：\n```sql\nSELECT count(log_date.d) AS Count FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"COUNT\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"Count\" : {\n      \"value_count\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n2. sum（和）：\n```sql\nSELECT sum(log_date.d) AS SUM FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"SUM\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"SUM\" : {\n      \"sum\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n3. avg（平均数）：\n```sql\nSELECT avg(log_date.d) AS AVG FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"AVG\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"AVG\" : {\n      \"avg\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n4. max（最大值）：\n```sql\nSELECT max(log_date.d) AS MAX FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"MAX\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"MAX\" : {\n      \"max\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n5. min（最小值）：\n```sql\nSELECT min(log_date.d) AS MIN FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"MIN\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"MIN\" : {\n      \"min\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\n6. percentiles（百分位数）：\n```sql\nSELECT percentiles(log_date.d,1.0,15.0,31.0) AS Percentiles FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"percentiles\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"Percentiles\" : {\n      \"percentiles\" : {\n        \"field\" : \"log_date.d\",\n        \"percents\" : [ 1.0, 15.0, 31.0 ]\n      }\n    }\n  }\n}\n```\n7. Unique count（基数 || 去重计数，就是 SQL 中的 distinct ）：\n```sql\nSELECT count(distinct(log_date.d)) AS UniqueCount FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"COUNT\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"UniqueCount\" : {\n      \"cardinality\" : {\n        \"field\" : \"log_date.d\",\n        \"precision_threshold\" : 40000\n      }\n    }\n  }\n}\n```\n8. Median（中位数）：\n中位数没找到单独的获取方法，不过在 Kibana 中看到获取中位数时请求中的参数，其实就是获取的某个字段50的百分位数，所以可能有：中位数=50的百分位数\n```sql\nSELECT percentiles(log_date.d,50.0) AS percentiles FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"percentiles\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"percentiles\" : {\n      \"percentiles\" : {\n        \"field\" : \"log_date.d\",\n        \"percents\" : [ 50.0 ]\n      }\n    }\n  }\n}\n```\n9. 方差、平方和、标准差、标准差界限：\n这几个度量没有单独方法去获取，都是用 EXTENDED_STATS 一个请求全部获取下来，然后从中取自己需要的结果\n```sql\nSELECT EXTENDED_STATS(log_date.d) AS EXTENDED_STATS FROM INDEX-2017-12\n```\n```\n{\n  \"from\" : 0,\n  \"size\" : 0,\n  \"_source\" : {\n    \"includes\" : [ \"EXTENDED_STATS\" ],\n    \"excludes\" : [ ]\n  },\n  \"aggregations\" : {\n    \"EXTENDED_STATS\" : {\n      \"extended_stats\" : {\n        \"field\" : \"log_date.d\"\n      }\n    }\n  }\n}\n```\nEXTENDED_STATS 查询结果包含：方差、平方和、标准差、标准差界限以及最大值、平均数等基础度量，具体如下：\n```\n\"aggregations\": {\n    \"1\": {\n      \"count\": 15304326,\n      \"min\": 1,\n      \"max\": 31,\n      \"avg\": 15.068216202399244,\n      \"sum\": 230608893,\n      \"sum_of_squares\": 4588588661,\n      \"variance\": 72.7718426201877,\n      \"std_deviation\": 8.530641395591992,\n      \"std_deviation_bounds\": {\n        \"upper\": 32.129498993583226,\n        \"lower\": -1.9930665887847407\n      }\n    }\n  }\n```\n10. Percentile ranks（百分位等级）\n暂时没找到求百分位等级的 SQL 语句，只能用原生 ES 查询语句获取了；\nES原生查询语句如下：\n```\n{\n  \"size\": 0,\n  ......\n  \"aggs\": {\n    \"1\": {\n      \"percentile_ranks\": {\n        \"field\": \"log_date.d\",\n        \"values\": [\n          6,\n          15,\n          31\n        ],\n        \"keyed\": false\n      }\n    }\n  }\n}\n```\nHistogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等各种 buckets 桶查询：https://blog.iaiot.com/20171228/Elasticsearch-buckets.html\n\n附 elasticsearch-sql 的 GitHub 地址：https://github.com/NLPchina/elasticsearch-sql\nElasticsearch 官方文档（中文版）地址：https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\n","slug":"Elasticsearch-metrics","published":1,"updated":"2019-03-25T13:50:29.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoe000505abm0myrmko","content":"<p>Elasticsearch 的 metrics（度量）包含 count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）</p>\n<ol>\n<li>count（数量）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">count</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">Count</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;COUNT&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;Count&quot; : &#123;</span><br><span class=\"line\">      &quot;value_count&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>sum（和）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">sum</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">SUM</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;SUM&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;SUM&quot; : &#123;</span><br><span class=\"line\">      &quot;sum&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>avg（平均数）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">avg</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">AVG</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;AVG&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;AVG&quot; : &#123;</span><br><span class=\"line\">      &quot;avg&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>max（最大值）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">max</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">MAX</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;MAX&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;MAX&quot; : &#123;</span><br><span class=\"line\">      &quot;max&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>min（最小值）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">min</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">MIN</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;MIN&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;MIN&quot; : &#123;</span><br><span class=\"line\">      &quot;min&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>percentiles（百分位数）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> percentiles(log_date.d,<span class=\"number\">1.0</span>,<span class=\"number\">15.0</span>,<span class=\"number\">31.0</span>) <span class=\"keyword\">AS</span> Percentiles <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;percentiles&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;Percentiles&quot; : &#123;</span><br><span class=\"line\">      &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;percents&quot; : [ 1.0, 15.0, 31.0 ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Unique count（基数 || 去重计数，就是 SQL 中的 distinct ）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span>(log_date.d)) <span class=\"keyword\">AS</span> UniqueCount <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;COUNT&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;UniqueCount&quot; : &#123;</span><br><span class=\"line\">      &quot;cardinality&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;precision_threshold&quot; : 40000</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Median（中位数）：<br>中位数没找到单独的获取方法，不过在 Kibana 中看到获取中位数时请求中的参数，其实就是获取的某个字段50的百分位数，所以可能有：中位数=50的百分位数<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> percentiles(log_date.d,<span class=\"number\">50.0</span>) <span class=\"keyword\">AS</span> percentiles <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;percentiles&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">      &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;percents&quot; : [ 50.0 ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>方差、平方和、标准差、标准差界限：<br>这几个度量没有单独方法去获取，都是用 EXTENDED_STATS 一个请求全部获取下来，然后从中取自己需要的结果<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> EXTENDED_STATS(log_date.d) <span class=\"keyword\">AS</span> EXTENDED_STATS <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;EXTENDED_STATS&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;EXTENDED_STATS&quot; : &#123;</span><br><span class=\"line\">      &quot;extended_stats&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EXTENDED_STATS 查询结果包含：方差、平方和、标准差、标准差界限以及最大值、平均数等基础度量，具体如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;1&quot;: &#123;</span><br><span class=\"line\">      &quot;count&quot;: 15304326,</span><br><span class=\"line\">      &quot;min&quot;: 1,</span><br><span class=\"line\">      &quot;max&quot;: 31,</span><br><span class=\"line\">      &quot;avg&quot;: 15.068216202399244,</span><br><span class=\"line\">      &quot;sum&quot;: 230608893,</span><br><span class=\"line\">      &quot;sum_of_squares&quot;: 4588588661,</span><br><span class=\"line\">      &quot;variance&quot;: 72.7718426201877,</span><br><span class=\"line\">      &quot;std_deviation&quot;: 8.530641395591992,</span><br><span class=\"line\">      &quot;std_deviation_bounds&quot;: &#123;</span><br><span class=\"line\">        &quot;upper&quot;: 32.129498993583226,</span><br><span class=\"line\">        &quot;lower&quot;: -1.9930665887847407</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"10\">\n<li>Percentile ranks（百分位等级）<br>暂时没找到求百分位等级的 SQL 语句，只能用原生 ES 查询语句获取了；<br>ES原生查询语句如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 0,</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;1&quot;: &#123;</span><br><span class=\"line\">      &quot;percentile_ranks&quot;: &#123;</span><br><span class=\"line\">        &quot;field&quot;: &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;values&quot;: [</span><br><span class=\"line\">          6,</span><br><span class=\"line\">          15,</span><br><span class=\"line\">          31</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;keyed&quot;: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等各种 buckets 桶查询：<a href=\"https://blog.iaiot.com/20171228/Elasticsearch-buckets.html\">https://blog.iaiot.com/20171228/Elasticsearch-buckets.html</a></p>\n<p>附 elasticsearch-sql 的 GitHub 地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a><br>Elasticsearch 官方文档（中文版）地址：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Elasticsearch 的 metrics（度量）包含 count、sum、avg、max、min、percentiles (百分位数)、Unique count（基数 || 去重计数）、Median（中位数）、扩展度量（含方差、平方和、标准差、标准差界限）、Percentile ranks（百分位等级）</p>\n<ol>\n<li>count（数量）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">count</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">Count</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;COUNT&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;Count&quot; : &#123;</span><br><span class=\"line\">      &quot;value_count&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>sum（和）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">sum</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">SUM</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;SUM&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;SUM&quot; : &#123;</span><br><span class=\"line\">      &quot;sum&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>avg（平均数）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">avg</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">AVG</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;AVG&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;AVG&quot; : &#123;</span><br><span class=\"line\">      &quot;avg&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>max（最大值）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">max</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">MAX</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;MAX&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;MAX&quot; : &#123;</span><br><span class=\"line\">      &quot;max&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>min（最小值）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">min</span>(log_date.d) <span class=\"keyword\">AS</span> <span class=\"keyword\">MIN</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;MIN&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;MIN&quot; : &#123;</span><br><span class=\"line\">      &quot;min&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>percentiles（百分位数）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> percentiles(log_date.d,<span class=\"number\">1.0</span>,<span class=\"number\">15.0</span>,<span class=\"number\">31.0</span>) <span class=\"keyword\">AS</span> Percentiles <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;percentiles&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;Percentiles&quot; : &#123;</span><br><span class=\"line\">      &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;percents&quot; : [ 1.0, 15.0, 31.0 ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Unique count（基数 || 去重计数，就是 SQL 中的 distinct ）：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span>(log_date.d)) <span class=\"keyword\">AS</span> UniqueCount <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;COUNT&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;UniqueCount&quot; : &#123;</span><br><span class=\"line\">      &quot;cardinality&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;precision_threshold&quot; : 40000</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Median（中位数）：<br>中位数没找到单独的获取方法，不过在 Kibana 中看到获取中位数时请求中的参数，其实就是获取的某个字段50的百分位数，所以可能有：中位数=50的百分位数<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> percentiles(log_date.d,<span class=\"number\">50.0</span>) <span class=\"keyword\">AS</span> percentiles <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;percentiles&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">      &quot;percentiles&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;percents&quot; : [ 50.0 ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>方差、平方和、标准差、标准差界限：<br>这几个度量没有单独方法去获取，都是用 EXTENDED_STATS 一个请求全部获取下来，然后从中取自己需要的结果<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> EXTENDED_STATS(log_date.d) <span class=\"keyword\">AS</span> EXTENDED_STATS <span class=\"keyword\">FROM</span> <span class=\"keyword\">INDEX</span><span class=\"number\">-2017</span><span class=\"number\">-12</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;from&quot; : 0,</span><br><span class=\"line\">  &quot;size&quot; : 0,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;includes&quot; : [ &quot;EXTENDED_STATS&quot; ],</span><br><span class=\"line\">    &quot;excludes&quot; : [ ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;EXTENDED_STATS&quot; : &#123;</span><br><span class=\"line\">      &quot;extended_stats&quot; : &#123;</span><br><span class=\"line\">        &quot;field&quot; : &quot;log_date.d&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>EXTENDED_STATS 查询结果包含：方差、平方和、标准差、标准差界限以及最大值、平均数等基础度量，具体如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;1&quot;: &#123;</span><br><span class=\"line\">      &quot;count&quot;: 15304326,</span><br><span class=\"line\">      &quot;min&quot;: 1,</span><br><span class=\"line\">      &quot;max&quot;: 31,</span><br><span class=\"line\">      &quot;avg&quot;: 15.068216202399244,</span><br><span class=\"line\">      &quot;sum&quot;: 230608893,</span><br><span class=\"line\">      &quot;sum_of_squares&quot;: 4588588661,</span><br><span class=\"line\">      &quot;variance&quot;: 72.7718426201877,</span><br><span class=\"line\">      &quot;std_deviation&quot;: 8.530641395591992,</span><br><span class=\"line\">      &quot;std_deviation_bounds&quot;: &#123;</span><br><span class=\"line\">        &quot;upper&quot;: 32.129498993583226,</span><br><span class=\"line\">        &quot;lower&quot;: -1.9930665887847407</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"10\">\n<li>Percentile ranks（百分位等级）<br>暂时没找到求百分位等级的 SQL 语句，只能用原生 ES 查询语句获取了；<br>ES原生查询语句如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 0,</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;1&quot;: &#123;</span><br><span class=\"line\">      &quot;percentile_ranks&quot;: &#123;</span><br><span class=\"line\">        &quot;field&quot;: &quot;log_date.d&quot;,</span><br><span class=\"line\">        &quot;values&quot;: [</span><br><span class=\"line\">          6,</span><br><span class=\"line\">          15,</span><br><span class=\"line\">          31</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;keyed&quot;: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Histogram、Date Histogram、Range、Date Range、Terms、IPv4 Range、Significant Terms 等各种 buckets 桶查询：<a href=\"https://blog.iaiot.com/20171228/Elasticsearch-buckets.html\">https://blog.iaiot.com/20171228/Elasticsearch-buckets.html</a></p>\n<p>附 elasticsearch-sql 的 GitHub 地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a><br>Elasticsearch 官方文档（中文版）地址：<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/aggregations.html</a></p>\n"},{"post_url":"FastDFS-cmd","title":"FastDFS 常用命令","date":"2018-11-20T14:27:17.000Z","_content":"启动 Tracker：service fdfs_trackerd start  或者 /etc/init.d/fdfs_trackerd start\n\n停止 Tracker：service fdfs_trackerd stop\n\n启动 Storage：service fdfs_storaged start 或者 /etc/init.d/fdfs_storaged start\n\n停止 Storage：service fdfs_storaged stop\n\n查看运行状态：netstat -unltp | grep fdfs\n\n参考地址：https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4\n","source":"_posts/FastDFS-cmd.md","raw":"---\npost_url: FastDFS-cmd\ntitle: FastDFS 常用命令\ndate: 2018-11-20 22:27:17\ntags: fastDFS\n---\n启动 Tracker：service fdfs_trackerd start  或者 /etc/init.d/fdfs_trackerd start\n\n停止 Tracker：service fdfs_trackerd stop\n\n启动 Storage：service fdfs_storaged start 或者 /etc/init.d/fdfs_storaged start\n\n停止 Storage：service fdfs_storaged stop\n\n查看运行状态：netstat -unltp | grep fdfs\n\n参考地址：https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4\n","slug":"FastDFS-cmd","published":1,"updated":"2019-03-25T13:55:24.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtof000605abxviksela","content":"<p>启动 Tracker：service fdfs_trackerd start  或者 /etc/init.d/fdfs_trackerd start</p>\n<p>停止 Tracker：service fdfs_trackerd stop</p>\n<p>启动 Storage：service fdfs_storaged start 或者 /etc/init.d/fdfs_storaged start</p>\n<p>停止 Storage：service fdfs_storaged stop</p>\n<p>查看运行状态：netstat -unltp | grep fdfs</p>\n<p>参考地址：<a href=\"https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>启动 Tracker：service fdfs_trackerd start  或者 /etc/init.d/fdfs_trackerd start</p>\n<p>停止 Tracker：service fdfs_trackerd stop</p>\n<p>启动 Storage：service fdfs_storaged start 或者 /etc/init.d/fdfs_storaged start</p>\n<p>停止 Storage：service fdfs_storaged stop</p>\n<p>查看运行状态：netstat -unltp | grep fdfs</p>\n<p>参考地址：<a href=\"https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chiangchou/p/fastdfs.html#_label0_4</a></p>\n"},{"post_url":"Elasticsearch-python","title":"通过python使用游标查询Elasticsearch数据并写入文件","date":"2018-02-06T02:36:35.000Z","_content":"```python\nimport json\nimport os\nimport sys\nimport urllib2\n \nreload(sys)\nsys.setdefaultencoding('utf-8')\n \nclass exportEsData():\n\tdef __init__(self, url, siteid, startdate, enddate, scroll):\n\t\tself.url = '%s/_search' % (url)\n\t\tself.siteid = siteid\n\t\tself.startdate = startdate\n\t\tself.enddate = enddate\n\t\tself.scroll = scroll\n\t\tself.result = \"\"\n \n\tdef exportData(self, scrollID):\n\t\t#esdata = urllib2.urlopen(\"http://www.baidu.com/\").read()\n\t\topener = urllib2.build_opener()\n\t\theaders = {'User-Agent':'Mozilla /5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6' }\n\t\tif scrollID == \"\":\n\t\t\tprint(\"Exporting site%s...\" % self.siteid)\n\t\t\tqueryJson = { \\\n                    \"size\": 1000, \\\n                    \"query\": { \"filtered\": {\"filter\": {\"bool\": {\"must\": {\"bool\": {\"must\": [ \\\n                                {\"query\": {\"match\": {\"b\": {\"query\": self.siteid,\"type\": \"phrase\"}}}}, \\\n                                {\"range\":{\"c\":{\"gte\": self.startdate + \" 00:00:00\",\"lte\":self.enddate + \" 23:59:59\"}}} \\\n                            ]}}}}} \\\n                        } \\\n                    }\n\t\t\turl2 = '%s?scroll=%s' % (self.url, self.scroll)\n\t\telse:\n\t\t\tqueryJson = { \"scroll\" : self.scroll, \"scroll_id\" : scrollID }\n\t\t\turl2 = self.url + \"/scroll\"\n\t\treq = urllib2.Request(url2, data=json.dumps(queryJson), headers=headers)\n\t\tresponse = opener.open(req)\n\t\tesdata = response.read()\n\t\tself.processData(esdata)\n \n\tdef processData(self, data):\n\t\t#msg = json.dumps(data, ensure_ascii=False)\n\t\tmsg = json.loads(data)\n\t\t#print(type(data))\n\t\t#print(msg['hits']['hits'][2]['_source']['f8'])\n\t\tscrollID = msg[\"_scroll_id\"]\n\t\tattacks = msg['hits']['hits']\n\t\tfor attack in attacks:\n\t\t\tself.result = '%s%s\\n' % (self.result, attack['_source'])\n\t\tif len(attacks) > 0:\n\t\t\tself.exportData(scrollID)\n\t\telse:\n\t\t\tself.writeFile(self.result)\n \n\tdef writeFile(self, data):\n\t\ttry:\n\t\t\tfilename = 'AttackData_%s.txt' % (self.siteid)\n\t\t\tf = open(filename, \"w+\")\n\t\t\tf.write(data)\n\t\t\tprint(\"site%s successfully exported\" % self.siteid)\n\t\tfinally:\n\t\t\tf.flush()\n\t\t\tf.close()\n \nif __name__ == '__main__':\n\tsiteids = [1912, 1918]\n\tfor siteid in siteids:\n\t\texportEsData(\"http://127.0.0.1:9201\", siteid, \"2017-07-03\", \"2017-12-01\", \"5m\").exportData(\"\")\n \nos.system(\"pause\")\n```","source":"_posts/Elasticsearch-python.md","raw":"---\npost_url: Elasticsearch-python\ntitle: 通过python使用游标查询Elasticsearch数据并写入文件\ndate: 2018-02-06 10:36:35\ntags: [elasticsearch, python]\n---\n```python\nimport json\nimport os\nimport sys\nimport urllib2\n \nreload(sys)\nsys.setdefaultencoding('utf-8')\n \nclass exportEsData():\n\tdef __init__(self, url, siteid, startdate, enddate, scroll):\n\t\tself.url = '%s/_search' % (url)\n\t\tself.siteid = siteid\n\t\tself.startdate = startdate\n\t\tself.enddate = enddate\n\t\tself.scroll = scroll\n\t\tself.result = \"\"\n \n\tdef exportData(self, scrollID):\n\t\t#esdata = urllib2.urlopen(\"http://www.baidu.com/\").read()\n\t\topener = urllib2.build_opener()\n\t\theaders = {'User-Agent':'Mozilla /5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6' }\n\t\tif scrollID == \"\":\n\t\t\tprint(\"Exporting site%s...\" % self.siteid)\n\t\t\tqueryJson = { \\\n                    \"size\": 1000, \\\n                    \"query\": { \"filtered\": {\"filter\": {\"bool\": {\"must\": {\"bool\": {\"must\": [ \\\n                                {\"query\": {\"match\": {\"b\": {\"query\": self.siteid,\"type\": \"phrase\"}}}}, \\\n                                {\"range\":{\"c\":{\"gte\": self.startdate + \" 00:00:00\",\"lte\":self.enddate + \" 23:59:59\"}}} \\\n                            ]}}}}} \\\n                        } \\\n                    }\n\t\t\turl2 = '%s?scroll=%s' % (self.url, self.scroll)\n\t\telse:\n\t\t\tqueryJson = { \"scroll\" : self.scroll, \"scroll_id\" : scrollID }\n\t\t\turl2 = self.url + \"/scroll\"\n\t\treq = urllib2.Request(url2, data=json.dumps(queryJson), headers=headers)\n\t\tresponse = opener.open(req)\n\t\tesdata = response.read()\n\t\tself.processData(esdata)\n \n\tdef processData(self, data):\n\t\t#msg = json.dumps(data, ensure_ascii=False)\n\t\tmsg = json.loads(data)\n\t\t#print(type(data))\n\t\t#print(msg['hits']['hits'][2]['_source']['f8'])\n\t\tscrollID = msg[\"_scroll_id\"]\n\t\tattacks = msg['hits']['hits']\n\t\tfor attack in attacks:\n\t\t\tself.result = '%s%s\\n' % (self.result, attack['_source'])\n\t\tif len(attacks) > 0:\n\t\t\tself.exportData(scrollID)\n\t\telse:\n\t\t\tself.writeFile(self.result)\n \n\tdef writeFile(self, data):\n\t\ttry:\n\t\t\tfilename = 'AttackData_%s.txt' % (self.siteid)\n\t\t\tf = open(filename, \"w+\")\n\t\t\tf.write(data)\n\t\t\tprint(\"site%s successfully exported\" % self.siteid)\n\t\tfinally:\n\t\t\tf.flush()\n\t\t\tf.close()\n \nif __name__ == '__main__':\n\tsiteids = [1912, 1918]\n\tfor siteid in siteids:\n\t\texportEsData(\"http://127.0.0.1:9201\", siteid, \"2017-07-03\", \"2017-12-01\", \"5m\").exportData(\"\")\n \nos.system(\"pause\")\n```","slug":"Elasticsearch-python","published":1,"updated":"2019-03-25T13:21:52.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtog000705abh90x88yo","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"> </span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exportEsData</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url, siteid, startdate, enddate, scroll)</span>:</span></span><br><span class=\"line\">\t\tself.url = <span class=\"string\">'%s/_search'</span> % (url)</span><br><span class=\"line\">\t\tself.siteid = siteid</span><br><span class=\"line\">\t\tself.startdate = startdate</span><br><span class=\"line\">\t\tself.enddate = enddate</span><br><span class=\"line\">\t\tself.scroll = scroll</span><br><span class=\"line\">\t\tself.result = <span class=\"string\">\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exportData</span><span class=\"params\">(self, scrollID)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#esdata = urllib2.urlopen(\"http://www.baidu.com/\").read()</span></span><br><span class=\"line\">\t\topener = urllib2.build_opener()</span><br><span class=\"line\">\t\theaders = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla /5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span> &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> scrollID == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"Exporting site%s...\"</span> % self.siteid)</span><br><span class=\"line\">\t\t\tqueryJson = &#123; \\</span><br><span class=\"line\">                    <span class=\"string\">\"size\"</span>: <span class=\"number\">1000</span>, \\</span><br><span class=\"line\">                    <span class=\"string\">\"query\"</span>: &#123; <span class=\"string\">\"filtered\"</span>: &#123;<span class=\"string\">\"filter\"</span>: &#123;<span class=\"string\">\"bool\"</span>: &#123;<span class=\"string\">\"must\"</span>: &#123;<span class=\"string\">\"bool\"</span>: &#123;<span class=\"string\">\"must\"</span>: [ \\</span><br><span class=\"line\">                                &#123;<span class=\"string\">\"query\"</span>: &#123;<span class=\"string\">\"match\"</span>: &#123;<span class=\"string\">\"b\"</span>: &#123;<span class=\"string\">\"query\"</span>: self.siteid,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase\"</span>&#125;&#125;&#125;&#125;, \\</span><br><span class=\"line\">                                &#123;<span class=\"string\">\"range\"</span>:&#123;<span class=\"string\">\"c\"</span>:&#123;<span class=\"string\">\"gte\"</span>: self.startdate + <span class=\"string\">\" 00:00:00\"</span>,<span class=\"string\">\"lte\"</span>:self.enddate + <span class=\"string\">\" 23:59:59\"</span>&#125;&#125;&#125; \\</span><br><span class=\"line\">                            ]&#125;&#125;&#125;&#125;&#125; \\</span><br><span class=\"line\">                        &#125; \\</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">\t\t\turl2 = <span class=\"string\">'%s?scroll=%s'</span> % (self.url, self.scroll)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tqueryJson = &#123; <span class=\"string\">\"scroll\"</span> : self.scroll, <span class=\"string\">\"scroll_id\"</span> : scrollID &#125;</span><br><span class=\"line\">\t\t\turl2 = self.url + <span class=\"string\">\"/scroll\"</span></span><br><span class=\"line\">\t\treq = urllib2.Request(url2, data=json.dumps(queryJson), headers=headers)</span><br><span class=\"line\">\t\tresponse = opener.open(req)</span><br><span class=\"line\">\t\tesdata = response.read()</span><br><span class=\"line\">\t\tself.processData(esdata)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processData</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#msg = json.dumps(data, ensure_ascii=False)</span></span><br><span class=\"line\">\t\tmsg = json.loads(data)</span><br><span class=\"line\">\t\t<span class=\"comment\">#print(type(data))</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(msg['hits']['hits'][2]['_source']['f8'])</span></span><br><span class=\"line\">\t\tscrollID = msg[<span class=\"string\">\"_scroll_id\"</span>]</span><br><span class=\"line\">\t\tattacks = msg[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> attack <span class=\"keyword\">in</span> attacks:</span><br><span class=\"line\">\t\t\tself.result = <span class=\"string\">'%s%s\\n'</span> % (self.result, attack[<span class=\"string\">'_source'</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(attacks) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tself.exportData(scrollID)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tself.writeFile(self.result)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeFile</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\tfilename = <span class=\"string\">'AttackData_%s.txt'</span> % (self.siteid)</span><br><span class=\"line\">\t\t\tf = open(filename, <span class=\"string\">\"w+\"</span>)</span><br><span class=\"line\">\t\t\tf.write(data)</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"site%s successfully exported\"</span> % self.siteid)</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">\t\t\tf.flush()</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tsiteids = [<span class=\"number\">1912</span>, <span class=\"number\">1918</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> siteid <span class=\"keyword\">in</span> siteids:</span><br><span class=\"line\">\t\texportEsData(<span class=\"string\">\"http://127.0.0.1:9201\"</span>, siteid, <span class=\"string\">\"2017-07-03\"</span>, <span class=\"string\">\"2017-12-01\"</span>, <span class=\"string\">\"5m\"</span>).exportData(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">os.system(<span class=\"string\">\"pause\"</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"> </span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exportEsData</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url, siteid, startdate, enddate, scroll)</span>:</span></span><br><span class=\"line\">\t\tself.url = <span class=\"string\">'%s/_search'</span> % (url)</span><br><span class=\"line\">\t\tself.siteid = siteid</span><br><span class=\"line\">\t\tself.startdate = startdate</span><br><span class=\"line\">\t\tself.enddate = enddate</span><br><span class=\"line\">\t\tself.scroll = scroll</span><br><span class=\"line\">\t\tself.result = <span class=\"string\">\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exportData</span><span class=\"params\">(self, scrollID)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#esdata = urllib2.urlopen(\"http://www.baidu.com/\").read()</span></span><br><span class=\"line\">\t\topener = urllib2.build_opener()</span><br><span class=\"line\">\t\theaders = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla /5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span> &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> scrollID == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"Exporting site%s...\"</span> % self.siteid)</span><br><span class=\"line\">\t\t\tqueryJson = &#123; \\</span><br><span class=\"line\">                    <span class=\"string\">\"size\"</span>: <span class=\"number\">1000</span>, \\</span><br><span class=\"line\">                    <span class=\"string\">\"query\"</span>: &#123; <span class=\"string\">\"filtered\"</span>: &#123;<span class=\"string\">\"filter\"</span>: &#123;<span class=\"string\">\"bool\"</span>: &#123;<span class=\"string\">\"must\"</span>: &#123;<span class=\"string\">\"bool\"</span>: &#123;<span class=\"string\">\"must\"</span>: [ \\</span><br><span class=\"line\">                                &#123;<span class=\"string\">\"query\"</span>: &#123;<span class=\"string\">\"match\"</span>: &#123;<span class=\"string\">\"b\"</span>: &#123;<span class=\"string\">\"query\"</span>: self.siteid,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase\"</span>&#125;&#125;&#125;&#125;, \\</span><br><span class=\"line\">                                &#123;<span class=\"string\">\"range\"</span>:&#123;<span class=\"string\">\"c\"</span>:&#123;<span class=\"string\">\"gte\"</span>: self.startdate + <span class=\"string\">\" 00:00:00\"</span>,<span class=\"string\">\"lte\"</span>:self.enddate + <span class=\"string\">\" 23:59:59\"</span>&#125;&#125;&#125; \\</span><br><span class=\"line\">                            ]&#125;&#125;&#125;&#125;&#125; \\</span><br><span class=\"line\">                        &#125; \\</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">\t\t\turl2 = <span class=\"string\">'%s?scroll=%s'</span> % (self.url, self.scroll)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tqueryJson = &#123; <span class=\"string\">\"scroll\"</span> : self.scroll, <span class=\"string\">\"scroll_id\"</span> : scrollID &#125;</span><br><span class=\"line\">\t\t\turl2 = self.url + <span class=\"string\">\"/scroll\"</span></span><br><span class=\"line\">\t\treq = urllib2.Request(url2, data=json.dumps(queryJson), headers=headers)</span><br><span class=\"line\">\t\tresponse = opener.open(req)</span><br><span class=\"line\">\t\tesdata = response.read()</span><br><span class=\"line\">\t\tself.processData(esdata)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processData</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#msg = json.dumps(data, ensure_ascii=False)</span></span><br><span class=\"line\">\t\tmsg = json.loads(data)</span><br><span class=\"line\">\t\t<span class=\"comment\">#print(type(data))</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(msg['hits']['hits'][2]['_source']['f8'])</span></span><br><span class=\"line\">\t\tscrollID = msg[<span class=\"string\">\"_scroll_id\"</span>]</span><br><span class=\"line\">\t\tattacks = msg[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> attack <span class=\"keyword\">in</span> attacks:</span><br><span class=\"line\">\t\t\tself.result = <span class=\"string\">'%s%s\\n'</span> % (self.result, attack[<span class=\"string\">'_source'</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(attacks) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tself.exportData(scrollID)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tself.writeFile(self.result)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeFile</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t\tfilename = <span class=\"string\">'AttackData_%s.txt'</span> % (self.siteid)</span><br><span class=\"line\">\t\t\tf = open(filename, <span class=\"string\">\"w+\"</span>)</span><br><span class=\"line\">\t\t\tf.write(data)</span><br><span class=\"line\">\t\t\tprint(<span class=\"string\">\"site%s successfully exported\"</span> % self.siteid)</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">\t\t\tf.flush()</span><br><span class=\"line\">\t\t\tf.close()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tsiteids = [<span class=\"number\">1912</span>, <span class=\"number\">1918</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> siteid <span class=\"keyword\">in</span> siteids:</span><br><span class=\"line\">\t\texportEsData(<span class=\"string\">\"http://127.0.0.1:9201\"</span>, siteid, <span class=\"string\">\"2017-07-03\"</span>, <span class=\"string\">\"2017-12-01\"</span>, <span class=\"string\">\"5m\"</span>).exportData(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">os.system(<span class=\"string\">\"pause\"</span>)</span><br></pre></td></tr></table></figure>"},{"post_url":"FastDFS-filesystem","title":"用FastDFS一步步搭建文件管理系统","date":"2018-08-09T09:25:01.000Z","_content":"原文：https://www.cnblogs.com/chiangchou/p/fastdfs.html","source":"_posts/FastDFS-filesystem.md","raw":"---\npost_url: FastDFS-filesystem\ntitle: 用FastDFS一步步搭建文件管理系统\ndate: 2018-08-09 17:25:01\ntags: fastDFS\n---\n原文：https://www.cnblogs.com/chiangchou/p/fastdfs.html","slug":"FastDFS-filesystem","published":1,"updated":"2019-03-25T13:55:30.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoi000a05abm0hywwhy","content":"<p>原文：<a href=\"https://www.cnblogs.com/chiangchou/p/fastdfs.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chiangchou/p/fastdfs.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://www.cnblogs.com/chiangchou/p/fastdfs.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chiangchou/p/fastdfs.html</a></p>\n"},{"post_url":"Harbor","title":"Centos7 安装 docker 私有仓库 Harbor","date":"2018-11-08T06:43:07.000Z","_content":"\n```\n# 安装 Harbor 之前需要先安装 python2.7+、Openssl、Docker、Docker Compose；\n \n# 安装 openssl\nyum install openssl\nyum install openssl-devel\n \n# 安装 docker\nyum install -y yum-utils device-mapper-persistent-data lvm2\nyum install docker-ce\nsystemctl start docker\n \n# 安装 docker compose\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n \n# 在线安装 harbor\nwget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-online-installer-v1.6.0.tgz\ntar -zxvf harbor-online-installer-v1.6.0.tgz\n \n# 配置 harbor/harbor.cfg 中 hostname，不能使用 localhost 或 127.0.0.1\nhostname = 192.168.153.7\n \n# 开始安装\n./harbor/install.sh\n```\n\n安装完成\n![](/images/20181108143944390.jpg)\n默认管理员用户名/密码为 admin / Harbor12345 登录\n![](/images/20181108144249774.jpg)\n官方安装手册：https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md","source":"_posts/Harbor.md","raw":"---\npost_url: Harbor\ntitle: Centos7 安装 docker 私有仓库 Harbor\ndate: 2018-11-08 14:43:07\ntags: [harbor, docker]\n---\n\n```\n# 安装 Harbor 之前需要先安装 python2.7+、Openssl、Docker、Docker Compose；\n \n# 安装 openssl\nyum install openssl\nyum install openssl-devel\n \n# 安装 docker\nyum install -y yum-utils device-mapper-persistent-data lvm2\nyum install docker-ce\nsystemctl start docker\n \n# 安装 docker compose\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n \n# 在线安装 harbor\nwget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-online-installer-v1.6.0.tgz\ntar -zxvf harbor-online-installer-v1.6.0.tgz\n \n# 配置 harbor/harbor.cfg 中 hostname，不能使用 localhost 或 127.0.0.1\nhostname = 192.168.153.7\n \n# 开始安装\n./harbor/install.sh\n```\n\n安装完成\n![](/images/20181108143944390.jpg)\n默认管理员用户名/密码为 admin / Harbor12345 登录\n![](/images/20181108144249774.jpg)\n官方安装手册：https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md","slug":"Harbor","published":1,"updated":"2019-03-25T13:56:01.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtok000b05abgjwhih1r","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 Harbor 之前需要先安装 python2.7+、Openssl、Docker、Docker Compose；</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 openssl</span><br><span class=\"line\">yum install openssl</span><br><span class=\"line\">yum install openssl-devel</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 docker</span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 docker compose</span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\"># 在线安装 harbor</span><br><span class=\"line\">wget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-online-installer-v1.6.0.tgz</span><br><span class=\"line\">tar -zxvf harbor-online-installer-v1.6.0.tgz</span><br><span class=\"line\"> </span><br><span class=\"line\"># 配置 harbor/harbor.cfg 中 hostname，不能使用 localhost 或 127.0.0.1</span><br><span class=\"line\">hostname = 192.168.153.7</span><br><span class=\"line\"> </span><br><span class=\"line\"># 开始安装</span><br><span class=\"line\">./harbor/install.sh</span><br></pre></td></tr></table></figure>\n<p>安装完成<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181108143944390.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>默认管理员用户名/密码为 admin / Harbor12345 登录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181108144249774.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>官方安装手册：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 Harbor 之前需要先安装 python2.7+、Openssl、Docker、Docker Compose；</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 openssl</span><br><span class=\"line\">yum install openssl</span><br><span class=\"line\">yum install openssl-devel</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 docker</span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 docker compose</span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\"># 在线安装 harbor</span><br><span class=\"line\">wget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-online-installer-v1.6.0.tgz</span><br><span class=\"line\">tar -zxvf harbor-online-installer-v1.6.0.tgz</span><br><span class=\"line\"> </span><br><span class=\"line\"># 配置 harbor/harbor.cfg 中 hostname，不能使用 localhost 或 127.0.0.1</span><br><span class=\"line\">hostname = 192.168.153.7</span><br><span class=\"line\"> </span><br><span class=\"line\"># 开始安装</span><br><span class=\"line\">./harbor/install.sh</span><br></pre></td></tr></table></figure>\n<p>安装完成<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181108143944390.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>默认管理员用户名/密码为 admin / Harbor12345 登录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181108144249774.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>官方安装手册：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md</a></p>\n"},{"post_url":"JMeter-URISyntaxException","title":"JMeter java.net.URISyntaxException","date":"2017-10-13T03:15:02.000Z","_content":"问题复现：在url中传json等有特殊字符的数据时；\n\n\n解决办法：把url中的参数进行url编码再进行请求；\n\n\nurl在线编码工具：http://tool.oschina.net/encode?type=4","source":"_posts/JMeter-URISyntaxException.md","raw":"---\npost_url: JMeter-URISyntaxException\ntitle: JMeter java.net.URISyntaxException\ndate: 2017-10-13 11:15:02\ntags: jMeter\n---\n问题复现：在url中传json等有特殊字符的数据时；\n\n\n解决办法：把url中的参数进行url编码再进行请求；\n\n\nurl在线编码工具：http://tool.oschina.net/encode?type=4","slug":"JMeter-URISyntaxException","published":1,"updated":"2019-03-25T13:56:54.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtol000e05abzk93i29e","content":"<p>问题复现：在url中传json等有特殊字符的数据时；</p>\n<p>解决办法：把url中的参数进行url编码再进行请求；</p>\n<p>url在线编码工具：<a href=\"http://tool.oschina.net/encode?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/encode?type=4</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题复现：在url中传json等有特殊字符的数据时；</p>\n<p>解决办法：把url中的参数进行url编码再进行请求；</p>\n<p>url在线编码工具：<a href=\"http://tool.oschina.net/encode?type=4\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/encode?type=4</a></p>\n"},{"post_url":"Mac-Shuttle-sshpass-xshell","title":"Mac 上使用 Shuttle + sshpass 替代 xshell","date":"2018-11-18T03:07:02.000Z","_content":"终于在 Mac 上找到相对好用又简洁的 xhsell 替代工具：Shuttle + sshpass\n\n1.安装 sshpass：\n```\n下载并解压 http://sourceforge.net/projects/sshpass/\n$ ./configure\n$ sudo make install\n \n使用：\n$ sshpass -p '123456' ssh root@192.168.0.171\n```\n\n注意：在使用 sshpass 登录前需要先使用 ssh root@192.168.0.171 登录 yes 一下，然后就可以正常使用 sshpass 了。\n\n \n\n2.安装 Shuttle：\n\n下载并解压后拖到应用程序：http://fitztrev.github.io/shuttle/\n\n \n\n3.配置 Shuttle：\n\n设置-编辑 打开配置文件，里面就是配置那个 json，一看就明白了\n\n配置项文档：https://github.com/fitztrev/shuttle/wiki\n\n我的配置：\n![](/images/20181118141726250.png)","source":"_posts/Mac-Shuttle-sshpass-xshell.md","raw":"---\npost_url: Mac-Shuttle-sshpass-xshell\ntitle: Mac 上使用 Shuttle + sshpass 替代 xshell\ndate: 2018-11-18 11:07:02\ntags: mac\n---\n终于在 Mac 上找到相对好用又简洁的 xhsell 替代工具：Shuttle + sshpass\n\n1.安装 sshpass：\n```\n下载并解压 http://sourceforge.net/projects/sshpass/\n$ ./configure\n$ sudo make install\n \n使用：\n$ sshpass -p '123456' ssh root@192.168.0.171\n```\n\n注意：在使用 sshpass 登录前需要先使用 ssh root@192.168.0.171 登录 yes 一下，然后就可以正常使用 sshpass 了。\n\n \n\n2.安装 Shuttle：\n\n下载并解压后拖到应用程序：http://fitztrev.github.io/shuttle/\n\n \n\n3.配置 Shuttle：\n\n设置-编辑 打开配置文件，里面就是配置那个 json，一看就明白了\n\n配置项文档：https://github.com/fitztrev/shuttle/wiki\n\n我的配置：\n![](/images/20181118141726250.png)","slug":"Mac-Shuttle-sshpass-xshell","published":1,"updated":"2019-03-25T14:00:55.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtom000f05abutm3dvp9","content":"<p>终于在 Mac 上找到相对好用又简洁的 xhsell 替代工具：Shuttle + sshpass</p>\n<p>1.安装 sshpass：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载并解压 http://sourceforge.net/projects/sshpass/</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"> </span><br><span class=\"line\">使用：</span><br><span class=\"line\">$ sshpass -p &apos;123456&apos; ssh root@192.168.0.171</span><br></pre></td></tr></table></figure></p>\n<p>注意：在使用 sshpass 登录前需要先使用 ssh <a href=\"mailto:root@192.168.0.171\" target=\"_blank\" rel=\"noopener\">root@192.168.0.171</a> 登录 yes 一下，然后就可以正常使用 sshpass 了。</p>\n<p>2.安装 Shuttle：</p>\n<p>下载并解压后拖到应用程序：<a href=\"http://fitztrev.github.io/shuttle/\" target=\"_blank\" rel=\"noopener\">http://fitztrev.github.io/shuttle/</a></p>\n<p>3.配置 Shuttle：</p>\n<p>设置-编辑 打开配置文件，里面就是配置那个 json，一看就明白了</p>\n<p>配置项文档：<a href=\"https://github.com/fitztrev/shuttle/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/fitztrev/shuttle/wiki</a></p>\n<p>我的配置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181118141726250.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于在 Mac 上找到相对好用又简洁的 xhsell 替代工具：Shuttle + sshpass</p>\n<p>1.安装 sshpass：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载并解压 http://sourceforge.net/projects/sshpass/</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ sudo make install</span><br><span class=\"line\"> </span><br><span class=\"line\">使用：</span><br><span class=\"line\">$ sshpass -p &apos;123456&apos; ssh root@192.168.0.171</span><br></pre></td></tr></table></figure></p>\n<p>注意：在使用 sshpass 登录前需要先使用 ssh <a href=\"mailto:root@192.168.0.171\" target=\"_blank\" rel=\"noopener\">root@192.168.0.171</a> 登录 yes 一下，然后就可以正常使用 sshpass 了。</p>\n<p>2.安装 Shuttle：</p>\n<p>下载并解压后拖到应用程序：<a href=\"http://fitztrev.github.io/shuttle/\" target=\"_blank\" rel=\"noopener\">http://fitztrev.github.io/shuttle/</a></p>\n<p>3.配置 Shuttle：</p>\n<p>设置-编辑 打开配置文件，里面就是配置那个 json，一看就明白了</p>\n<p>配置项文档：<a href=\"https://github.com/fitztrev/shuttle/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/fitztrev/shuttle/wiki</a></p>\n<p>我的配置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181118141726250.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"Java-Socket","title":"Java 使用 Socket 判断某服务能否连通","date":"2018-08-09T09:57:30.000Z","_content":"如下只是通过判断端口通不通来大体了解服务的状态，并不能用这个准确判断某服务的实际运行状态。\n```java\npackage com.iaiot.utils;\n \nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\n \n/**\n * SocketUtils\n *\n * @author iaiot\n */\npublic class SocketUtils {\n \n    /**\n     * 判断某服务能否连通\n     *\n     * @param host host\n     * @param port port\n     * @return boolean\n     */\n    public static boolean isRunning(String host, int port) {\n        Socket sClient = null;\n        try {\n            SocketAddress saAdd = new InetSocketAddress(host.trim(), port);\n            sClient = new Socket();\n            sClient.connect(saAdd, 1000);\n        }\n        catch (UnknownHostException e) {\n            return false;\n        }\n        catch (SocketTimeoutException e) {\n            return false;\n        }\n        catch (IOException e) {\n            return false;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        finally {\n            try {\n                if (sClient != null) {\n                    sClient.close();\n                }\n            }\n            catch (Exception e) {\n            }\n        }\n        return true;\n    }\n \n}\n```","source":"_posts/Java-Socket.md","raw":"---\npost_url: Java-Socket\ntitle: Java 使用 Socket 判断某服务能否连通\ndate: 2018-08-09 17:57:30\ntags: [java, socket]\n---\n如下只是通过判断端口通不通来大体了解服务的状态，并不能用这个准确判断某服务的实际运行状态。\n```java\npackage com.iaiot.utils;\n \nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\n \n/**\n * SocketUtils\n *\n * @author iaiot\n */\npublic class SocketUtils {\n \n    /**\n     * 判断某服务能否连通\n     *\n     * @param host host\n     * @param port port\n     * @return boolean\n     */\n    public static boolean isRunning(String host, int port) {\n        Socket sClient = null;\n        try {\n            SocketAddress saAdd = new InetSocketAddress(host.trim(), port);\n            sClient = new Socket();\n            sClient.connect(saAdd, 1000);\n        }\n        catch (UnknownHostException e) {\n            return false;\n        }\n        catch (SocketTimeoutException e) {\n            return false;\n        }\n        catch (IOException e) {\n            return false;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        finally {\n            try {\n                if (sClient != null) {\n                    sClient.close();\n                }\n            }\n            catch (Exception e) {\n            }\n        }\n        return true;\n    }\n \n}\n```","slug":"Java-Socket","published":1,"updated":"2019-03-25T13:56:34.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoo000i05abgdnp34d5","content":"<p>如下只是通过判断端口通不通来大体了解服务的状态，并不能用这个准确判断某服务的实际运行状态。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iaiot.utils;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.SocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.SocketTimeoutException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SocketUtils</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> iaiot</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketUtils</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断某服务能否连通</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> host host</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port port</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRunning</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port)</span> </span>&#123;</span><br><span class=\"line\">        Socket sClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            SocketAddress saAdd = <span class=\"keyword\">new</span> InetSocketAddress(host.trim(), port);</span><br><span class=\"line\">            sClient = <span class=\"keyword\">new</span> Socket();</span><br><span class=\"line\">            sClient.connect(saAdd, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (SocketTimeoutException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sClient != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    sClient.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如下只是通过判断端口通不通来大体了解服务的状态，并不能用这个准确判断某服务的实际运行状态。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iaiot.utils;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.SocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.SocketTimeoutException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SocketUtils</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> iaiot</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketUtils</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断某服务能否连通</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> host host</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port port</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRunning</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port)</span> </span>&#123;</span><br><span class=\"line\">        Socket sClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            SocketAddress saAdd = <span class=\"keyword\">new</span> InetSocketAddress(host.trim(), port);</span><br><span class=\"line\">            sClient = <span class=\"keyword\">new</span> Socket();</span><br><span class=\"line\">            sClient.connect(saAdd, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (SocketTimeoutException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sClient != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    sClient.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"Jmeter-webSocket","title":"Jmeter 发送 webSocket 请求","date":"2018-12-25T12:56:51.000Z","_content":"下载 Jmeter 插件管理插件：http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar\n\n放到 JMeter 安装目录 lib/ext 下重启\n![](/images/pmgr_menu_item.png)\n\n然后在插件管理里搜 webSocket， 下载 webSocket 插件即可","source":"_posts/Jmeter-webSocket.md","raw":"---\npost_url: Jmeter-webSocket\ntitle: Jmeter 发送 webSocket 请求\ndate: 2018-12-25 20:56:51\ntags: [jmeter, webSocket]\n---\n下载 Jmeter 插件管理插件：http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar\n\n放到 JMeter 安装目录 lib/ext 下重启\n![](/images/pmgr_menu_item.png)\n\n然后在插件管理里搜 webSocket， 下载 webSocket 插件即可","slug":"Jmeter-webSocket","published":1,"updated":"2019-03-25T13:57:06.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtop000j05abao6970it","content":"<p>下载 Jmeter 插件管理插件：<a href=\"http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar\" target=\"_blank\" rel=\"noopener\">http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar</a></p>\n<p>放到 JMeter 安装目录 lib/ext 下重启<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/pmgr_menu_item.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后在插件管理里搜 webSocket， 下载 webSocket 插件即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载 Jmeter 插件管理插件：<a href=\"http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar\" target=\"_blank\" rel=\"noopener\">http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.3/jmeter-plugins-manager-1.3.jar</a></p>\n<p>放到 JMeter 安装目录 lib/ext 下重启<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/pmgr_menu_item.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后在插件管理里搜 webSocket， 下载 webSocket 插件即可</p>\n"},{"post_url":"Kubernetes-notes","title":"Kubernetes 笔记","date":"2019-01-12T07:59:33.000Z","_content":"1. 对于一个容器来说，它的 IP 地址等信息不是固定的，那么 Web 应用又怎么找到数据库容器的 Pod 呢？所以，Kubernetes 项目的做法是给 Pod 绑定一个 Service 服务，而 Service 服务声明的 IP 地址等信息是“终生不变”的。这个Service 服务的主要作用，就是作为 Pod 的代理入口（Portal），从而代替 Pod 对外暴露一个固定的网络地址。这样，对于 Web 应用的 Pod 来说，它需要关心的就是数据库 Pod 的 Service 信息。不难想象，Service 后端真正代理的 Pod 的 IP 地址、端口等信息的自动更新、维护，则是 Kubernetes 项目的职责。\n\n2. 其实国内同学们用 kubeadm 安装 Kubernetes 最大的拦路虎在于有几个镜像没法下载，我建议大家先手动把镜像pull 下来，从阿里的镜像源上，然后tag成安装所需的镜像名称，这样你发现安装过程会异常顺利。\n更简单的免fq安装：kubeadm拉取镜像的url是可配置的。在 kubeadm 中，Master 组件的 YAML 文件会被生成在 /etc/kubernetes/manifests 路径下，kube-apiserver.yaml。在 kube-apiserver.yaml 中定义了安装 k8s 所需要的镜像，只需要修改kube-apiserver.yaml中的镜像为阿里云的镜像即可。\n\n3. 对于同一个 Pod 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 Infra 容器完成的\n\n4. kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml","source":"_posts/Kubernetes-notes.md","raw":"---\npost_url: Kubernetes-notes\ntitle: Kubernetes 笔记\ndate: 2019-01-12 15:59:33\ntags: kubernetes\n---\n1. 对于一个容器来说，它的 IP 地址等信息不是固定的，那么 Web 应用又怎么找到数据库容器的 Pod 呢？所以，Kubernetes 项目的做法是给 Pod 绑定一个 Service 服务，而 Service 服务声明的 IP 地址等信息是“终生不变”的。这个Service 服务的主要作用，就是作为 Pod 的代理入口（Portal），从而代替 Pod 对外暴露一个固定的网络地址。这样，对于 Web 应用的 Pod 来说，它需要关心的就是数据库 Pod 的 Service 信息。不难想象，Service 后端真正代理的 Pod 的 IP 地址、端口等信息的自动更新、维护，则是 Kubernetes 项目的职责。\n\n2. 其实国内同学们用 kubeadm 安装 Kubernetes 最大的拦路虎在于有几个镜像没法下载，我建议大家先手动把镜像pull 下来，从阿里的镜像源上，然后tag成安装所需的镜像名称，这样你发现安装过程会异常顺利。\n更简单的免fq安装：kubeadm拉取镜像的url是可配置的。在 kubeadm 中，Master 组件的 YAML 文件会被生成在 /etc/kubernetes/manifests 路径下，kube-apiserver.yaml。在 kube-apiserver.yaml 中定义了安装 k8s 所需要的镜像，只需要修改kube-apiserver.yaml中的镜像为阿里云的镜像即可。\n\n3. 对于同一个 Pod 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 Infra 容器完成的\n\n4. kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml","slug":"Kubernetes-notes","published":1,"updated":"2019-03-25T13:57:59.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoq000l05abvx9a81ue","content":"<ol>\n<li><p>对于一个容器来说，它的 IP 地址等信息不是固定的，那么 Web 应用又怎么找到数据库容器的 Pod 呢？所以，Kubernetes 项目的做法是给 Pod 绑定一个 Service 服务，而 Service 服务声明的 IP 地址等信息是“终生不变”的。这个Service 服务的主要作用，就是作为 Pod 的代理入口（Portal），从而代替 Pod 对外暴露一个固定的网络地址。这样，对于 Web 应用的 Pod 来说，它需要关心的就是数据库 Pod 的 Service 信息。不难想象，Service 后端真正代理的 Pod 的 IP 地址、端口等信息的自动更新、维护，则是 Kubernetes 项目的职责。</p>\n</li>\n<li><p>其实国内同学们用 kubeadm 安装 Kubernetes 最大的拦路虎在于有几个镜像没法下载，我建议大家先手动把镜像pull 下来，从阿里的镜像源上，然后tag成安装所需的镜像名称，这样你发现安装过程会异常顺利。<br>更简单的免fq安装：kubeadm拉取镜像的url是可配置的。在 kubeadm 中，Master 组件的 YAML 文件会被生成在 /etc/kubernetes/manifests 路径下，kube-apiserver.yaml。在 kube-apiserver.yaml 中定义了安装 k8s 所需要的镜像，只需要修改kube-apiserver.yaml中的镜像为阿里云的镜像即可。</p>\n</li>\n<li><p>对于同一个 Pod 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 Infra 容器完成的</p>\n</li>\n<li><p>kubectl apply -f <a href=\"https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>对于一个容器来说，它的 IP 地址等信息不是固定的，那么 Web 应用又怎么找到数据库容器的 Pod 呢？所以，Kubernetes 项目的做法是给 Pod 绑定一个 Service 服务，而 Service 服务声明的 IP 地址等信息是“终生不变”的。这个Service 服务的主要作用，就是作为 Pod 的代理入口（Portal），从而代替 Pod 对外暴露一个固定的网络地址。这样，对于 Web 应用的 Pod 来说，它需要关心的就是数据库 Pod 的 Service 信息。不难想象，Service 后端真正代理的 Pod 的 IP 地址、端口等信息的自动更新、维护，则是 Kubernetes 项目的职责。</p>\n</li>\n<li><p>其实国内同学们用 kubeadm 安装 Kubernetes 最大的拦路虎在于有几个镜像没法下载，我建议大家先手动把镜像pull 下来，从阿里的镜像源上，然后tag成安装所需的镜像名称，这样你发现安装过程会异常顺利。<br>更简单的免fq安装：kubeadm拉取镜像的url是可配置的。在 kubeadm 中，Master 组件的 YAML 文件会被生成在 /etc/kubernetes/manifests 路径下，kube-apiserver.yaml。在 kube-apiserver.yaml 中定义了安装 k8s 所需要的镜像，只需要修改kube-apiserver.yaml中的镜像为阿里云的镜像即可。</p>\n</li>\n<li><p>对于同一个 Pod 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 Infra 容器完成的</p>\n</li>\n<li><p>kubectl apply -f <a href=\"https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</a></p>\n</li>\n</ol>\n"},{"post_url":"adb","title":"adb 无线连接安卓设备调试程序方法","date":"2018-08-18T14:52:03.000Z","_content":"1. 在安卓手机端下载 终端模拟器 app 并安装\n\n附下载地址：https://download.csdn.net/download/iaiot/10612935\n\n运行程序在终端模拟器的命令行输入如下命令：\n\nsetprop service.adb.tcp.port 5555\n\nstop adbd\n\nstart adbd\n\n \n\n2. 在电脑cmd下输入如下指令\n\nadb connect 192.168.1.116:5555\n![](/images/20180818224047613.png)\n\n\n3. Android Studio中直接运行程序即可。\n","source":"_posts/adb.md","raw":"---\npost_url: adb\ntitle: adb 无线连接安卓设备调试程序方法\ndate: 2018-08-18 22:52:03\ntags: [android, adb]\n---\n1. 在安卓手机端下载 终端模拟器 app 并安装\n\n附下载地址：https://download.csdn.net/download/iaiot/10612935\n\n运行程序在终端模拟器的命令行输入如下命令：\n\nsetprop service.adb.tcp.port 5555\n\nstop adbd\n\nstart adbd\n\n \n\n2. 在电脑cmd下输入如下指令\n\nadb connect 192.168.1.116:5555\n![](/images/20180818224047613.png)\n\n\n3. Android Studio中直接运行程序即可。\n","slug":"adb","published":1,"updated":"2019-03-25T14:15:13.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoq000n05abn9pr905g","content":"<ol>\n<li>在安卓手机端下载 终端模拟器 app 并安装</li>\n</ol>\n<p>附下载地址：<a href=\"https://download.csdn.net/download/iaiot/10612935\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/iaiot/10612935</a></p>\n<p>运行程序在终端模拟器的命令行输入如下命令：</p>\n<p>setprop service.adb.tcp.port 5555</p>\n<p>stop adbd</p>\n<p>start adbd</p>\n<ol start=\"2\">\n<li>在电脑cmd下输入如下指令</li>\n</ol>\n<p>adb connect 192.168.1.116:5555<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180818224047613.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"3\">\n<li>Android Studio中直接运行程序即可。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>在安卓手机端下载 终端模拟器 app 并安装</li>\n</ol>\n<p>附下载地址：<a href=\"https://download.csdn.net/download/iaiot/10612935\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/iaiot/10612935</a></p>\n<p>运行程序在终端模拟器的命令行输入如下命令：</p>\n<p>setprop service.adb.tcp.port 5555</p>\n<p>stop adbd</p>\n<p>start adbd</p>\n<ol start=\"2\">\n<li>在电脑cmd下输入如下指令</li>\n</ol>\n<p>adb connect 192.168.1.116:5555<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180818224047613.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"3\">\n<li>Android Studio中直接运行程序即可。</li>\n</ol>\n"},{"post_url":"SELECT-CONCAT-GROUP_CONCAT","title":"MySQL 查询结果返回数组或 JSON XML 等自定义格式 SELECT CONCAT GROUP_CONCAT","date":"2018-12-22T09:52:16.000Z","_content":"\n```sql\nSELECT sub_name,\n  CONCAT('[',\n  GROUP_CONCAT(\n  CONCAT('{\"name\":\"', sub_name, '\",'),\n  CONCAT('\"id\":\"', id, '\"}')),\n  ']') AS child\nFROM secret\nWHERE 1 = 1\nGROUP BY sub_name\nlimit 1, 10\n```\n这样 MySQL 返回的 child 值是一个字符串，在代码中转成需要的格式\n```java\nfor (JSONObject child : items) {\n    child.put(\"child\", JSON.parseArray(child.getString(\"child\")));\n}\n```","source":"_posts/SELECT-CONCAT-GROUP-CONCAT.md","raw":"---\npost_url: SELECT-CONCAT-GROUP_CONCAT\ntitle: MySQL 查询结果返回数组或 JSON XML 等自定义格式 SELECT CONCAT GROUP_CONCAT\ndate: 2018-12-22 17:52:16\ntags: mysql\n---\n\n```sql\nSELECT sub_name,\n  CONCAT('[',\n  GROUP_CONCAT(\n  CONCAT('{\"name\":\"', sub_name, '\",'),\n  CONCAT('\"id\":\"', id, '\"}')),\n  ']') AS child\nFROM secret\nWHERE 1 = 1\nGROUP BY sub_name\nlimit 1, 10\n```\n这样 MySQL 返回的 child 值是一个字符串，在代码中转成需要的格式\n```java\nfor (JSONObject child : items) {\n    child.put(\"child\", JSON.parseArray(child.getString(\"child\")));\n}\n```","slug":"SELECT-CONCAT-GROUP-CONCAT","published":1,"updated":"2019-03-25T14:03:47.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtor000p05abjhvz4lvf","content":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sub_name,</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'['</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP_CONCAT</span>(</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'&#123;\"name\":\"'</span>, sub_name, <span class=\"string\">'\",'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'\"id\":\"'</span>, <span class=\"keyword\">id</span>, <span class=\"string\">'\"&#125;'</span>)),</span><br><span class=\"line\">  <span class=\"string\">']'</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">child</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> secret</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sub_name</span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">1</span>, <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>这样 MySQL 返回的 child 值是一个字符串，在代码中转成需要的格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (JSONObject child : items) &#123;</span><br><span class=\"line\">    child.put(<span class=\"string\">\"child\"</span>, JSON.parseArray(child.getString(<span class=\"string\">\"child\"</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sub_name,</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'['</span>,</span><br><span class=\"line\">  <span class=\"keyword\">GROUP_CONCAT</span>(</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'&#123;\"name\":\"'</span>, sub_name, <span class=\"string\">'\",'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'\"id\":\"'</span>, <span class=\"keyword\">id</span>, <span class=\"string\">'\"&#125;'</span>)),</span><br><span class=\"line\">  <span class=\"string\">']'</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">child</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> secret</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sub_name</span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">1</span>, <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>这样 MySQL 返回的 child 值是一个字符串，在代码中转成需要的格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (JSONObject child : items) &#123;</span><br><span class=\"line\">    child.put(<span class=\"string\">\"child\"</span>, JSON.parseArray(child.getString(<span class=\"string\">\"child\"</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"WebStorm-debug-angular","title":"WebStorm打断点调试Angular4应用","date":"2018-01-20T02:49:35.000Z","_content":"我用的是WebStorm和Google浏览器调试的Angular4，配置步骤如下：\n\n1. \n![](/images/20180120105116570.png)\n2. \n![](/images/20180120104417488.png)\n3. \n![](/images/20180120104433898.png)\n4. \n![](/images/20180120104449366.png)\n5. \n![](/images/20180120104503821.png)\n\n现在在Google浏览器或者WebStorm打断点调试都可以了，代码会自动同步到断点位置。\n\n在浏览器控制台也可以看到TypeScript代码了。\n\n官方文档说明：https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\n","source":"_posts/WebStorm-debug-angular.md","raw":"---\npost_url: WebStorm-debug-angular\ntitle: WebStorm打断点调试Angular4应用\ndate: 2018-01-20 10:49:35\ntags: angular\n---\n我用的是WebStorm和Google浏览器调试的Angular4，配置步骤如下：\n\n1. \n![](/images/20180120105116570.png)\n2. \n![](/images/20180120104417488.png)\n3. \n![](/images/20180120104433898.png)\n4. \n![](/images/20180120104449366.png)\n5. \n![](/images/20180120104503821.png)\n\n现在在Google浏览器或者WebStorm打断点调试都可以了，代码会自动同步到断点位置。\n\n在浏览器控制台也可以看到TypeScript代码了。\n\n官方文档说明：https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\n","slug":"WebStorm-debug-angular","published":1,"updated":"2019-03-24T13:04:24.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtos000r05ab309er3c9","content":"<p>我用的是WebStorm和Google浏览器调试的Angular4，配置步骤如下：</p>\n<ol>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120105116570.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104417488.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104433898.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104449366.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104503821.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<p>现在在Google浏览器或者WebStorm打断点调试都可以了，代码会自动同步到断点位置。</p>\n<p>在浏览器控制台也可以看到TypeScript代码了。</p>\n<p>官方文档说明：<a href=\"https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\" target=\"_blank\" rel=\"noopener\">https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我用的是WebStorm和Google浏览器调试的Angular4，配置步骤如下：</p>\n<ol>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120105116570.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104417488.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104433898.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104449366.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180120104503821.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<p>现在在Google浏览器或者WebStorm打断点调试都可以了，代码会自动同步到断点位置。</p>\n<p>在浏览器控制台也可以看到TypeScript代码了。</p>\n<p>官方文档说明：<a href=\"https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\" target=\"_blank\" rel=\"noopener\">https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/</a></p>\n"},{"post_url":"Windows-PowerShell-ExecutionPolicy","title":"Windows PowerShell 执行策略 ExecutionPolicy","date":"2018-12-03T07:53:49.000Z","_content":"获取当前执行策略：Get-ExecutionPolicy\n\n获取影响当前会话的所有执行策略，并按优先顺序显示：Get-ExecutionPolicy -List\n\n获取当前用户作用域的执行策略：Get-ExecutionPolicy -Scope CurrentUser\n\n更改执行策略：Set-ExecutionPolicy -ExecutionPolicy <PolicyName>\n\n    例：Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\n\n设置某个特定作用域中的执行策略：Set-ExecutionPolicy -ExecutionPolicy <PolicyName> -Scope <scope>\n\n    例：Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n删除本地计算机的所有用户的执行策略：Set-ExecutionPolicy Undefined\n\n    或 Set-ExecutionPolicy Undefined -scope LocalMachine\n\n如果未在任何作用域中设置执行策略，则有效的执行策略是 Restricted（默认执行策略）\n\n为某个会话设置一个不同的执行策略（只在当前会话期间生效）：\n\nPowerShell.exe -ExecutionPolicy AllSigned\n\nPowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-filebeat.ps1\n\n \n\n全文：https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)\n","source":"_posts/Windows-PowerShell-ExecutionPolicy.md","raw":"---\npost_url: Windows-PowerShell-ExecutionPolicy\ntitle: Windows PowerShell 执行策略 ExecutionPolicy\ndate: 2018-12-03 15:53:49\ntags: windows\n---\n获取当前执行策略：Get-ExecutionPolicy\n\n获取影响当前会话的所有执行策略，并按优先顺序显示：Get-ExecutionPolicy -List\n\n获取当前用户作用域的执行策略：Get-ExecutionPolicy -Scope CurrentUser\n\n更改执行策略：Set-ExecutionPolicy -ExecutionPolicy <PolicyName>\n\n    例：Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\n\n设置某个特定作用域中的执行策略：Set-ExecutionPolicy -ExecutionPolicy <PolicyName> -Scope <scope>\n\n    例：Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n删除本地计算机的所有用户的执行策略：Set-ExecutionPolicy Undefined\n\n    或 Set-ExecutionPolicy Undefined -scope LocalMachine\n\n如果未在任何作用域中设置执行策略，则有效的执行策略是 Restricted（默认执行策略）\n\n为某个会话设置一个不同的执行策略（只在当前会话期间生效）：\n\nPowerShell.exe -ExecutionPolicy AllSigned\n\nPowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-filebeat.ps1\n\n \n\n全文：https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)\n","slug":"Windows-PowerShell-ExecutionPolicy","published":1,"updated":"2019-03-25T14:05:29.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtot000u05abwpdyio6s","content":"<p>获取当前执行策略：Get-ExecutionPolicy</p>\n<p>获取影响当前会话的所有执行策略，并按优先顺序显示：Get-ExecutionPolicy -List</p>\n<p>获取当前用户作用域的执行策略：Get-ExecutionPolicy -Scope CurrentUser</p>\n<p>更改执行策略：Set-ExecutionPolicy -ExecutionPolicy <policyname></policyname></p>\n<pre><code>例：Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\n</code></pre><p>设置某个特定作用域中的执行策略：Set-ExecutionPolicy -ExecutionPolicy <policyname> -Scope <scope></scope></policyname></p>\n<pre><code>例：Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre><p>删除本地计算机的所有用户的执行策略：Set-ExecutionPolicy Undefined</p>\n<pre><code>或 Set-ExecutionPolicy Undefined -scope LocalMachine\n</code></pre><p>如果未在任何作用域中设置执行策略，则有效的执行策略是 Restricted（默认执行策略）</p>\n<p>为某个会话设置一个不同的执行策略（只在当前会话期间生效）：</p>\n<p>PowerShell.exe -ExecutionPolicy AllSigned</p>\n<p>PowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-filebeat.ps1</p>\n<p>全文：<a href=\"https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>获取当前执行策略：Get-ExecutionPolicy</p>\n<p>获取影响当前会话的所有执行策略，并按优先顺序显示：Get-ExecutionPolicy -List</p>\n<p>获取当前用户作用域的执行策略：Get-ExecutionPolicy -Scope CurrentUser</p>\n<p>更改执行策略：Set-ExecutionPolicy -ExecutionPolicy <policyname></policyname></p>\n<pre><code>例：Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\n</code></pre><p>设置某个特定作用域中的执行策略：Set-ExecutionPolicy -ExecutionPolicy <policyname> -Scope <scope></scope></policyname></p>\n<pre><code>例：Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre><p>删除本地计算机的所有用户的执行策略：Set-ExecutionPolicy Undefined</p>\n<pre><code>或 Set-ExecutionPolicy Undefined -scope LocalMachine\n</code></pre><p>如果未在任何作用域中设置执行策略，则有效的执行策略是 Restricted（默认执行策略）</p>\n<p>为某个会话设置一个不同的执行策略（只在当前会话期间生效）：</p>\n<p>PowerShell.exe -ExecutionPolicy AllSigned</p>\n<p>PowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-filebeat.ps1</p>\n<p>全文：<a href=\"https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v%3dwps.640)</a></p>\n"},{"post_url":"app-api-token","title":"App开放接口api安全性—Token签名sign的设计与实现","date":"2018-08-14T10:58:00.000Z","_content":"原文地址：https://blog.csdn.net/fengshizty/article/details/48754609\n前言\n       在app开放接口api的设计中，避免不了的就是安全性问题，因为大多数接口涉及到用户的个人信息以及一些敏感的数据，所以对这些接口需要进行身份的认证，那么这就需要用户提供一些信息，比如用户名密码等，但是为了安全起见让用户暴露的明文密码次数越少越好，我们一般在web项目中，大多数采用保存的session中，然后在存一份到cookie中，来保持用户的回话有效性。但是在app提供的开放接口中，后端服务器在用户登录后如何去验证和维护用户的登陆有效性呢，以下是参考项目中设计的解决方案，其原理和大多数开放接口安全验证一样，如淘宝的开放接口token验证，微信开发平台token验证都是同理。\n\n \n\n签名设计\n     对于敏感的api接口，需使用https协议\n           https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。\n\n           https协议需要ca证书，一般需要交费。\n\n \n\n     签名的设计\n           原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正取，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：\n\n         时间戳：timestamp\n\n         Token令牌：token\n\n         然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。\n\n例如：原请求https://www.andy.cn/api/user/update/info.shtml?city=北京 （post和get都一样，对所有参数排序加密）\n\n 加上时间戳和token\n\n       https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&token=wefkfjdskfjewfjkjfdfnc\n\n      然后更具url参数生成sign\n\n      最终的请求如\n\n         https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&token=wefkfjdskfjewfjkjfdfnc&sign=FDK2434JKJFD334FDF2\n\n \n\n其最终的原理是减小明文的暴露次数；保证数据安全的访问。\n\n具体实现如下：\n\n           1. api请求客户端想服务器端一次发送用用户认证信息（用户名和密码），服务器端请求到改请求后，验证用户信息是否正确。\n\n        如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token----Uid的用户信息关系，以便其他api对token的校验。\n\n        如果错误：则返回错误码。\n\n          \n\n            2.服务器设计一个url请求拦截规则\n\n               （1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。\n\n               （2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该                         url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。\n\n               （3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。\n\n               （4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名                       也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样如果无法确保公钥丢失，所以签名只是很大程                       度上保证安全）。\n\n                （5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。\n\n \n\n            3.Token和Uid关系维护\n\n               对于用户登录我们需要创建token--uid的关系，用户退出时需要需删除token--uid的关系。","source":"_posts/app-api-token.md","raw":"---\npost_url: app-api-token\ntitle: App开放接口api安全性—Token签名sign的设计与实现\ndate: 2018-08-14 18:58:00\ntags: 项目\n---\n原文地址：https://blog.csdn.net/fengshizty/article/details/48754609\n前言\n       在app开放接口api的设计中，避免不了的就是安全性问题，因为大多数接口涉及到用户的个人信息以及一些敏感的数据，所以对这些接口需要进行身份的认证，那么这就需要用户提供一些信息，比如用户名密码等，但是为了安全起见让用户暴露的明文密码次数越少越好，我们一般在web项目中，大多数采用保存的session中，然后在存一份到cookie中，来保持用户的回话有效性。但是在app提供的开放接口中，后端服务器在用户登录后如何去验证和维护用户的登陆有效性呢，以下是参考项目中设计的解决方案，其原理和大多数开放接口安全验证一样，如淘宝的开放接口token验证，微信开发平台token验证都是同理。\n\n \n\n签名设计\n     对于敏感的api接口，需使用https协议\n           https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。\n\n           https协议需要ca证书，一般需要交费。\n\n \n\n     签名的设计\n           原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正取，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：\n\n         时间戳：timestamp\n\n         Token令牌：token\n\n         然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。\n\n例如：原请求https://www.andy.cn/api/user/update/info.shtml?city=北京 （post和get都一样，对所有参数排序加密）\n\n 加上时间戳和token\n\n       https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&token=wefkfjdskfjewfjkjfdfnc\n\n      然后更具url参数生成sign\n\n      最终的请求如\n\n         https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&token=wefkfjdskfjewfjkjfdfnc&sign=FDK2434JKJFD334FDF2\n\n \n\n其最终的原理是减小明文的暴露次数；保证数据安全的访问。\n\n具体实现如下：\n\n           1. api请求客户端想服务器端一次发送用用户认证信息（用户名和密码），服务器端请求到改请求后，验证用户信息是否正确。\n\n        如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token----Uid的用户信息关系，以便其他api对token的校验。\n\n        如果错误：则返回错误码。\n\n          \n\n            2.服务器设计一个url请求拦截规则\n\n               （1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。\n\n               （2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该                         url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。\n\n               （3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。\n\n               （4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名                       也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样如果无法确保公钥丢失，所以签名只是很大程                       度上保证安全）。\n\n                （5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。\n\n \n\n            3.Token和Uid关系维护\n\n               对于用户登录我们需要创建token--uid的关系，用户退出时需要需删除token--uid的关系。","slug":"app-api-token","published":1,"updated":"2019-03-25T13:52:24.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtou000w05abygy36837","content":"<p>原文地址：<a href=\"https://blog.csdn.net/fengshizty/article/details/48754609\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fengshizty/article/details/48754609</a><br>前言<br>       在app开放接口api的设计中，避免不了的就是安全性问题，因为大多数接口涉及到用户的个人信息以及一些敏感的数据，所以对这些接口需要进行身份的认证，那么这就需要用户提供一些信息，比如用户名密码等，但是为了安全起见让用户暴露的明文密码次数越少越好，我们一般在web项目中，大多数采用保存的session中，然后在存一份到cookie中，来保持用户的回话有效性。但是在app提供的开放接口中，后端服务器在用户登录后如何去验证和维护用户的登陆有效性呢，以下是参考项目中设计的解决方案，其原理和大多数开放接口安全验证一样，如淘宝的开放接口token验证，微信开发平台token验证都是同理。</p>\n<p>签名设计<br>     对于敏感的api接口，需使用https协议<br>           https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。</p>\n<pre><code>      https协议需要ca证书，一般需要交费。\n\n\n\n签名的设计\n      原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正取，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：\n\n    时间戳：timestamp\n\n    Token令牌：token\n\n    然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。\n</code></pre><p>例如：原请求<a href=\"https://www.andy.cn/api/user/update/info.shtml?city=北京\" target=\"_blank\" rel=\"noopener\">https://www.andy.cn/api/user/update/info.shtml?city=北京</a> （post和get都一样，对所有参数排序加密）</p>\n<p> 加上时间戳和token</p>\n<pre><code> https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&amp;token=wefkfjdskfjewfjkjfdfnc\n\n然后更具url参数生成sign\n\n最终的请求如\n\n   https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&amp;token=wefkfjdskfjewfjkjfdfnc&amp;sign=FDK2434JKJFD334FDF2\n</code></pre><p>其最终的原理是减小明文的暴露次数；保证数据安全的访问。</p>\n<p>具体实现如下：</p>\n<pre><code>   1. api请求客户端想服务器端一次发送用用户认证信息（用户名和密码），服务器端请求到改请求后，验证用户信息是否正确。\n\n如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token----Uid的用户信息关系，以便其他api对token的校验。\n\n如果错误：则返回错误码。\n\n\n\n    2.服务器设计一个url请求拦截规则\n\n       （1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。\n\n       （2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该                         url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。\n\n       （3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。\n\n       （4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名                       也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样如果无法确保公钥丢失，所以签名只是很大程                       度上保证安全）。\n\n        （5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。\n\n\n\n    3.Token和Uid关系维护\n\n       对于用户登录我们需要创建token--uid的关系，用户退出时需要需删除token--uid的关系。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://blog.csdn.net/fengshizty/article/details/48754609\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fengshizty/article/details/48754609</a><br>前言<br>       在app开放接口api的设计中，避免不了的就是安全性问题，因为大多数接口涉及到用户的个人信息以及一些敏感的数据，所以对这些接口需要进行身份的认证，那么这就需要用户提供一些信息，比如用户名密码等，但是为了安全起见让用户暴露的明文密码次数越少越好，我们一般在web项目中，大多数采用保存的session中，然后在存一份到cookie中，来保持用户的回话有效性。但是在app提供的开放接口中，后端服务器在用户登录后如何去验证和维护用户的登陆有效性呢，以下是参考项目中设计的解决方案，其原理和大多数开放接口安全验证一样，如淘宝的开放接口token验证，微信开发平台token验证都是同理。</p>\n<p>签名设计<br>     对于敏感的api接口，需使用https协议<br>           https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。</p>\n<pre><code>      https协议需要ca证书，一般需要交费。\n\n\n\n签名的设计\n      原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正取，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：\n\n    时间戳：timestamp\n\n    Token令牌：token\n\n    然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。\n</code></pre><p>例如：原请求<a href=\"https://www.andy.cn/api/user/update/info.shtml?city=北京\" target=\"_blank\" rel=\"noopener\">https://www.andy.cn/api/user/update/info.shtml?city=北京</a> （post和get都一样，对所有参数排序加密）</p>\n<p> 加上时间戳和token</p>\n<pre><code> https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&amp;token=wefkfjdskfjewfjkjfdfnc\n\n然后更具url参数生成sign\n\n最终的请求如\n\n   https://www.andy.cn/api/user/update/info.shtml?city=北京×tamp=12445323134&amp;token=wefkfjdskfjewfjkjfdfnc&amp;sign=FDK2434JKJFD334FDF2\n</code></pre><p>其最终的原理是减小明文的暴露次数；保证数据安全的访问。</p>\n<p>具体实现如下：</p>\n<pre><code>   1. api请求客户端想服务器端一次发送用用户认证信息（用户名和密码），服务器端请求到改请求后，验证用户信息是否正确。\n\n如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token----Uid的用户信息关系，以便其他api对token的校验。\n\n如果错误：则返回错误码。\n\n\n\n    2.服务器设计一个url请求拦截规则\n\n       （1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。\n\n       （2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该                         url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。\n\n       （3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。\n\n       （4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名                       也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样如果无法确保公钥丢失，所以签名只是很大程                       度上保证安全）。\n\n        （5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。\n\n\n\n    3.Token和Uid关系维护\n\n       对于用户登录我们需要创建token--uid的关系，用户退出时需要需删除token--uid的关系。\n</code></pre>"},{"post_url":"cannot-open-url-please-check-this-url-is-correct","title":"Cannot open url. please check this url is correct","date":"2018-09-25T06:03:34.000Z","_content":"1. 可能是配置 -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1984 有误\n![](/images/20180928100047591.png)\n\n2. 删掉重新加一下\n![](/images/20180925140319547.png)","source":"_posts/cannot-open-url-please-check-this-url-is-correct.md","raw":"---\npost_url: cannot-open-url-please-check-this-url-is-correct\ntitle: Cannot open url. please check this url is correct\ndate: 2018-09-25 14:03:34\ntags: idea\n---\n1. 可能是配置 -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1984 有误\n![](/images/20180928100047591.png)\n\n2. 删掉重新加一下\n![](/images/20180925140319547.png)","slug":"cannot-open-url-please-check-this-url-is-correct","published":1,"updated":"2019-03-25T13:52:47.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtov000y05abwlf3zplt","content":"<ol>\n<li><p>可能是配置 -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1984 有误</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180928100047591.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n<li><p>删掉重新加一下</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180925140319547.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>可能是配置 -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1984 有误</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180928100047591.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n<li><p>删掉重新加一下</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180925140319547.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n</ol>\n"},{"title":"ng不是内部或外部命令，也不是可运行的程序或批处理文件 或 bash:ng:command not found","post_url":"bash-ng-command-not-found","date":"2018-11-22T06:49:13.000Z","_content":"重新以管理员权限运行 npm install -g @angular/cli\n\n如果报错，就先删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录，然后再运行 npm install -g @angular/cli\n\n等安装完成后 ng version 就可以了\n![](/images/20181122191859785.png)","source":"_posts/bash-ng-command-not-found.md","raw":"---\ntitle: ng不是内部或外部命令，也不是可运行的程序或批处理文件 或 bash:ng:command not found\npost_url: bash-ng-command-not-found\ndate: 2018-11-22 14:49:13\ntags: angular\n---\n重新以管理员权限运行 npm install -g @angular/cli\n\n如果报错，就先删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录，然后再运行 npm install -g @angular/cli\n\n等安装完成后 ng version 就可以了\n![](/images/20181122191859785.png)","slug":"bash-ng-command-not-found","published":1,"updated":"2019-03-24T10:08:42.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtov000z05ab7y8z4ss0","content":"<p>重新以管理员权限运行 npm install -g @angular/cli</p>\n<p>如果报错，就先删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录，然后再运行 npm install -g @angular/cli</p>\n<p>等安装完成后 ng version 就可以了<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181122191859785.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>重新以管理员权限运行 npm install -g @angular/cli</p>\n<p>如果报错，就先删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录，然后再运行 npm install -g @angular/cli</p>\n<p>等安装完成后 ng version 就可以了<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181122191859785.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"apache-httpd-apache-proxy","title":"apache httpd 服务实现转发后如偶尔出现 apache proxy 错误","date":"2018-08-13T07:05:51.000Z","_content":"启动服务 service httpd start\n\n重启服务 service httpd restart\n\n停止服务 service httpd stop\n\n使用指定的配置文件启动：/usr/sbin/httpd -k start -f /etc/httpd/conf/httpd_me.conf\n\nhttpd转发实现反向代理：http://blog.51cto.com/5468755/1369911\n\n实现转发后如偶尔出现apache proxy错误，添加如下两个配置项即可解决：\n\n```\n<VirtualHost  *:80>\n\n。。。。。。\n\nSetEnv force-proxy-request-1.0.1\nSetEnv proxy-nokeepalive 1\n\n。。。。。。\n\n</virtualHost>\n```\n\n参考：https://www.aliyun.com/jiaocheng/205214.html\n\n \n\n设置开机启动：chkconfig httpd on\n\n取消开机启动：chkconfig httpd off\n","source":"_posts/apache-httpd-apache-proxy.md","raw":"---\npost_url: apache-httpd-apache-proxy\ntitle: apache httpd 服务实现转发后如偶尔出现 apache proxy 错误\ndate: 2018-08-13 15:05:51\ntags: [apache, httpd]\n---\n启动服务 service httpd start\n\n重启服务 service httpd restart\n\n停止服务 service httpd stop\n\n使用指定的配置文件启动：/usr/sbin/httpd -k start -f /etc/httpd/conf/httpd_me.conf\n\nhttpd转发实现反向代理：http://blog.51cto.com/5468755/1369911\n\n实现转发后如偶尔出现apache proxy错误，添加如下两个配置项即可解决：\n\n```\n<VirtualHost  *:80>\n\n。。。。。。\n\nSetEnv force-proxy-request-1.0.1\nSetEnv proxy-nokeepalive 1\n\n。。。。。。\n\n</virtualHost>\n```\n\n参考：https://www.aliyun.com/jiaocheng/205214.html\n\n \n\n设置开机启动：chkconfig httpd on\n\n取消开机启动：chkconfig httpd off\n","slug":"apache-httpd-apache-proxy","published":1,"updated":"2019-03-25T13:51:19.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtow001005ab8sbqy402","content":"<p>启动服务 service httpd start</p>\n<p>重启服务 service httpd restart</p>\n<p>停止服务 service httpd stop</p>\n<p>使用指定的配置文件启动：/usr/sbin/httpd -k start -f /etc/httpd/conf/httpd_me.conf</p>\n<p>httpd转发实现反向代理：<a href=\"http://blog.51cto.com/5468755/1369911\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/5468755/1369911</a></p>\n<p>实现转发后如偶尔出现apache proxy错误，添加如下两个配置项即可解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost  *:80&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">SetEnv force-proxy-request-1.0.1</span><br><span class=\"line\">SetEnv proxy-nokeepalive 1</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/virtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.aliyun.com/jiaocheng/205214.html\" target=\"_blank\" rel=\"noopener\">https://www.aliyun.com/jiaocheng/205214.html</a></p>\n<p>设置开机启动：chkconfig httpd on</p>\n<p>取消开机启动：chkconfig httpd off</p>\n","site":{"data":{}},"excerpt":"","more":"<p>启动服务 service httpd start</p>\n<p>重启服务 service httpd restart</p>\n<p>停止服务 service httpd stop</p>\n<p>使用指定的配置文件启动：/usr/sbin/httpd -k start -f /etc/httpd/conf/httpd_me.conf</p>\n<p>httpd转发实现反向代理：<a href=\"http://blog.51cto.com/5468755/1369911\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/5468755/1369911</a></p>\n<p>实现转发后如偶尔出现apache proxy错误，添加如下两个配置项即可解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost  *:80&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">SetEnv force-proxy-request-1.0.1</span><br><span class=\"line\">SetEnv proxy-nokeepalive 1</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/virtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.aliyun.com/jiaocheng/205214.html\" target=\"_blank\" rel=\"noopener\">https://www.aliyun.com/jiaocheng/205214.html</a></p>\n<p>设置开机启动：chkconfig httpd on</p>\n<p>取消开机启动：chkconfig httpd off</p>\n"},{"post_url":"centos-install-mysql","title":"Centos 离线安装 MySQL 详细步骤","date":"2018-06-19T10:48:12.000Z","_content":"原文地址：https://blog.csdn.net/nemo____/article/details/72897455\n\n可解决大部分常规安装遇到的问题；\n\n \n\n首先说明下 ：1） Centos7将默认数据库mysql替换成了Mariadb，如果想继续使用mysql 需要卸载Mariadb 再安装mysql\n\n2） mysql 5.7版本的密码问题搞得人很头疼，所以干脆选择mysql5.6了\n\n## 安装MySQL\n\n1. 下载安装包 mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz\n\n下载地址https://dev.mysql.com/downloads/mysql/5.6.html\n\n选择如下选项\n![](/images/20170607105750931.png)\n\n\n下载这个版本：\n![](/images/20170607105812369.png)\n\n2. 卸载系统自带的Mariadb\n\nrpm -qa|grep mariadb         //查询出已安装的mariadb\n\nrpm -e --nodeps 文件名      //卸载,文件名为使用rpm -qa|grep mariadb 命令查出的所有文件\n\n3. 删除etc目录下的my.cnf文件\n\n       rm /etc/my.cnf\n\n4. 执行以下命令来创建mysql用户组\n\ngroupadd mysql\n\n5. 执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组\n\nuseradd -g mysql mysql\n\n6. 将下载的二进制压缩包放到/usr/local/目录下。\n\n7. 解压安装包\n\ntar -zxvfmysql-5.6.36-linux-glibc2.5-x86_64.tar.gz\n\n8. 将解压好的文件夹重命名为mysql\n\n9. 在etc下新建配置文件my.cnf，并在该文件内添加以下代码：\n\n```\n[mysql]\n\n# 设置mysql客户端默认字符集\n\ndefault-character-set=utf8\n\nsocket=/var/lib/mysql/mysql.sock\n\n[mysqld]\n\nskip-name-resolve\n\n#设置3306端口\n\nport=3306\n\nsocket=/var/lib/mysql/mysql.sock\n\n# 设置mysql的安装目录\n\nbasedir=/usr/local/mysql\n\n# 设置mysql数据库的数据的存放目录\n\ndatadir=/usr/local/mysql/data\n\n# 允许最大连接数\n\nmax_connections=200\n\n# 服务端使用的字符集默认为8比特编码的latin1字符集\n\ncharacter-set-server=utf8\n\n# 创建新表时将使用的默认存储引擎\n\ndefault-storage-engine=INNODB\n\nlower_case_table_names=1\n\nmax_allowed_packet=16M\n```\n\n10. 创建步骤9中用到的目录并将其用户设置为mysql\n```\nmkdir /var/lib/mysql\n\nmkdir /var/lib/mysql/mysql\n\nchown -R mysql:mysql /var/lib/mysql\n\nchown -R mysql:mysql /var/lib/mysql/mysql\n```\n11. 进入安装mysql软件目录\n```\ncd /usr/local/mysql\n\nchown -R mysql:mysql ./　　                             #修改当前目录拥有者为mysql用户\n\n./scripts/mysql_install_db --user=mysql         #安装数据库\n\nchown -R mysql:mysql data                              #修改当前data目录拥有者为mysql用户\n\n（错：error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory\n\n可能原因：yum 安装的libnuma.so.1，但安装时默认安装的是32的，但db2需要的是64位的\n\n解决：1.如果已经安装了libnuma.so.1，先yum remove libnuma.so.1\n\n2.yum -y install numactl.x86_64\n\n参考：https://blog.csdn.net/m0_37886429/article/details/78844358）\n```\n到此数据库安装完毕！\n\n \n\n## 配置MySQL\n\n1. 授予my.cnf的最大权限。\n\nchown 777 /etc/my.cnf\n\n设置开机自启动服务控制脚本：\n\n2. 复制启动脚本到资源目录\n\ncp ./support-files/mysql.server /etc/rc.d/init.d/mysqld\n\n3. 增加mysqld服务控制脚本执行权限\n\nchmod +x /etc/rc.d/init.d/mysqld\n\n4. 将mysqld服务加入到系统服务\n\nchkconfig --add mysqld\n\n5. 检查mysqld服务是否已经生效\n\nchkconfig --list mysqld\n\n命令输出类似下面的结果：\n\nmysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off\n\n表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。\n\n6. 启动msql（停止mysqld服务：service mysqld stop）\n\nservice mysqld start\n\n7. 将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件\n\nvi /etc/profile\n\n在文件最后添加如下信息：\n\nexport PATH=$PATH:/usr/local/mysql/bin\n\n执行下面的命令使所做的更改生效：\n\n. /etc/profile\n\n8. 以root账户登陆mysql，默认是没有密码\n\nmysql -u root -p\n\n9. 设置root账户密码 注意下面的you password改成你的要修改的密码\n\n use mysql\n\nupdate user set password=password('you password') where user='root'and host='localhost';\n\n10. 设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码\n\nGRANT ALL PRIVILEGES ON *.* TO'your username'@'%' IDENTIFIED BY 'your password' WITH GRANT OPTION;\n\nFLUSH PRIVILEGES ;","source":"_posts/centos-install-mysql.md","raw":"---\npost_url: centos-install-mysql\ntitle: Centos 离线安装 MySQL 详细步骤\ndate: 2018-06-19 18:48:12\ntags: mysql\n---\n原文地址：https://blog.csdn.net/nemo____/article/details/72897455\n\n可解决大部分常规安装遇到的问题；\n\n \n\n首先说明下 ：1） Centos7将默认数据库mysql替换成了Mariadb，如果想继续使用mysql 需要卸载Mariadb 再安装mysql\n\n2） mysql 5.7版本的密码问题搞得人很头疼，所以干脆选择mysql5.6了\n\n## 安装MySQL\n\n1. 下载安装包 mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz\n\n下载地址https://dev.mysql.com/downloads/mysql/5.6.html\n\n选择如下选项\n![](/images/20170607105750931.png)\n\n\n下载这个版本：\n![](/images/20170607105812369.png)\n\n2. 卸载系统自带的Mariadb\n\nrpm -qa|grep mariadb         //查询出已安装的mariadb\n\nrpm -e --nodeps 文件名      //卸载,文件名为使用rpm -qa|grep mariadb 命令查出的所有文件\n\n3. 删除etc目录下的my.cnf文件\n\n       rm /etc/my.cnf\n\n4. 执行以下命令来创建mysql用户组\n\ngroupadd mysql\n\n5. 执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组\n\nuseradd -g mysql mysql\n\n6. 将下载的二进制压缩包放到/usr/local/目录下。\n\n7. 解压安装包\n\ntar -zxvfmysql-5.6.36-linux-glibc2.5-x86_64.tar.gz\n\n8. 将解压好的文件夹重命名为mysql\n\n9. 在etc下新建配置文件my.cnf，并在该文件内添加以下代码：\n\n```\n[mysql]\n\n# 设置mysql客户端默认字符集\n\ndefault-character-set=utf8\n\nsocket=/var/lib/mysql/mysql.sock\n\n[mysqld]\n\nskip-name-resolve\n\n#设置3306端口\n\nport=3306\n\nsocket=/var/lib/mysql/mysql.sock\n\n# 设置mysql的安装目录\n\nbasedir=/usr/local/mysql\n\n# 设置mysql数据库的数据的存放目录\n\ndatadir=/usr/local/mysql/data\n\n# 允许最大连接数\n\nmax_connections=200\n\n# 服务端使用的字符集默认为8比特编码的latin1字符集\n\ncharacter-set-server=utf8\n\n# 创建新表时将使用的默认存储引擎\n\ndefault-storage-engine=INNODB\n\nlower_case_table_names=1\n\nmax_allowed_packet=16M\n```\n\n10. 创建步骤9中用到的目录并将其用户设置为mysql\n```\nmkdir /var/lib/mysql\n\nmkdir /var/lib/mysql/mysql\n\nchown -R mysql:mysql /var/lib/mysql\n\nchown -R mysql:mysql /var/lib/mysql/mysql\n```\n11. 进入安装mysql软件目录\n```\ncd /usr/local/mysql\n\nchown -R mysql:mysql ./　　                             #修改当前目录拥有者为mysql用户\n\n./scripts/mysql_install_db --user=mysql         #安装数据库\n\nchown -R mysql:mysql data                              #修改当前data目录拥有者为mysql用户\n\n（错：error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory\n\n可能原因：yum 安装的libnuma.so.1，但安装时默认安装的是32的，但db2需要的是64位的\n\n解决：1.如果已经安装了libnuma.so.1，先yum remove libnuma.so.1\n\n2.yum -y install numactl.x86_64\n\n参考：https://blog.csdn.net/m0_37886429/article/details/78844358）\n```\n到此数据库安装完毕！\n\n \n\n## 配置MySQL\n\n1. 授予my.cnf的最大权限。\n\nchown 777 /etc/my.cnf\n\n设置开机自启动服务控制脚本：\n\n2. 复制启动脚本到资源目录\n\ncp ./support-files/mysql.server /etc/rc.d/init.d/mysqld\n\n3. 增加mysqld服务控制脚本执行权限\n\nchmod +x /etc/rc.d/init.d/mysqld\n\n4. 将mysqld服务加入到系统服务\n\nchkconfig --add mysqld\n\n5. 检查mysqld服务是否已经生效\n\nchkconfig --list mysqld\n\n命令输出类似下面的结果：\n\nmysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off\n\n表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。\n\n6. 启动msql（停止mysqld服务：service mysqld stop）\n\nservice mysqld start\n\n7. 将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件\n\nvi /etc/profile\n\n在文件最后添加如下信息：\n\nexport PATH=$PATH:/usr/local/mysql/bin\n\n执行下面的命令使所做的更改生效：\n\n. /etc/profile\n\n8. 以root账户登陆mysql，默认是没有密码\n\nmysql -u root -p\n\n9. 设置root账户密码 注意下面的you password改成你的要修改的密码\n\n use mysql\n\nupdate user set password=password('you password') where user='root'and host='localhost';\n\n10. 设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码\n\nGRANT ALL PRIVILEGES ON *.* TO'your username'@'%' IDENTIFIED BY 'your password' WITH GRANT OPTION;\n\nFLUSH PRIVILEGES ;","slug":"centos-install-mysql","published":1,"updated":"2019-03-24T13:22:04.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtox001305abap8j79sq","content":"<p>原文地址：<a href=\"https://blog.csdn.net/nemo____/article/details/72897455\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/nemo____/article/details/72897455</a></p>\n<p>可解决大部分常规安装遇到的问题；</p>\n<p>首先说明下 ：1） Centos7将默认数据库mysql替换成了Mariadb，如果想继续使用mysql 需要卸载Mariadb 再安装mysql</p>\n<p>2） mysql 5.7版本的密码问题搞得人很头疼，所以干脆选择mysql5.6了</p>\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><ol>\n<li>下载安装包 mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</li>\n</ol>\n<p>下载地址<a href=\"https://dev.mysql.com/downloads/mysql/5.6.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/5.6.html</a></p>\n<p>选择如下选项<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20170607105750931.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>下载这个版本：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20170607105812369.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"2\">\n<li>卸载系统自带的Mariadb</li>\n</ol>\n<p>rpm -qa|grep mariadb         //查询出已安装的mariadb</p>\n<p>rpm -e –nodeps 文件名      //卸载,文件名为使用rpm -qa|grep mariadb 命令查出的所有文件</p>\n<ol start=\"3\">\n<li><p>删除etc目录下的my.cnf文件</p>\n<pre><code>rm /etc/my.cnf\n</code></pre></li>\n<li><p>执行以下命令来创建mysql用户组</p>\n</li>\n</ol>\n<p>groupadd mysql</p>\n<ol start=\"5\">\n<li>执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组</li>\n</ol>\n<p>useradd -g mysql mysql</p>\n<ol start=\"6\">\n<li><p>将下载的二进制压缩包放到/usr/local/目录下。</p>\n</li>\n<li><p>解压安装包</p>\n</li>\n</ol>\n<p>tar -zxvfmysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</p>\n<ol start=\"8\">\n<li><p>将解压好的文件夹重命名为mysql</p>\n</li>\n<li><p>在etc下新建配置文件my.cnf，并在该文件内添加以下代码：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"></span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"></span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"></span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\"></span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"></span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"></span><br><span class=\"line\">lower_case_table_names=1</span><br><span class=\"line\"></span><br><span class=\"line\">max_allowed_packet=16M</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><p>创建步骤9中用到的目录并将其用户设置为mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /var/lib/mysql/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql /var/lib/mysql/mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入安装mysql软件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql ./　　                             #修改当前目录拥有者为mysql用户</span><br><span class=\"line\"></span><br><span class=\"line\">./scripts/mysql_install_db --user=mysql         #安装数据库</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql data                              #修改当前data目录拥有者为mysql用户</span><br><span class=\"line\"></span><br><span class=\"line\">（错：error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\">可能原因：yum 安装的libnuma.so.1，但安装时默认安装的是32的，但db2需要的是64位的</span><br><span class=\"line\"></span><br><span class=\"line\">解决：1.如果已经安装了libnuma.so.1，先yum remove libnuma.so.1</span><br><span class=\"line\"></span><br><span class=\"line\">2.yum -y install numactl.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://blog.csdn.net/m0_37886429/article/details/78844358）</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到此数据库安装完毕！</p>\n<h2 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h2><ol>\n<li>授予my.cnf的最大权限。</li>\n</ol>\n<p>chown 777 /etc/my.cnf</p>\n<p>设置开机自启动服务控制脚本：</p>\n<ol start=\"2\">\n<li>复制启动脚本到资源目录</li>\n</ol>\n<p>cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</p>\n<ol start=\"3\">\n<li>增加mysqld服务控制脚本执行权限</li>\n</ol>\n<p>chmod +x /etc/rc.d/init.d/mysqld</p>\n<ol start=\"4\">\n<li>将mysqld服务加入到系统服务</li>\n</ol>\n<p>chkconfig –add mysqld</p>\n<ol start=\"5\">\n<li>检查mysqld服务是否已经生效</li>\n</ol>\n<p>chkconfig –list mysqld</p>\n<p>命令输出类似下面的结果：</p>\n<p>mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</p>\n<p>表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。</p>\n<ol start=\"6\">\n<li>启动msql（停止mysqld服务：service mysqld stop）</li>\n</ol>\n<p>service mysqld start</p>\n<ol start=\"7\">\n<li>将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件</li>\n</ol>\n<p>vi /etc/profile</p>\n<p>在文件最后添加如下信息：</p>\n<p>export PATH=$PATH:/usr/local/mysql/bin</p>\n<p>执行下面的命令使所做的更改生效：</p>\n<p>. /etc/profile</p>\n<ol start=\"8\">\n<li>以root账户登陆mysql，默认是没有密码</li>\n</ol>\n<p>mysql -u root -p</p>\n<ol start=\"9\">\n<li><p>设置root账户密码 注意下面的you password改成你的要修改的密码</p>\n<p>use mysql</p>\n</li>\n</ol>\n<p>update user set password=password(‘you password’) where user=’root’and host=’localhost’;</p>\n<ol start=\"10\">\n<li>设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码</li>\n</ol>\n<p>GRANT ALL PRIVILEGES ON <em>.</em> TO’your username‘@’%’ IDENTIFIED BY ‘your password’ WITH GRANT OPTION;</p>\n<p>FLUSH PRIVILEGES ;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://blog.csdn.net/nemo____/article/details/72897455\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/nemo____/article/details/72897455</a></p>\n<p>可解决大部分常规安装遇到的问题；</p>\n<p>首先说明下 ：1） Centos7将默认数据库mysql替换成了Mariadb，如果想继续使用mysql 需要卸载Mariadb 再安装mysql</p>\n<p>2） mysql 5.7版本的密码问题搞得人很头疼，所以干脆选择mysql5.6了</p>\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><ol>\n<li>下载安装包 mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</li>\n</ol>\n<p>下载地址<a href=\"https://dev.mysql.com/downloads/mysql/5.6.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/5.6.html</a></p>\n<p>选择如下选项<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20170607105750931.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>下载这个版本：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20170607105812369.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"2\">\n<li>卸载系统自带的Mariadb</li>\n</ol>\n<p>rpm -qa|grep mariadb         //查询出已安装的mariadb</p>\n<p>rpm -e –nodeps 文件名      //卸载,文件名为使用rpm -qa|grep mariadb 命令查出的所有文件</p>\n<ol start=\"3\">\n<li><p>删除etc目录下的my.cnf文件</p>\n<pre><code>rm /etc/my.cnf\n</code></pre></li>\n<li><p>执行以下命令来创建mysql用户组</p>\n</li>\n</ol>\n<p>groupadd mysql</p>\n<ol start=\"5\">\n<li>执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组</li>\n</ol>\n<p>useradd -g mysql mysql</p>\n<ol start=\"6\">\n<li><p>将下载的二进制压缩包放到/usr/local/目录下。</p>\n</li>\n<li><p>解压安装包</p>\n</li>\n</ol>\n<p>tar -zxvfmysql-5.6.36-linux-glibc2.5-x86_64.tar.gz</p>\n<ol start=\"8\">\n<li><p>将解压好的文件夹重命名为mysql</p>\n</li>\n<li><p>在etc下新建配置文件my.cnf，并在该文件内添加以下代码：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"></span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/usr/local/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"></span><br><span class=\"line\">datadir=/usr/local/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"></span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\"></span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"></span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"></span><br><span class=\"line\">lower_case_table_names=1</span><br><span class=\"line\"></span><br><span class=\"line\">max_allowed_packet=16M</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><p>创建步骤9中用到的目录并将其用户设置为mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /var/lib/mysql/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql /var/lib/mysql/mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入安装mysql软件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql ./　　                             #修改当前目录拥有者为mysql用户</span><br><span class=\"line\"></span><br><span class=\"line\">./scripts/mysql_install_db --user=mysql         #安装数据库</span><br><span class=\"line\"></span><br><span class=\"line\">chown -R mysql:mysql data                              #修改当前data目录拥有者为mysql用户</span><br><span class=\"line\"></span><br><span class=\"line\">（错：error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\">可能原因：yum 安装的libnuma.so.1，但安装时默认安装的是32的，但db2需要的是64位的</span><br><span class=\"line\"></span><br><span class=\"line\">解决：1.如果已经安装了libnuma.so.1，先yum remove libnuma.so.1</span><br><span class=\"line\"></span><br><span class=\"line\">2.yum -y install numactl.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://blog.csdn.net/m0_37886429/article/details/78844358）</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到此数据库安装完毕！</p>\n<h2 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h2><ol>\n<li>授予my.cnf的最大权限。</li>\n</ol>\n<p>chown 777 /etc/my.cnf</p>\n<p>设置开机自启动服务控制脚本：</p>\n<ol start=\"2\">\n<li>复制启动脚本到资源目录</li>\n</ol>\n<p>cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</p>\n<ol start=\"3\">\n<li>增加mysqld服务控制脚本执行权限</li>\n</ol>\n<p>chmod +x /etc/rc.d/init.d/mysqld</p>\n<ol start=\"4\">\n<li>将mysqld服务加入到系统服务</li>\n</ol>\n<p>chkconfig –add mysqld</p>\n<ol start=\"5\">\n<li>检查mysqld服务是否已经生效</li>\n</ol>\n<p>chkconfig –list mysqld</p>\n<p>命令输出类似下面的结果：</p>\n<p>mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</p>\n<p>表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。</p>\n<ol start=\"6\">\n<li>启动msql（停止mysqld服务：service mysqld stop）</li>\n</ol>\n<p>service mysqld start</p>\n<ol start=\"7\">\n<li>将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件</li>\n</ol>\n<p>vi /etc/profile</p>\n<p>在文件最后添加如下信息：</p>\n<p>export PATH=$PATH:/usr/local/mysql/bin</p>\n<p>执行下面的命令使所做的更改生效：</p>\n<p>. /etc/profile</p>\n<ol start=\"8\">\n<li>以root账户登陆mysql，默认是没有密码</li>\n</ol>\n<p>mysql -u root -p</p>\n<ol start=\"9\">\n<li><p>设置root账户密码 注意下面的you password改成你的要修改的密码</p>\n<p>use mysql</p>\n</li>\n</ol>\n<p>update user set password=password(‘you password’) where user=’root’and host=’localhost’;</p>\n<ol start=\"10\">\n<li>设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码</li>\n</ol>\n<p>GRANT ALL PRIVILEGES ON <em>.</em> TO’your username‘@’%’ IDENTIFIED BY ‘your password’ WITH GRANT OPTION;</p>\n<p>FLUSH PRIVILEGES ;</p>\n"},{"post_url":"could-NOT-be-bound","title":"Angular4配置host后执行ng serve报Provided host a.api.***.com could NOT be bound...","date":"2017-12-06T07:31:10.000Z","_content":"问题：Angular4在schema.json中配置host后执行ng serve报\n\nProvided host aaa.com could NOT be bound. Please provide a different host address or hostname\n\n解决：修改系统host，加入127.0.0.1 aaa.com\n","source":"_posts/could-NOT-be-bound.md","raw":"---\npost_url: could-NOT-be-bound\ntitle: Angular4配置host后执行ng serve报Provided host a.api.***.com could NOT be bound...\ndate: 2017-12-06 15:31:10\ntags: angular\n---\n问题：Angular4在schema.json中配置host后执行ng serve报\n\nProvided host aaa.com could NOT be bound. Please provide a different host address or hostname\n\n解决：修改系统host，加入127.0.0.1 aaa.com\n","slug":"could-NOT-be-bound","published":1,"updated":"2019-03-25T13:53:07.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoy001505abes0ncevk","content":"<p>问题：Angular4在schema.json中配置host后执行ng serve报</p>\n<p>Provided host aaa.com could NOT be bound. Please provide a different host address or hostname</p>\n<p>解决：修改系统host，加入127.0.0.1 aaa.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：Angular4在schema.json中配置host后执行ng serve报</p>\n<p>Provided host aaa.com could NOT be bound. Please provide a different host address or hostname</p>\n<p>解决：修改系统host，加入127.0.0.1 aaa.com</p>\n"},{"post_url":"centos-notes","title":"CentOS 防火墙、端口、端口转发、selinux、Windows 端口","date":"2018-11-20T13:28:30.000Z","_content":"## 防火墙基础操作\n1) 重启后生效 \n开启： chkconfig iptables on \n关闭： chkconfig iptables off \n2) 即时生效，重启后失效 \n开启： service iptables start \n关闭： service iptables stop \n参考：https://zhidao.baidu.com/question/303901938543294164.html\n3）开放特定端口\n方法1：查看状态：iptables -L -n\n下面添加对特定端口开放的方法：\n使用iptables开放如下端口：/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT\n保存：/etc/rc.d/init.d/iptables save\n重启服务：service iptables restart\n查看需要打开的端口是否生效：/etc/init.d/iptables status\n方法2：直接编辑/etc/sysconfig/iptables\n添加：-A INPUT -p tcp -m tcp --dport 6379 -j ACCEPT\n\n重启：service iptables restart\n\n \n\n4）如果CentOS7，service iptables stop 时显示not loaded\n\n可能是用的firewalld\n\n停止firewalld，并禁用这个服务\n\nsudo systemctl stop firewalld.service\n\nsudo systemctl disable firewalld.service\n\n启动firewalld：sudo systemctl start firewalld.service\n\n参考：https://blog.csdn.net/yelllowcong/article/details/75945339\n\n其他firewalld开放指定端口及相关操作：\n\nfirewall-cmd --zone=public --add-port=2377/tcp --permanent\n\n \n\nfirewall-cmd --reload\n\n参考：https://blog.csdn.net/u012498149/article/details/78772058\n\n \n\n## 端口管理\n(部署集群时可以将其写在sh脚本里执行)\n禁用指定端口：iptables -I INPUT -p tcp --dport 6379 -j DROP\n对指定ip开启指定端口：iptables -I INPUT -s 192.168.1.10 -p tcp --dport 6379 -j ACCEPT\n命令开启80端口：iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n配置文件开启80端口：修改/etc/sysconfig/iptables文件，添加-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n参考：http://blog.csdn.net/zhouyufengqingyang/article/details/51737254\n\n\n## 关闭 selinux\n修改/etc/selinux/config 文件\n将SELINUX=enforcing改为SELINUX=disabled\n重启\n参考：http://bguncle.blog.51cto.com/3184079/957315/\n \n\n \n\n## 通过防火墙配置实现 端口映射、端口转发\n\n打开 ipv4 端口转发\n\nsysctl net.ipv4.ip_forward=1\n\n配置端口映射（例：该机器公网ip:8080转到192.168.0.122:80，其中192.168.0.62为该机器的内网ip）\niptables -A INPUT -p tcp --dport 8080 -j ACCEPT\niptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 192.168.0.122:80\n\niptables -t nat -A POSTROUTING -d 192.168.0.122 -p tcp --dport 80 -j SNAT --to 192.168.0.62\n\n参考：http://man.linuxde.net/iptables\n\n \n\n## linux查看端口占用\n\n1) lsof -i:端口号\n\n2) netstat -tunlp | grep 端口号\n\n参考：https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html\n\n \n\n## Windows关闭端口方法\nnetstat -ano | findstr :4200\nTaskKill.exe /F /PID 12784\n参考地址：https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use\n","source":"_posts/centos-notes.md","raw":"---\npost_url: centos-notes\ntitle: CentOS 防火墙、端口、端口转发、selinux、Windows 端口\ndate: 2018-11-20 21:28:30\ntags: linux\n---\n## 防火墙基础操作\n1) 重启后生效 \n开启： chkconfig iptables on \n关闭： chkconfig iptables off \n2) 即时生效，重启后失效 \n开启： service iptables start \n关闭： service iptables stop \n参考：https://zhidao.baidu.com/question/303901938543294164.html\n3）开放特定端口\n方法1：查看状态：iptables -L -n\n下面添加对特定端口开放的方法：\n使用iptables开放如下端口：/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT\n保存：/etc/rc.d/init.d/iptables save\n重启服务：service iptables restart\n查看需要打开的端口是否生效：/etc/init.d/iptables status\n方法2：直接编辑/etc/sysconfig/iptables\n添加：-A INPUT -p tcp -m tcp --dport 6379 -j ACCEPT\n\n重启：service iptables restart\n\n \n\n4）如果CentOS7，service iptables stop 时显示not loaded\n\n可能是用的firewalld\n\n停止firewalld，并禁用这个服务\n\nsudo systemctl stop firewalld.service\n\nsudo systemctl disable firewalld.service\n\n启动firewalld：sudo systemctl start firewalld.service\n\n参考：https://blog.csdn.net/yelllowcong/article/details/75945339\n\n其他firewalld开放指定端口及相关操作：\n\nfirewall-cmd --zone=public --add-port=2377/tcp --permanent\n\n \n\nfirewall-cmd --reload\n\n参考：https://blog.csdn.net/u012498149/article/details/78772058\n\n \n\n## 端口管理\n(部署集群时可以将其写在sh脚本里执行)\n禁用指定端口：iptables -I INPUT -p tcp --dport 6379 -j DROP\n对指定ip开启指定端口：iptables -I INPUT -s 192.168.1.10 -p tcp --dport 6379 -j ACCEPT\n命令开启80端口：iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n配置文件开启80端口：修改/etc/sysconfig/iptables文件，添加-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n参考：http://blog.csdn.net/zhouyufengqingyang/article/details/51737254\n\n\n## 关闭 selinux\n修改/etc/selinux/config 文件\n将SELINUX=enforcing改为SELINUX=disabled\n重启\n参考：http://bguncle.blog.51cto.com/3184079/957315/\n \n\n \n\n## 通过防火墙配置实现 端口映射、端口转发\n\n打开 ipv4 端口转发\n\nsysctl net.ipv4.ip_forward=1\n\n配置端口映射（例：该机器公网ip:8080转到192.168.0.122:80，其中192.168.0.62为该机器的内网ip）\niptables -A INPUT -p tcp --dport 8080 -j ACCEPT\niptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 192.168.0.122:80\n\niptables -t nat -A POSTROUTING -d 192.168.0.122 -p tcp --dport 80 -j SNAT --to 192.168.0.62\n\n参考：http://man.linuxde.net/iptables\n\n \n\n## linux查看端口占用\n\n1) lsof -i:端口号\n\n2) netstat -tunlp | grep 端口号\n\n参考：https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html\n\n \n\n## Windows关闭端口方法\nnetstat -ano | findstr :4200\nTaskKill.exe /F /PID 12784\n参考地址：https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use\n","slug":"centos-notes","published":1,"updated":"2019-03-25T13:52:58.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtoz001705abgeqy3s92","content":"<h2 id=\"防火墙基础操作\"><a href=\"#防火墙基础操作\" class=\"headerlink\" title=\"防火墙基础操作\"></a>防火墙基础操作</h2><p>1) 重启后生效<br>开启： chkconfig iptables on<br>关闭： chkconfig iptables off<br>2) 即时生效，重启后失效<br>开启： service iptables start<br>关闭： service iptables stop<br>参考：<a href=\"https://zhidao.baidu.com/question/303901938543294164.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/303901938543294164.html</a><br>3）开放特定端口<br>方法1：查看状态：iptables -L -n<br>下面添加对特定端口开放的方法：<br>使用iptables开放如下端口：/sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT<br>保存：/etc/rc.d/init.d/iptables save<br>重启服务：service iptables restart<br>查看需要打开的端口是否生效：/etc/init.d/iptables status<br>方法2：直接编辑/etc/sysconfig/iptables<br>添加：-A INPUT -p tcp -m tcp –dport 6379 -j ACCEPT</p>\n<p>重启：service iptables restart</p>\n<p>4）如果CentOS7，service iptables stop 时显示not loaded</p>\n<p>可能是用的firewalld</p>\n<p>停止firewalld，并禁用这个服务</p>\n<p>sudo systemctl stop firewalld.service</p>\n<p>sudo systemctl disable firewalld.service</p>\n<p>启动firewalld：sudo systemctl start firewalld.service</p>\n<p>参考：<a href=\"https://blog.csdn.net/yelllowcong/article/details/75945339\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yelllowcong/article/details/75945339</a></p>\n<p>其他firewalld开放指定端口及相关操作：</p>\n<p>firewall-cmd –zone=public –add-port=2377/tcp –permanent</p>\n<p>firewall-cmd –reload</p>\n<p>参考：<a href=\"https://blog.csdn.net/u012498149/article/details/78772058\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012498149/article/details/78772058</a></p>\n<h2 id=\"端口管理\"><a href=\"#端口管理\" class=\"headerlink\" title=\"端口管理\"></a>端口管理</h2><p>(部署集群时可以将其写在sh脚本里执行)<br>禁用指定端口：iptables -I INPUT -p tcp –dport 6379 -j DROP<br>对指定ip开启指定端口：iptables -I INPUT -s 192.168.1.10 -p tcp –dport 6379 -j ACCEPT<br>命令开启80端口：iptables -I INPUT -p tcp –dport 80 -j ACCEPT<br>配置文件开启80端口：修改/etc/sysconfig/iptables文件，添加-A INPUT -p tcp -m state –state NEW -m tcp –dport 80 -j ACCEPT<br>参考：<a href=\"http://blog.csdn.net/zhouyufengqingyang/article/details/51737254\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhouyufengqingyang/article/details/51737254</a></p>\n<h2 id=\"关闭-selinux\"><a href=\"#关闭-selinux\" class=\"headerlink\" title=\"关闭 selinux\"></a>关闭 selinux</h2><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启<br>参考：<a href=\"http://bguncle.blog.51cto.com/3184079/957315/\" target=\"_blank\" rel=\"noopener\">http://bguncle.blog.51cto.com/3184079/957315/</a></p>\n<h2 id=\"通过防火墙配置实现-端口映射、端口转发\"><a href=\"#通过防火墙配置实现-端口映射、端口转发\" class=\"headerlink\" title=\"通过防火墙配置实现 端口映射、端口转发\"></a>通过防火墙配置实现 端口映射、端口转发</h2><p>打开 ipv4 端口转发</p>\n<p>sysctl net.ipv4.ip_forward=1</p>\n<p>配置端口映射（例：该机器公网ip:8080转到192.168.0.122:80，其中192.168.0.62为该机器的内网ip）<br>iptables -A INPUT -p tcp –dport 8080 -j ACCEPT<br>iptables -t nat -A PREROUTING -p tcp –dport 8080 -j DNAT –to-destination 192.168.0.122:80</p>\n<p>iptables -t nat -A POSTROUTING -d 192.168.0.122 -p tcp –dport 80 -j SNAT –to 192.168.0.62</p>\n<p>参考：<a href=\"http://man.linuxde.net/iptables\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/iptables</a></p>\n<h2 id=\"linux查看端口占用\"><a href=\"#linux查看端口占用\" class=\"headerlink\" title=\"linux查看端口占用\"></a>linux查看端口占用</h2><p>1) lsof -i:端口号</p>\n<p>2) netstat -tunlp | grep 端口号</p>\n<p>参考：<a href=\"https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html</a></p>\n<h2 id=\"Windows关闭端口方法\"><a href=\"#Windows关闭端口方法\" class=\"headerlink\" title=\"Windows关闭端口方法\"></a>Windows关闭端口方法</h2><p>netstat -ano | findstr :4200<br>TaskKill.exe /F /PID 12784<br>参考地址：<a href=\"https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防火墙基础操作\"><a href=\"#防火墙基础操作\" class=\"headerlink\" title=\"防火墙基础操作\"></a>防火墙基础操作</h2><p>1) 重启后生效<br>开启： chkconfig iptables on<br>关闭： chkconfig iptables off<br>2) 即时生效，重启后失效<br>开启： service iptables start<br>关闭： service iptables stop<br>参考：<a href=\"https://zhidao.baidu.com/question/303901938543294164.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/303901938543294164.html</a><br>3）开放特定端口<br>方法1：查看状态：iptables -L -n<br>下面添加对特定端口开放的方法：<br>使用iptables开放如下端口：/sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT<br>保存：/etc/rc.d/init.d/iptables save<br>重启服务：service iptables restart<br>查看需要打开的端口是否生效：/etc/init.d/iptables status<br>方法2：直接编辑/etc/sysconfig/iptables<br>添加：-A INPUT -p tcp -m tcp –dport 6379 -j ACCEPT</p>\n<p>重启：service iptables restart</p>\n<p>4）如果CentOS7，service iptables stop 时显示not loaded</p>\n<p>可能是用的firewalld</p>\n<p>停止firewalld，并禁用这个服务</p>\n<p>sudo systemctl stop firewalld.service</p>\n<p>sudo systemctl disable firewalld.service</p>\n<p>启动firewalld：sudo systemctl start firewalld.service</p>\n<p>参考：<a href=\"https://blog.csdn.net/yelllowcong/article/details/75945339\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yelllowcong/article/details/75945339</a></p>\n<p>其他firewalld开放指定端口及相关操作：</p>\n<p>firewall-cmd –zone=public –add-port=2377/tcp –permanent</p>\n<p>firewall-cmd –reload</p>\n<p>参考：<a href=\"https://blog.csdn.net/u012498149/article/details/78772058\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012498149/article/details/78772058</a></p>\n<h2 id=\"端口管理\"><a href=\"#端口管理\" class=\"headerlink\" title=\"端口管理\"></a>端口管理</h2><p>(部署集群时可以将其写在sh脚本里执行)<br>禁用指定端口：iptables -I INPUT -p tcp –dport 6379 -j DROP<br>对指定ip开启指定端口：iptables -I INPUT -s 192.168.1.10 -p tcp –dport 6379 -j ACCEPT<br>命令开启80端口：iptables -I INPUT -p tcp –dport 80 -j ACCEPT<br>配置文件开启80端口：修改/etc/sysconfig/iptables文件，添加-A INPUT -p tcp -m state –state NEW -m tcp –dport 80 -j ACCEPT<br>参考：<a href=\"http://blog.csdn.net/zhouyufengqingyang/article/details/51737254\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhouyufengqingyang/article/details/51737254</a></p>\n<h2 id=\"关闭-selinux\"><a href=\"#关闭-selinux\" class=\"headerlink\" title=\"关闭 selinux\"></a>关闭 selinux</h2><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启<br>参考：<a href=\"http://bguncle.blog.51cto.com/3184079/957315/\" target=\"_blank\" rel=\"noopener\">http://bguncle.blog.51cto.com/3184079/957315/</a></p>\n<h2 id=\"通过防火墙配置实现-端口映射、端口转发\"><a href=\"#通过防火墙配置实现-端口映射、端口转发\" class=\"headerlink\" title=\"通过防火墙配置实现 端口映射、端口转发\"></a>通过防火墙配置实现 端口映射、端口转发</h2><p>打开 ipv4 端口转发</p>\n<p>sysctl net.ipv4.ip_forward=1</p>\n<p>配置端口映射（例：该机器公网ip:8080转到192.168.0.122:80，其中192.168.0.62为该机器的内网ip）<br>iptables -A INPUT -p tcp –dport 8080 -j ACCEPT<br>iptables -t nat -A PREROUTING -p tcp –dport 8080 -j DNAT –to-destination 192.168.0.122:80</p>\n<p>iptables -t nat -A POSTROUTING -d 192.168.0.122 -p tcp –dport 80 -j SNAT –to 192.168.0.62</p>\n<p>参考：<a href=\"http://man.linuxde.net/iptables\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/iptables</a></p>\n<h2 id=\"linux查看端口占用\"><a href=\"#linux查看端口占用\" class=\"headerlink\" title=\"linux查看端口占用\"></a>linux查看端口占用</h2><p>1) lsof -i:端口号</p>\n<p>2) netstat -tunlp | grep 端口号</p>\n<p>参考：<a href=\"https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/546ae1853947b71149f28cb7.html</a></p>\n<h2 id=\"Windows关闭端口方法\"><a href=\"#Windows关闭端口方法\" class=\"headerlink\" title=\"Windows关闭端口方法\"></a>Windows关闭端口方法</h2><p>netstat -ano | findstr :4200<br>TaskKill.exe /F /PID 12784<br>参考地址：<a href=\"https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/38586364/ember-s-port-4200-is-already-in-use</a></p>\n"},{"post_url":"data-normalization","title":"矩阵数据归一化 java 实现","date":"2018-08-07T03:42:43.000Z","_content":"概念参考：https://blog.csdn.net/zbc1090549839/article/details/44103801\n\n## 线性归一化 \n公式：X(norm) = (X - min) / (max - min)\n```java\n    /**\n     * 线性归一化 公式：X(norm) = (X - min) / (max - min)\n     *\n     * @param points 原始数据\n     * @return 归一化后的数据\n     */\n    public static double[][] normalize4Scale(double[][] points) {\n        if (points == null || points.length < 1) {\n            return points;\n        }\n        double[][] p = new double[points.length][points[0].length];\n        double[] matrixJ;\n        double maxV;\n        double minV;\n        for (int j = 0; j < points[0].length; j++) {\n            matrixJ = getMatrixCol(points, j);\n            maxV = maxV(matrixJ);\n            minV = minV(matrixJ);\n            for (int i = 0; i < points.length; i++) {\n                p[i][j] = maxV == minV ? minV : (points[i][j] - minV) / (maxV - minV);\n            }\n        }\n        return p;\n    }\n \n    /**\n     * 获取矩阵的某一列\n     *\n     * @param points points\n     * @param column column\n     * @return double[]\n     */\n    public static double[] getMatrixCol(double[][] points, int column) {\n        double[] matrixJ = new double[points.length];\n        for (int i = 0; i < points.length; i++) {\n            matrixJ[i] = points[i][column];\n        }\n        return matrixJ;\n    }\n \n    /**\n     * 获取数组中的最小值\n     *\n     * @param matrixJ matrixJ\n     * @return v\n     */\n    public static double minV(double[] matrixJ) {\n        double v = matrixJ[0];\n        for (int i = 0; i < matrixJ.length; i++) {\n            if (matrixJ[i] < v) {\n                v = matrixJ[i];\n            }\n        }\n        return v;\n    }\n \n    /**\n     * 获取数组中的最大值\n     *\n     * @param matrixJ matrixJ\n     * @return v\n     */\n    public static double maxV(double[] matrixJ) {\n        double v = matrixJ[0];\n        for (int i = 0; i < matrixJ.length; i++) {\n            if (matrixJ[i] > v) {\n                v = matrixJ[i];\n            }\n        }\n        return v;\n    }\n```\n\n## 0均值\\标准差归一化 \n公式：X(norm) = (X - μ) / σ = (X - 均值) / 标准差\n```java\n    /**\n     * 0均值\\标准差归一化 公式：X(norm) = (X - μ) / σ\n     * X(norm) = (X - 均值) / 标准差\n     *\n     * @param points 原始数据\n     * @return 归一化后的数据\n     */\n    public static double[][] normalize4ZScore(double[][] points) {\n        if (points == null || points.length < 1) {\n            return points;\n        }\n        double[][] p = new double[points.length][points[0].length];\n        double[] matrixJ;\n        double avg;\n        double std;\n        for (int j = 0; j < points[0].length; j++) {\n            matrixJ = getMatrixCol(points, j);\n            avg = average(matrixJ);\n            std = standardDeviation(matrixJ);\n            for (int i = 0; i < points.length; i++) {\n                p[i][j] = std == 0 ? points[i][j] : (points[i][j] - avg) / std;\n            }\n        }\n        return p;\n    }\n \n    /**\n     * 方差s^2=[(x1-x)^2 +...(xn-x)^2]/n\n     *\n     * @param x x\n     * @return 方差\n     */\n    public static double variance(double[] x) {\n        int m = x.length;\n        double sum = 0;\n        for (int i = 0; i < m; i++) {//求和\n            sum += x[i];\n        }\n        double dAve = sum / m;//求平均值\n        double dVar = 0;\n        for (int i = 0; i < m; i++) {//求方差\n            dVar += (x[i] - dAve) * (x[i] - dAve);\n        }\n        return dVar / m;\n    }\n \n    /**\n     * 标准差σ=sqrt(s^2)\n     *\n     * @param x x\n     * @return 标准差\n     */\n    public static double standardDeviation(double[] x) {\n        return Math.sqrt(variance(x));\n    }\n \n    /**\n     * 平均值\n     *\n     * @param x x\n     * @return 平均值\n     */\n    public static double average(double[] x) {\n        int m = x.length;\n        double sum = 0;\n        for (int i = 0; i < m; i++) {\n            sum += x[i];\n        }\n        double dAve = sum / m;\n        return dAve;\n    }\n```\n\n## 调用\n```java\n    public static void main(String[] args) {\n        double[][] points = {{2, 5, 7}, {3, 1, 5}, {0, 27, 11}, {109, 6, 1}};\n        double[][] p1 = normalize4Scale(points);\n        double[][] p2 = normalize4ZScore(points);\n    }\n```","source":"_posts/data-normalization.md","raw":"---\npost_url: data-normalization\ntitle: 矩阵数据归一化 java 实现\ndate: 2018-08-07 11:42:43\ntags: [算法, java]\n---\n概念参考：https://blog.csdn.net/zbc1090549839/article/details/44103801\n\n## 线性归一化 \n公式：X(norm) = (X - min) / (max - min)\n```java\n    /**\n     * 线性归一化 公式：X(norm) = (X - min) / (max - min)\n     *\n     * @param points 原始数据\n     * @return 归一化后的数据\n     */\n    public static double[][] normalize4Scale(double[][] points) {\n        if (points == null || points.length < 1) {\n            return points;\n        }\n        double[][] p = new double[points.length][points[0].length];\n        double[] matrixJ;\n        double maxV;\n        double minV;\n        for (int j = 0; j < points[0].length; j++) {\n            matrixJ = getMatrixCol(points, j);\n            maxV = maxV(matrixJ);\n            minV = minV(matrixJ);\n            for (int i = 0; i < points.length; i++) {\n                p[i][j] = maxV == minV ? minV : (points[i][j] - minV) / (maxV - minV);\n            }\n        }\n        return p;\n    }\n \n    /**\n     * 获取矩阵的某一列\n     *\n     * @param points points\n     * @param column column\n     * @return double[]\n     */\n    public static double[] getMatrixCol(double[][] points, int column) {\n        double[] matrixJ = new double[points.length];\n        for (int i = 0; i < points.length; i++) {\n            matrixJ[i] = points[i][column];\n        }\n        return matrixJ;\n    }\n \n    /**\n     * 获取数组中的最小值\n     *\n     * @param matrixJ matrixJ\n     * @return v\n     */\n    public static double minV(double[] matrixJ) {\n        double v = matrixJ[0];\n        for (int i = 0; i < matrixJ.length; i++) {\n            if (matrixJ[i] < v) {\n                v = matrixJ[i];\n            }\n        }\n        return v;\n    }\n \n    /**\n     * 获取数组中的最大值\n     *\n     * @param matrixJ matrixJ\n     * @return v\n     */\n    public static double maxV(double[] matrixJ) {\n        double v = matrixJ[0];\n        for (int i = 0; i < matrixJ.length; i++) {\n            if (matrixJ[i] > v) {\n                v = matrixJ[i];\n            }\n        }\n        return v;\n    }\n```\n\n## 0均值\\标准差归一化 \n公式：X(norm) = (X - μ) / σ = (X - 均值) / 标准差\n```java\n    /**\n     * 0均值\\标准差归一化 公式：X(norm) = (X - μ) / σ\n     * X(norm) = (X - 均值) / 标准差\n     *\n     * @param points 原始数据\n     * @return 归一化后的数据\n     */\n    public static double[][] normalize4ZScore(double[][] points) {\n        if (points == null || points.length < 1) {\n            return points;\n        }\n        double[][] p = new double[points.length][points[0].length];\n        double[] matrixJ;\n        double avg;\n        double std;\n        for (int j = 0; j < points[0].length; j++) {\n            matrixJ = getMatrixCol(points, j);\n            avg = average(matrixJ);\n            std = standardDeviation(matrixJ);\n            for (int i = 0; i < points.length; i++) {\n                p[i][j] = std == 0 ? points[i][j] : (points[i][j] - avg) / std;\n            }\n        }\n        return p;\n    }\n \n    /**\n     * 方差s^2=[(x1-x)^2 +...(xn-x)^2]/n\n     *\n     * @param x x\n     * @return 方差\n     */\n    public static double variance(double[] x) {\n        int m = x.length;\n        double sum = 0;\n        for (int i = 0; i < m; i++) {//求和\n            sum += x[i];\n        }\n        double dAve = sum / m;//求平均值\n        double dVar = 0;\n        for (int i = 0; i < m; i++) {//求方差\n            dVar += (x[i] - dAve) * (x[i] - dAve);\n        }\n        return dVar / m;\n    }\n \n    /**\n     * 标准差σ=sqrt(s^2)\n     *\n     * @param x x\n     * @return 标准差\n     */\n    public static double standardDeviation(double[] x) {\n        return Math.sqrt(variance(x));\n    }\n \n    /**\n     * 平均值\n     *\n     * @param x x\n     * @return 平均值\n     */\n    public static double average(double[] x) {\n        int m = x.length;\n        double sum = 0;\n        for (int i = 0; i < m; i++) {\n            sum += x[i];\n        }\n        double dAve = sum / m;\n        return dAve;\n    }\n```\n\n## 调用\n```java\n    public static void main(String[] args) {\n        double[][] points = {{2, 5, 7}, {3, 1, 5}, {0, 27, 11}, {109, 6, 1}};\n        double[][] p1 = normalize4Scale(points);\n        double[][] p2 = normalize4ZScore(points);\n    }\n```","slug":"data-normalization","published":1,"updated":"2019-03-25T13:53:20.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp2001905abu6fez2vn","content":"<p>概念参考：<a href=\"https://blog.csdn.net/zbc1090549839/article/details/44103801\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zbc1090549839/article/details/44103801</a></p>\n<h2 id=\"线性归一化\"><a href=\"#线性归一化\" class=\"headerlink\" title=\"线性归一化\"></a>线性归一化</h2><p>公式：X(norm) = (X - min) / (max - min)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线性归一化 公式：X(norm) = (X - min) / (max - min)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points 原始数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 归一化后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[][] normalize4Scale(<span class=\"keyword\">double</span>[][] points) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points == <span class=\"keyword\">null</span> || points.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length][points[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> maxV;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> minV;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; points[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        matrixJ = getMatrixCol(points, j);</span><br><span class=\"line\">        maxV = maxV(matrixJ);</span><br><span class=\"line\">        minV = minV(matrixJ);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">            p[i][j] = maxV == minV ? minV : (points[i][j] - minV) / (maxV - minV);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取矩阵的某一列</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points points</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> column column</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> double[]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[] getMatrixCol(<span class=\"keyword\">double</span>[][] points, <span class=\"keyword\">int</span> column) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">        matrixJ[i] = points[i][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrixJ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取数组中的最小值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrixJ matrixJ</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> v</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">minV</span><span class=\"params\">(<span class=\"keyword\">double</span>[] matrixJ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> v = matrixJ[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixJ.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrixJ[i] &lt; v) &#123;</span><br><span class=\"line\">            v = matrixJ[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取数组中的最大值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrixJ matrixJ</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> v</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">maxV</span><span class=\"params\">(<span class=\"keyword\">double</span>[] matrixJ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> v = matrixJ[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixJ.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrixJ[i] &gt; v) &#123;</span><br><span class=\"line\">            v = matrixJ[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"0均值-标准差归一化\"><a href=\"#0均值-标准差归一化\" class=\"headerlink\" title=\"0均值\\标准差归一化\"></a>0均值\\标准差归一化</h2><p>公式：X(norm) = (X - μ) / σ = (X - 均值) / 标准差<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 0均值\\标准差归一化 公式：X(norm) = (X - μ) / σ</span></span><br><span class=\"line\"><span class=\"comment\"> * X(norm) = (X - 均值) / 标准差</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points 原始数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 归一化后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[][] normalize4ZScore(<span class=\"keyword\">double</span>[][] points) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points == <span class=\"keyword\">null</span> || points.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length][points[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> avg;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> std;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; points[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        matrixJ = getMatrixCol(points, j);</span><br><span class=\"line\">        avg = average(matrixJ);</span><br><span class=\"line\">        std = standardDeviation(matrixJ);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">            p[i][j] = std == <span class=\"number\">0</span> ? points[i][j] : (points[i][j] - avg) / std;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方差s^2=[(x1-x)^2 +...(xn-x)^2]/n</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 方差</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">variance</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = x.length;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;<span class=\"comment\">//求和</span></span><br><span class=\"line\">        sum += x[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> dAve = sum / m;<span class=\"comment\">//求平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> dVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;<span class=\"comment\">//求方差</span></span><br><span class=\"line\">        dVar += (x[i] - dAve) * (x[i] - dAve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dVar / m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 标准差σ=sqrt(s^2)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 标准差</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">standardDeviation</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.sqrt(variance(x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 平均值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 平均值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">average</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = x.length;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        sum += x[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> dAve = sum / m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dAve;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] points = &#123;&#123;<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">27</span>, <span class=\"number\">11</span>&#125;, &#123;<span class=\"number\">109</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p1 = normalize4Scale(points);</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p2 = normalize4ZScore(points);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>概念参考：<a href=\"https://blog.csdn.net/zbc1090549839/article/details/44103801\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zbc1090549839/article/details/44103801</a></p>\n<h2 id=\"线性归一化\"><a href=\"#线性归一化\" class=\"headerlink\" title=\"线性归一化\"></a>线性归一化</h2><p>公式：X(norm) = (X - min) / (max - min)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线性归一化 公式：X(norm) = (X - min) / (max - min)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points 原始数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 归一化后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[][] normalize4Scale(<span class=\"keyword\">double</span>[][] points) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points == <span class=\"keyword\">null</span> || points.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length][points[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> maxV;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> minV;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; points[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        matrixJ = getMatrixCol(points, j);</span><br><span class=\"line\">        maxV = maxV(matrixJ);</span><br><span class=\"line\">        minV = minV(matrixJ);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">            p[i][j] = maxV == minV ? minV : (points[i][j] - minV) / (maxV - minV);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取矩阵的某一列</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points points</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> column column</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> double[]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[] getMatrixCol(<span class=\"keyword\">double</span>[][] points, <span class=\"keyword\">int</span> column) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">        matrixJ[i] = points[i][column];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrixJ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取数组中的最小值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrixJ matrixJ</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> v</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">minV</span><span class=\"params\">(<span class=\"keyword\">double</span>[] matrixJ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> v = matrixJ[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixJ.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrixJ[i] &lt; v) &#123;</span><br><span class=\"line\">            v = matrixJ[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取数组中的最大值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> matrixJ matrixJ</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> v</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">maxV</span><span class=\"params\">(<span class=\"keyword\">double</span>[] matrixJ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> v = matrixJ[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixJ.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrixJ[i] &gt; v) &#123;</span><br><span class=\"line\">            v = matrixJ[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"0均值-标准差归一化\"><a href=\"#0均值-标准差归一化\" class=\"headerlink\" title=\"0均值\\标准差归一化\"></a>0均值\\标准差归一化</h2><p>公式：X(norm) = (X - μ) / σ = (X - 均值) / 标准差<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 0均值\\标准差归一化 公式：X(norm) = (X - μ) / σ</span></span><br><span class=\"line\"><span class=\"comment\"> * X(norm) = (X - 均值) / 标准差</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> points 原始数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 归一化后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span>[][] normalize4ZScore(<span class=\"keyword\">double</span>[][] points) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (points == <span class=\"keyword\">null</span> || points.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[points.length][points[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[] matrixJ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> avg;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> std;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; points[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">        matrixJ = getMatrixCol(points, j);</span><br><span class=\"line\">        avg = average(matrixJ);</span><br><span class=\"line\">        std = standardDeviation(matrixJ);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.length; i++) &#123;</span><br><span class=\"line\">            p[i][j] = std == <span class=\"number\">0</span> ? points[i][j] : (points[i][j] - avg) / std;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方差s^2=[(x1-x)^2 +...(xn-x)^2]/n</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 方差</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">variance</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = x.length;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;<span class=\"comment\">//求和</span></span><br><span class=\"line\">        sum += x[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> dAve = sum / m;<span class=\"comment\">//求平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> dVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;<span class=\"comment\">//求方差</span></span><br><span class=\"line\">        dVar += (x[i] - dAve) * (x[i] - dAve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dVar / m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 标准差σ=sqrt(s^2)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 标准差</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">standardDeviation</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.sqrt(variance(x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 平均值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x x</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 平均值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">average</span><span class=\"params\">(<span class=\"keyword\">double</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = x.length;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        sum += x[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> dAve = sum / m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dAve;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] points = &#123;&#123;<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">27</span>, <span class=\"number\">11</span>&#125;, &#123;<span class=\"number\">109</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p1 = normalize4Scale(points);</span><br><span class=\"line\">    <span class=\"keyword\">double</span>[][] p2 = normalize4ZScore(points);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"docker-compose 迁移部署 wordpress 站点、创建自定义网络、设置容器为静态 ip","post_url":"docker-compose-move-wordpress","date":"2018-12-02T12:46:12.000Z","_content":"附：nginx1.15.7 + php7.0.33 + php-fpm + alpine3.7 镜像已完成：https://blog.csdn.net/iaiot/article/details/8481419\n\n因为一个 wordpress 容器里同时有移动站和 pc 站，并且是通过二级域名区分的，所以只能配置了自定义网络，在 nginx 容器里配置 host 这样了。\n\n由于站点代码本身问题，迁移到 docker 有很多地方需要调（https 访问站点资源等）。下一步直接做一个 nginx + php 的镜像（wordpress 整体挂载到宿主机），这样就和之前原生的云服务器一样了，后续迁移站点，部署什么的就方便多了。\n```yml\nversion: '3.1'\n \nservices:\n \n  nginx:\n    image: nginx:1.15.7\n    container_name: \"nginx_container\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    extra_hosts:\n      - \"www.vhxsl.com:10.10.10.12\"\n      - \"m.vhxsl.com:10.10.10.12\"\n    volumes:\n      - /data/nginx/html:/usr/share/nginx/html\n      - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /data/nginx/conf/conf.d:/etc/nginx/conf.d\n      - /data/nginx/conf/cert:/etc/nginx/cert\n      - /data/nginx/logs:/var/log/nginx\n    restart: always\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.11\n \n  wordpress:\n    image: wordpress:4.9.8\n    container_name: \"wordpress_container\"\n    volumes:\n      - /data/wordpress/html:/var/www/html\n    depends_on:\n      - mysql\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: mysql\n      WORDPRESS_DB_USER: haojiliang\n      WORDPRESS_DB_PASSWORD: m*Hzq32R\n      WORDPRESS_DB_NAME: vhxsl\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.12\n \n  mysql:\n    image: mysql:5.7.24\n    container_name: \"mysql_container\"\n    volumes:\n      - /data/mysql/data:/var/lib/mysql\n      - /data/mysql/conf:/etc/mysql/conf.d\n      - /data/mysql/logs:/data/mysql/logs\n    restart: always\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: ZMQ$qEPoAGovOM2I\n      MYSQL_DATABASE: vhxsl\n      MYSQL_USER: haojiliang\n      MYSQL_PASSWORD: m*Hzq32R\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.13\n \nnetworks:\n  hx_net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 10.10.10.0/16\n```\n\n## docker 网络常用命令：\n\n创建：docker network create --subnet=10.10.10.0/16 mynet\n\n查看：docker network ls\n\n删除所有无用网络：docker network prune\n\n删除指定网络：docker network rm mynet\n\n## 常见问题：\n\n如果报 ERROR: Pool overlaps with other one on this address space，自定义网络用的网段和其他 docker 网络冲突了，删除冲突的网络或改用新网段即可。\n\n## 官方 compose 文档：\n\nhttps://docs.docker.com/compose/compose-file/#networks\n\n## 附 nginx 中 www.vhxsl.com.conf 部分的配置：\n```conf\nserver {\n    listen 443 ssl;\n    server_name www.vhxsl.com vhxsl.com;\n    access_log /var/log/nginx/www.vhxsl.com_nginx.log combined;\n    # 原生服务器部署的配置\n    #root /data/wwwroot/wordpress;\n    #index index.html index.htm index.php;\n    #include /usr/local/nginx/conf/rewrite/wordpress.conf;\n \n    ssl_certificate   /etc/nginx/cert/www.vhxsl.com.pem;\n    ssl_certificate_key  /etc/nginx/cert/www.vhxsl.com.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n \n    #error_page 404 = /404.html;\n    #error_page 502 = /502.html;\n\t\n    if ( $http_user_agent ~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n        rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;\n    }\n \n    # 按上述方式迁移到 docker 后，这里通过 http 导致后台代码返回的资源地址也是 http，到浏览器就被拦截了。。。\n    # 所以为适配代码，后续改用自制的 nginx + php 镜像部署\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://www.vhxsl.com;\n    }\n \n    location ~ [^/]\\.php(/|$) {\n        #fastcgi_pass remote_php_ip:9000;\n        fastcgi_pass unix:/dev/shm/php-cgi.sock;\n        fastcgi_index index.php;\n        include conf.d/fastcgi.conf;\n    }\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n        expires 30d;\n        access_log off;\n    }\n    location ~ .*\\.(js|css)?$ {\n        expires 7d;\n        access_log off;\n    }\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n \nserver {\n    listen 80;\n    server_name www.vhxsl.com vhxsl.com;\n \n    rewrite ^(.*)$  https://$host$1 permanent;\n}\n```","source":"_posts/docker-compose-move-wordpress.md","raw":"---\ntitle: docker-compose 迁移部署 wordpress 站点、创建自定义网络、设置容器为静态 ip\npost_url: docker-compose-move-wordpress\ndate: 2018-12-02 20:46:12\ntags: [docker, wordpress]\n---\n附：nginx1.15.7 + php7.0.33 + php-fpm + alpine3.7 镜像已完成：https://blog.csdn.net/iaiot/article/details/8481419\n\n因为一个 wordpress 容器里同时有移动站和 pc 站，并且是通过二级域名区分的，所以只能配置了自定义网络，在 nginx 容器里配置 host 这样了。\n\n由于站点代码本身问题，迁移到 docker 有很多地方需要调（https 访问站点资源等）。下一步直接做一个 nginx + php 的镜像（wordpress 整体挂载到宿主机），这样就和之前原生的云服务器一样了，后续迁移站点，部署什么的就方便多了。\n```yml\nversion: '3.1'\n \nservices:\n \n  nginx:\n    image: nginx:1.15.7\n    container_name: \"nginx_container\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    extra_hosts:\n      - \"www.vhxsl.com:10.10.10.12\"\n      - \"m.vhxsl.com:10.10.10.12\"\n    volumes:\n      - /data/nginx/html:/usr/share/nginx/html\n      - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /data/nginx/conf/conf.d:/etc/nginx/conf.d\n      - /data/nginx/conf/cert:/etc/nginx/cert\n      - /data/nginx/logs:/var/log/nginx\n    restart: always\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.11\n \n  wordpress:\n    image: wordpress:4.9.8\n    container_name: \"wordpress_container\"\n    volumes:\n      - /data/wordpress/html:/var/www/html\n    depends_on:\n      - mysql\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: mysql\n      WORDPRESS_DB_USER: haojiliang\n      WORDPRESS_DB_PASSWORD: m*Hzq32R\n      WORDPRESS_DB_NAME: vhxsl\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.12\n \n  mysql:\n    image: mysql:5.7.24\n    container_name: \"mysql_container\"\n    volumes:\n      - /data/mysql/data:/var/lib/mysql\n      - /data/mysql/conf:/etc/mysql/conf.d\n      - /data/mysql/logs:/data/mysql/logs\n    restart: always\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: ZMQ$qEPoAGovOM2I\n      MYSQL_DATABASE: vhxsl\n      MYSQL_USER: haojiliang\n      MYSQL_PASSWORD: m*Hzq32R\n    networks:\n      hx_net:\n        ipv4_address: 10.10.10.13\n \nnetworks:\n  hx_net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 10.10.10.0/16\n```\n\n## docker 网络常用命令：\n\n创建：docker network create --subnet=10.10.10.0/16 mynet\n\n查看：docker network ls\n\n删除所有无用网络：docker network prune\n\n删除指定网络：docker network rm mynet\n\n## 常见问题：\n\n如果报 ERROR: Pool overlaps with other one on this address space，自定义网络用的网段和其他 docker 网络冲突了，删除冲突的网络或改用新网段即可。\n\n## 官方 compose 文档：\n\nhttps://docs.docker.com/compose/compose-file/#networks\n\n## 附 nginx 中 www.vhxsl.com.conf 部分的配置：\n```conf\nserver {\n    listen 443 ssl;\n    server_name www.vhxsl.com vhxsl.com;\n    access_log /var/log/nginx/www.vhxsl.com_nginx.log combined;\n    # 原生服务器部署的配置\n    #root /data/wwwroot/wordpress;\n    #index index.html index.htm index.php;\n    #include /usr/local/nginx/conf/rewrite/wordpress.conf;\n \n    ssl_certificate   /etc/nginx/cert/www.vhxsl.com.pem;\n    ssl_certificate_key  /etc/nginx/cert/www.vhxsl.com.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n \n    #error_page 404 = /404.html;\n    #error_page 502 = /502.html;\n\t\n    if ( $http_user_agent ~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n        rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;\n    }\n \n    # 按上述方式迁移到 docker 后，这里通过 http 导致后台代码返回的资源地址也是 http，到浏览器就被拦截了。。。\n    # 所以为适配代码，后续改用自制的 nginx + php 镜像部署\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://www.vhxsl.com;\n    }\n \n    location ~ [^/]\\.php(/|$) {\n        #fastcgi_pass remote_php_ip:9000;\n        fastcgi_pass unix:/dev/shm/php-cgi.sock;\n        fastcgi_index index.php;\n        include conf.d/fastcgi.conf;\n    }\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n        expires 30d;\n        access_log off;\n    }\n    location ~ .*\\.(js|css)?$ {\n        expires 7d;\n        access_log off;\n    }\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n \nserver {\n    listen 80;\n    server_name www.vhxsl.com vhxsl.com;\n \n    rewrite ^(.*)$  https://$host$1 permanent;\n}\n```","slug":"docker-compose-move-wordpress","published":1,"updated":"2019-03-25T13:53:51.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp4001b05abtjp03e68","content":"<p>附：nginx1.15.7 + php7.0.33 + php-fpm + alpine3.7 镜像已完成：<a href=\"https://blog.csdn.net/iaiot/article/details/8481419\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/8481419</a></p>\n<p>因为一个 wordpress 容器里同时有移动站和 pc 站，并且是通过二级域名区分的，所以只能配置了自定义网络，在 nginx 容器里配置 host 这样了。</p>\n<p>由于站点代码本身问题，迁移到 docker 有很多地方需要调（https 访问站点资源等）。下一步直接做一个 nginx + php 的镜像（wordpress 整体挂载到宿主机），这样就和之前原生的云服务器一样了，后续迁移站点，部署什么的就方便多了。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  nginx:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">nginx:1.15.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"nginx_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"443:443\"</span></span><br><span class=\"line\"><span class=\"attr\">    extra_hosts:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"www.vhxsl.com:10.10.10.12\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"m.vhxsl.com:10.10.10.12\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/cert:/etc/nginx/cert</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.11</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  wordpress:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">wordpress:4.9.8</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"wordpress_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/wordpress/html:/var/www/html</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_HOST:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_USER:</span> <span class=\"string\">haojiliang</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_PASSWORD:</span> <span class=\"string\">m*Hzq32R</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_NAME:</span> <span class=\"string\">vhxsl</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.12</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.24</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"mysql_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/data:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/conf:/etc/mysql/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/logs:/data/mysql/logs</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3306:3306\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">ZMQ$qEPoAGovOM2I</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_DATABASE:</span> <span class=\"string\">vhxsl</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_USER:</span> <span class=\"string\">haojiliang</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_PASSWORD:</span> <span class=\"string\">m*Hzq32R</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.13</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"><span class=\"attr\">    ipam:</span></span><br><span class=\"line\"><span class=\"attr\">      config:</span></span><br><span class=\"line\"><span class=\"attr\">        - subnet:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-网络常用命令：\"><a href=\"#docker-网络常用命令：\" class=\"headerlink\" title=\"docker 网络常用命令：\"></a>docker 网络常用命令：</h2><p>创建：docker network create –subnet=10.10.10.0/16 mynet</p>\n<p>查看：docker network ls</p>\n<p>删除所有无用网络：docker network prune</p>\n<p>删除指定网络：docker network rm mynet</p>\n<h2 id=\"常见问题：\"><a href=\"#常见问题：\" class=\"headerlink\" title=\"常见问题：\"></a>常见问题：</h2><p>如果报 ERROR: Pool overlaps with other one on this address space，自定义网络用的网段和其他 docker 网络冲突了，删除冲突的网络或改用新网段即可。</p>\n<h2 id=\"官方-compose-文档：\"><a href=\"#官方-compose-文档：\" class=\"headerlink\" title=\"官方 compose 文档：\"></a>官方 compose 文档：</h2><p><a href=\"https://docs.docker.com/compose/compose-file/#networks\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/compose-file/#networks</a></p>\n<h2 id=\"附-nginx-中-www-vhxsl-com-conf-部分的配置：\"><a href=\"#附-nginx-中-www-vhxsl-com-conf-部分的配置：\" class=\"headerlink\" title=\"附 nginx 中 www.vhxsl.com.conf 部分的配置：\"></a>附 nginx 中 <a href=\"http://www.vhxsl.com.conf\" target=\"_blank\" rel=\"noopener\">www.vhxsl.com.conf</a> 部分的配置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.vhxsl.com vhxsl.com;</span><br><span class=\"line\">    access_log /var/log/nginx/www.vhxsl.com_nginx.log combined;</span><br><span class=\"line\">    # 原生服务器部署的配置</span><br><span class=\"line\">    #root /data/wwwroot/wordpress;</span><br><span class=\"line\">    #index index.html index.htm index.php;</span><br><span class=\"line\">    #include /usr/local/nginx/conf/rewrite/wordpress.conf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ssl_certificate   /etc/nginx/cert/www.vhxsl.com.pem;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/cert/www.vhxsl.com.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #error_page 404 = /404.html;</span><br><span class=\"line\">    #error_page 502 = /502.html;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    if ( $http_user_agent ~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">        rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # 按上述方式迁移到 docker 后，这里通过 http 导致后台代码返回的资源地址也是 http，到浏览器就被拦截了。。。</span><br><span class=\"line\">    # 所以为适配代码，后续改用自制的 nginx + php 镜像部署</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://www.vhxsl.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">        #fastcgi_pass remote_php_ip:9000;</span><br><span class=\"line\">        fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include conf.d/fastcgi.conf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(js|css)?$ &#123;</span><br><span class=\"line\">        expires 7d;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.vhxsl.com vhxsl.com;</span><br><span class=\"line\"> </span><br><span class=\"line\">    rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>附：nginx1.15.7 + php7.0.33 + php-fpm + alpine3.7 镜像已完成：<a href=\"https://blog.csdn.net/iaiot/article/details/8481419\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/8481419</a></p>\n<p>因为一个 wordpress 容器里同时有移动站和 pc 站，并且是通过二级域名区分的，所以只能配置了自定义网络，在 nginx 容器里配置 host 这样了。</p>\n<p>由于站点代码本身问题，迁移到 docker 有很多地方需要调（https 访问站点资源等）。下一步直接做一个 nginx + php 的镜像（wordpress 整体挂载到宿主机），这样就和之前原生的云服务器一样了，后续迁移站点，部署什么的就方便多了。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  nginx:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">nginx:1.15.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"nginx_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"443:443\"</span></span><br><span class=\"line\"><span class=\"attr\">    extra_hosts:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"www.vhxsl.com:10.10.10.12\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"m.vhxsl.com:10.10.10.12\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/cert:/etc/nginx/cert</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.11</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  wordpress:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">wordpress:4.9.8</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"wordpress_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/wordpress/html:/var/www/html</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_HOST:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_USER:</span> <span class=\"string\">haojiliang</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_PASSWORD:</span> <span class=\"string\">m*Hzq32R</span></span><br><span class=\"line\"><span class=\"attr\">      WORDPRESS_DB_NAME:</span> <span class=\"string\">vhxsl</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.12</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.24</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"mysql_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/data:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/conf:/etc/mysql/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/logs:/data/mysql/logs</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3306:3306\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">ZMQ$qEPoAGovOM2I</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_DATABASE:</span> <span class=\"string\">vhxsl</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_USER:</span> <span class=\"string\">haojiliang</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_PASSWORD:</span> <span class=\"string\">m*Hzq32R</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.13</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"><span class=\"attr\">    ipam:</span></span><br><span class=\"line\"><span class=\"attr\">      config:</span></span><br><span class=\"line\"><span class=\"attr\">        - subnet:</span> <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"docker-网络常用命令：\"><a href=\"#docker-网络常用命令：\" class=\"headerlink\" title=\"docker 网络常用命令：\"></a>docker 网络常用命令：</h2><p>创建：docker network create –subnet=10.10.10.0/16 mynet</p>\n<p>查看：docker network ls</p>\n<p>删除所有无用网络：docker network prune</p>\n<p>删除指定网络：docker network rm mynet</p>\n<h2 id=\"常见问题：\"><a href=\"#常见问题：\" class=\"headerlink\" title=\"常见问题：\"></a>常见问题：</h2><p>如果报 ERROR: Pool overlaps with other one on this address space，自定义网络用的网段和其他 docker 网络冲突了，删除冲突的网络或改用新网段即可。</p>\n<h2 id=\"官方-compose-文档：\"><a href=\"#官方-compose-文档：\" class=\"headerlink\" title=\"官方 compose 文档：\"></a>官方 compose 文档：</h2><p><a href=\"https://docs.docker.com/compose/compose-file/#networks\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/compose-file/#networks</a></p>\n<h2 id=\"附-nginx-中-www-vhxsl-com-conf-部分的配置：\"><a href=\"#附-nginx-中-www-vhxsl-com-conf-部分的配置：\" class=\"headerlink\" title=\"附 nginx 中 www.vhxsl.com.conf 部分的配置：\"></a>附 nginx 中 <a href=\"http://www.vhxsl.com.conf\" target=\"_blank\" rel=\"noopener\">www.vhxsl.com.conf</a> 部分的配置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.vhxsl.com vhxsl.com;</span><br><span class=\"line\">    access_log /var/log/nginx/www.vhxsl.com_nginx.log combined;</span><br><span class=\"line\">    # 原生服务器部署的配置</span><br><span class=\"line\">    #root /data/wwwroot/wordpress;</span><br><span class=\"line\">    #index index.html index.htm index.php;</span><br><span class=\"line\">    #include /usr/local/nginx/conf/rewrite/wordpress.conf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ssl_certificate   /etc/nginx/cert/www.vhxsl.com.pem;</span><br><span class=\"line\">    ssl_certificate_key  /etc/nginx/cert/www.vhxsl.com.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #error_page 404 = /404.html;</span><br><span class=\"line\">    #error_page 502 = /502.html;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    if ( $http_user_agent ~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">        rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # 按上述方式迁移到 docker 后，这里通过 http 导致后台代码返回的资源地址也是 http，到浏览器就被拦截了。。。</span><br><span class=\"line\">    # 所以为适配代码，后续改用自制的 nginx + php 镜像部署</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://www.vhxsl.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">        #fastcgi_pass remote_php_ip:9000;</span><br><span class=\"line\">        fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include conf.d/fastcgi.conf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(js|css)?$ &#123;</span><br><span class=\"line\">        expires 7d;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.vhxsl.com vhxsl.com;</span><br><span class=\"line\"> </span><br><span class=\"line\">    rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"post_url":"docker-compose-custom-network","title":"docker-compose 配置自定义网络和静态 ip 示例","date":"2018-12-13T15:29:18.000Z","_content":"\n\n```yml\nversion: '3.1'\n \nservices:\n \n  web:\n    image: haojiliang/nginx-php-fpm-alpine:v1.15.7\n    container_name: \"web_container\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    extra_hosts:\n      - \"www.vhxsl.com:127.0.0.1\"\n      - \"m.vhxsl.com:127.0.0.1\"\n    volumes:\n      - /data/nginx/html/wordpress:/data/www/wordpress\n      - /data/nginx/html/default:/usr/share/nginx/html\n      - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /data/nginx/conf/conf.d:/etc/nginx/conf.d\n      - /data/nginx/conf/cert:/etc/nginx/cert\n      - /data/nginx/logs:/var/log/nginx\n    depends_on:\n      - mysql\n    restart: always\n    networks:\n      hx_net:\n        ipv4_address: 11.11.11.11\n \n  mysql:\n    image: mysql:5.7.24\n    container_name: \"mysql_container\"\n    volumes:\n      - /data/mysql/data:/var/lib/mysql\n      - /data/mysql/conf:/etc/mysql/conf.d\n      - /data/mysql/logs:/data/mysql/logs\n    restart: always\n    ports:\n      - \"3306:3306\"\n    networks:\n      hx_net:\n        ipv4_address: 11.11.11.12\n \nnetworks:\n  hx_net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 11.11.11.0/16\n```","source":"_posts/docker-compose-custom-network.md","raw":"---\npost_url: docker-compose-custom-network\ntitle: docker-compose 配置自定义网络和静态 ip 示例\ndate: 2018-12-13 23:29:18\ntags: docker\n---\n\n\n```yml\nversion: '3.1'\n \nservices:\n \n  web:\n    image: haojiliang/nginx-php-fpm-alpine:v1.15.7\n    container_name: \"web_container\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    extra_hosts:\n      - \"www.vhxsl.com:127.0.0.1\"\n      - \"m.vhxsl.com:127.0.0.1\"\n    volumes:\n      - /data/nginx/html/wordpress:/data/www/wordpress\n      - /data/nginx/html/default:/usr/share/nginx/html\n      - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /data/nginx/conf/conf.d:/etc/nginx/conf.d\n      - /data/nginx/conf/cert:/etc/nginx/cert\n      - /data/nginx/logs:/var/log/nginx\n    depends_on:\n      - mysql\n    restart: always\n    networks:\n      hx_net:\n        ipv4_address: 11.11.11.11\n \n  mysql:\n    image: mysql:5.7.24\n    container_name: \"mysql_container\"\n    volumes:\n      - /data/mysql/data:/var/lib/mysql\n      - /data/mysql/conf:/etc/mysql/conf.d\n      - /data/mysql/logs:/data/mysql/logs\n    restart: always\n    ports:\n      - \"3306:3306\"\n    networks:\n      hx_net:\n        ipv4_address: 11.11.11.12\n \nnetworks:\n  hx_net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 11.11.11.0/16\n```","slug":"docker-compose-custom-network","published":1,"updated":"2019-03-25T13:53:37.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp4001d05abgewnjmyi","content":"<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">haojiliang/nginx-php-fpm-alpine:v1.15.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"web_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"443:443\"</span></span><br><span class=\"line\"><span class=\"attr\">    extra_hosts:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"www.vhxsl.com:127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"m.vhxsl.com:127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html/wordpress:/data/www/wordpress</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html/default:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/cert:/etc/nginx/cert</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.11</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.24</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"mysql_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/data:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/conf:/etc/mysql/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/logs:/data/mysql/logs</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3306:3306\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.12</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"><span class=\"attr\">    ipam:</span></span><br><span class=\"line\"><span class=\"attr\">      config:</span></span><br><span class=\"line\"><span class=\"attr\">        - subnet:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  web:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">haojiliang/nginx-php-fpm-alpine:v1.15.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"web_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"443:443\"</span></span><br><span class=\"line\"><span class=\"attr\">    extra_hosts:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"www.vhxsl.com:127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"m.vhxsl.com:127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html/wordpress:/data/www/wordpress</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/html/default:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/conf/cert:/etc/nginx/cert</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.11</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.24</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">\"mysql_container\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/data:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/conf:/etc/mysql/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/mysql/logs:/data/mysql/logs</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"3306:3306\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"attr\">      hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">        ipv4_address:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.12</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  hx_net:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"><span class=\"attr\">    ipam:</span></span><br><span class=\"line\"><span class=\"attr\">      config:</span></span><br><span class=\"line\"><span class=\"attr\">        - subnet:</span> <span class=\"number\">11.11</span><span class=\"number\">.11</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br></pre></td></tr></table></figure>"},{"post_url":"docker-nginx","title":"docker run 和 docker-compose 配置挂载 Volume 并运行 nginx","date":"2018-08-13T09:26:22.000Z","_content":"1. 先在宿主机创建挂载目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}\n\n2. 然后把文件 nginx.conf 文件放到 /data/nginx/conf/\n\n```conf\nuser  nginx;\nworker_processes  1;\n \nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n \n \nevents {\n    worker_connections  1024;\n}\n \n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile        on;\n    #tcp_nopush     on;\n \n    keepalive_timeout  65;\n \n    #gzip  on;\n \n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n容器内 /etc/nginx/ 目录如下：\n![](/images/20181130105842729.jpg)\n\n3. 把子配置文件 default.conf 放到 /data/nginx/conf.d/\n```conf\nserver {\n    listen       80;\n    server_name  localhost;\n \n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n \n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n \n    #error_page  404              /404.html;\n \n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n \n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n \n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n \n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n4. 弄一个 index.html 放到 /data/nginx/html/\n\n5. nginx 日志会在运行后存到 /data/nginx/logs/ 目录\n\n6. 然后 docker run 直接运行 nginx：\n```\ndocker run \\\n  --name myNginx \\\n  -d -p 8088:80 \\\n  -v /data/nginx/html/:/usr/share/nginx/html \\\n  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \\\n  -v /data/nginx/conf.d/:/etc/nginx/conf.d \\\n  -v /data/nginx/logs/:/var/log/nginx/ \\\n  nginx\n```\n7. 另外如果用 docker-compose 或 swarm 起服务，docker-compose.yml 文件如下：\n```yml\nversion: \"3\"\nservices:\n   web:\n     image: nginx\n     ports:\n       - \"8082:80\"\n     volumes:\n       - /data/nginx/html:/usr/share/nginx/html\n       - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n       - /data/nginx/conf.d:/etc/nginx/conf.d\n       - /data/nginx/logs:/var/log/nginx\n     restart: always\n     container_name: myNginx2\n```\n\ndocker-compose up -d 启动服务\n\n重新创建容器：docker-compose up -d --force-recreate","source":"_posts/docker-nginx.md","raw":"---\npost_url: docker-nginx\ntitle: docker run 和 docker-compose 配置挂载 Volume 并运行 nginx\ndate: 2018-08-13 17:26:22\ntags: [docker, nginx]\n---\n1. 先在宿主机创建挂载目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}\n\n2. 然后把文件 nginx.conf 文件放到 /data/nginx/conf/\n\n```conf\nuser  nginx;\nworker_processes  1;\n \nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n \n \nevents {\n    worker_connections  1024;\n}\n \n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile        on;\n    #tcp_nopush     on;\n \n    keepalive_timeout  65;\n \n    #gzip  on;\n \n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n容器内 /etc/nginx/ 目录如下：\n![](/images/20181130105842729.jpg)\n\n3. 把子配置文件 default.conf 放到 /data/nginx/conf.d/\n```conf\nserver {\n    listen       80;\n    server_name  localhost;\n \n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n \n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n \n    #error_page  404              /404.html;\n \n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n \n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n \n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n \n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n4. 弄一个 index.html 放到 /data/nginx/html/\n\n5. nginx 日志会在运行后存到 /data/nginx/logs/ 目录\n\n6. 然后 docker run 直接运行 nginx：\n```\ndocker run \\\n  --name myNginx \\\n  -d -p 8088:80 \\\n  -v /data/nginx/html/:/usr/share/nginx/html \\\n  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \\\n  -v /data/nginx/conf.d/:/etc/nginx/conf.d \\\n  -v /data/nginx/logs/:/var/log/nginx/ \\\n  nginx\n```\n7. 另外如果用 docker-compose 或 swarm 起服务，docker-compose.yml 文件如下：\n```yml\nversion: \"3\"\nservices:\n   web:\n     image: nginx\n     ports:\n       - \"8082:80\"\n     volumes:\n       - /data/nginx/html:/usr/share/nginx/html\n       - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n       - /data/nginx/conf.d:/etc/nginx/conf.d\n       - /data/nginx/logs:/var/log/nginx\n     restart: always\n     container_name: myNginx2\n```\n\ndocker-compose up -d 启动服务\n\n重新创建容器：docker-compose up -d --force-recreate","slug":"docker-nginx","published":1,"updated":"2019-03-24T11:18:25.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp5001f05abg784v9oq","content":"<ol>\n<li><p>先在宿主机创建挂载目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}</p>\n</li>\n<li><p>然后把文件 nginx.conf 文件放到 /data/nginx/conf/</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"> </span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"> </span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>容器内 /etc/nginx/ 目录如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181130105842729.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"3\">\n<li><p>把子配置文件 default.conf 放到 /data/nginx/conf.d/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">    # concurs with nginx&apos;s one</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ /\\.ht &#123;</span><br><span class=\"line\">    #    deny  all;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>弄一个 index.html 放到 /data/nginx/html/</p>\n</li>\n<li><p>nginx 日志会在运行后存到 /data/nginx/logs/ 目录</p>\n</li>\n<li><p>然后 docker run 直接运行 nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name myNginx \\</span><br><span class=\"line\">  -d -p 8088:80 \\</span><br><span class=\"line\">  -v /data/nginx/html/:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \\</span><br><span class=\"line\">  -v /data/nginx/conf.d/:/etc/nginx/conf.d \\</span><br><span class=\"line\">  -v /data/nginx/logs/:/var/log/nginx/ \\</span><br><span class=\"line\">  nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另外如果用 docker-compose 或 swarm 起服务，docker-compose.yml 文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">   web:</span></span><br><span class=\"line\"><span class=\"attr\">     image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">     ports:</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">\"8082:80\"</span></span><br><span class=\"line\"><span class=\"attr\">     volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/html:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">     container_name:</span> <span class=\"string\">myNginx2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>docker-compose up -d 启动服务</p>\n<p>重新创建容器：docker-compose up -d –force-recreate</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>先在宿主机创建挂载目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}</p>\n</li>\n<li><p>然后把文件 nginx.conf 文件放到 /data/nginx/conf/</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"> </span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"> </span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>容器内 /etc/nginx/ 目录如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181130105842729.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ol start=\"3\">\n<li><p>把子配置文件 default.conf 放到 /data/nginx/conf.d/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">    # concurs with nginx&apos;s one</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ /\\.ht &#123;</span><br><span class=\"line\">    #    deny  all;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>弄一个 index.html 放到 /data/nginx/html/</p>\n</li>\n<li><p>nginx 日志会在运行后存到 /data/nginx/logs/ 目录</p>\n</li>\n<li><p>然后 docker run 直接运行 nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name myNginx \\</span><br><span class=\"line\">  -d -p 8088:80 \\</span><br><span class=\"line\">  -v /data/nginx/html/:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \\</span><br><span class=\"line\">  -v /data/nginx/conf.d/:/etc/nginx/conf.d \\</span><br><span class=\"line\">  -v /data/nginx/logs/:/var/log/nginx/ \\</span><br><span class=\"line\">  nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另外如果用 docker-compose 或 swarm 起服务，docker-compose.yml 文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">   web:</span></span><br><span class=\"line\"><span class=\"attr\">     image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">     ports:</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">\"8082:80\"</span></span><br><span class=\"line\"><span class=\"attr\">     volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/html:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">/data/nginx/logs:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">     container_name:</span> <span class=\"string\">myNginx2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>docker-compose up -d 启动服务</p>\n<p>重新创建容器：docker-compose up -d –force-recreate</p>\n"},{"title":"『转载』Docker 学习笔记合集第一季 —— image container 基本操作","post_url":"docker-image-container","date":"2018-06-28T08:32:22.000Z","_content":"原文地址：https://testerhome.com/topics/2760 「发表于 TesterHome 」\n\n \n\n学习 docker 也有数周时间了，一直在 学基础->手痒想实践->实践->卡住->回去学习基础 的过程中挣扎，总算是把 docker 的对 image，container 的基本操作都过了一遍（其实最基本的早就会了，只是一些相对用得不多的没有用过）。因此把到目前为止的一些学习笔记放在这里分享一下（内容真心水，大家轻拍）。\n\nDocker 学习笔记（1）– 在 mac 上配置环境\nDocker 学习笔记（2）– docker 化(Dockerizing)应用： Hello-world\nDocker 学习笔记（3）– Docker container\nDocker 学习笔记（4）– Docker image\n\n最后在这里简单总结一下这些基本命令及基本概念，也作为以后的一个速查表：\n\n基本概念：\ncontainer\n容器。可以把每个 container 看做是一个独立的主机。 container 的创建通常有一个 image 作为其模板。类比成虚拟机的话可以理解为 image 就是虚拟机的镜像，而 container 就是一个个正在运行的虚拟机。一个虚拟机镜像可以创建出多个运行的虚拟主机且相互独立。 注意：container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除哦。\n\nimage\n镜像。image 相当于 container 的模板，container 创建后里面有什么软件完全取决于它使用什么 image 。image 可以通过 container 创建（相当于把此时 container 的状态保存成快照），也可以通过 Dockerfile （一个文本文件，里面使用 docker 规定的一些写法）来创建。其中通过 Dockerfile 创建的方法能让环境配置和代码一起被版本库一起管理。\n\nregistry\n存放镜像的仓库。只要能连接到 registry 每个人都可以很方便地通过 pull 命令从仓库中获取镜像。docker 默认使用的仓库是 docker hub，国内可以使用 DaoCloud 来建立 Mirror 连接到 docker hub，进而加快获取 image 的速度。\n\nboot2docker\n一个轻量级 linux 虚拟机，主要是为了让非 linux 系统也能用上 docker 。它实质上是一个 virtualbox 虚拟主机+一个能管理这个虚拟主机的命令行工具。由于这个虚拟主机的存在，在非 linux 系统上 container 需要获取一些物理系统资源（如 usb 设备）时不仅需要配置 docker 命令，还需要配置 boot2docker 这个虚拟主机的资源配置。\n\n常用命令表\n通用：\n\n操作\t命令\t示例\n查看 docker 版本\tdocker version\tdocker version\n查看 docker 信息\tdocker info\tdocker info\n查看某命令 help 信息\tdocker help [command]\tdocker help attach\n查看 docker help 信息\tdocker --help\tdocker --help\ncontainer 相关：\n操作\t命令\t示例\n创建 container\tdocker create\tdocker create chenhengjie123/xwalkdriver\n创建并运行 container\tdocker run\tdocker run chenhengjie123/xwalkdriver /bin/bash\n创建并运行 container 后进入其 bash 控制台\tdocker run -t -i image /bin/bash\tdocker run -t -i ubuntu /bin/bash\n创建并运行 container 并让其在后台运行，并端口映射\tdocker run -p [port in container]:[port in physical system] -d [image] [command]\tdocker run -p 5000:5000 -d training/webapp python app.py\n查看正在运行的所有 container 信息\tdocker ps\tdocker ps\n查看最后创建的 container\tdocker ps -l\tdocker ps -l\n查看所有 container ，包括正在运行和已经关闭的\tdocker ps -a\tdocker ps -a\n输出指定 container 的 stdout 信息（用来看 log ，效果和 tail -f 类似，会实时输出。）\tdocker logs -f [container]\tdocker logs -f nostalgic_morse\n获取 container 指定端口映射关系\tdocker port [container] [port]\tdocker port nostalgic_morse 5000\n查看 container 进程列表\tdocker top [container]\tdocker top nostalgic_morse\n查看 container 详细信息\tdocker inspect [container]\tdocker inspect nostalgic_morse\n停止 continer\tdocker stop [container]\tdocker stop nostalgic_morse\n强制停止 container\tdocker kill [container]\tdocker kill nostalgic_morse\n启动一个已经停止的 container\tdocker start [container]\tdocker start nostalgic_morse\n重启 container (若 container 处于关闭状态，则直接启动)\tdocker restart [container]\tdocker restart nostalgic_morse\n删除 container\tdocker rm [container]\tdocker rm nostalgic_morse\n命令中需要指定 container 时，既可使用其名称，也可使用其 id 。\n\nimage 相关：\n操作\t命令\t示例\n从 container 创建 image\tdocker commit [container] [imageName]\tdocker commit nostalgic_morse ouruser/sinatra:v2\n从 Dockerfile 创建 image\tdocker build -t [imageName] [pathToFolder]\tdocker build ouruser/sinatra:v3 .\n查看本地所有 image\tdocker images\tdocker images\n在 registry 中搜索镜像\tdocker search [query]\tdocker search ubuntu\n从 registry 中获取镜像 （若无指定 tag 名称，则默认使用 latest 这个 tag）\tdocker pull [imageName]\tdocker pull ubuntu:14.04, docker pull training/webapp\n给 image 打 tag\tdocker tag [imageId] [imageName]\tdocker tag 5db5f8471261 ouruser/sinatra:devel\n把本地 image 上传到 registry 中 (此时会把所有 tag 都上传上去)\tdocker push [imageName]\tdocker push ouruser/sinatra\n删除本地 image\tdocker rmi [image]\tdocker rmi training/sinatra\n注意：image 中没有指定 tag 名称的话默认使用 latest 这个 tag 。然而 latest 的含义和 VCS 中的 head 不一样，不是代表最新一个镜像，仅仅是代表 tag 名称为 latest 的镜像。若不存在 tag 名称为 latest 的镜像则会报错。\n\n总结\ndocker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。\n\n同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。\n\n美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。\n\n但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。","source":"_posts/docker-image-container.md","raw":"---\ntitle: 『转载』Docker 学习笔记合集第一季 —— image container 基本操作\npost_url: docker-image-container\ndate: 2018-06-28 16:32:22\ntags: docker\n---\n原文地址：https://testerhome.com/topics/2760 「发表于 TesterHome 」\n\n \n\n学习 docker 也有数周时间了，一直在 学基础->手痒想实践->实践->卡住->回去学习基础 的过程中挣扎，总算是把 docker 的对 image，container 的基本操作都过了一遍（其实最基本的早就会了，只是一些相对用得不多的没有用过）。因此把到目前为止的一些学习笔记放在这里分享一下（内容真心水，大家轻拍）。\n\nDocker 学习笔记（1）– 在 mac 上配置环境\nDocker 学习笔记（2）– docker 化(Dockerizing)应用： Hello-world\nDocker 学习笔记（3）– Docker container\nDocker 学习笔记（4）– Docker image\n\n最后在这里简单总结一下这些基本命令及基本概念，也作为以后的一个速查表：\n\n基本概念：\ncontainer\n容器。可以把每个 container 看做是一个独立的主机。 container 的创建通常有一个 image 作为其模板。类比成虚拟机的话可以理解为 image 就是虚拟机的镜像，而 container 就是一个个正在运行的虚拟机。一个虚拟机镜像可以创建出多个运行的虚拟主机且相互独立。 注意：container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除哦。\n\nimage\n镜像。image 相当于 container 的模板，container 创建后里面有什么软件完全取决于它使用什么 image 。image 可以通过 container 创建（相当于把此时 container 的状态保存成快照），也可以通过 Dockerfile （一个文本文件，里面使用 docker 规定的一些写法）来创建。其中通过 Dockerfile 创建的方法能让环境配置和代码一起被版本库一起管理。\n\nregistry\n存放镜像的仓库。只要能连接到 registry 每个人都可以很方便地通过 pull 命令从仓库中获取镜像。docker 默认使用的仓库是 docker hub，国内可以使用 DaoCloud 来建立 Mirror 连接到 docker hub，进而加快获取 image 的速度。\n\nboot2docker\n一个轻量级 linux 虚拟机，主要是为了让非 linux 系统也能用上 docker 。它实质上是一个 virtualbox 虚拟主机+一个能管理这个虚拟主机的命令行工具。由于这个虚拟主机的存在，在非 linux 系统上 container 需要获取一些物理系统资源（如 usb 设备）时不仅需要配置 docker 命令，还需要配置 boot2docker 这个虚拟主机的资源配置。\n\n常用命令表\n通用：\n\n操作\t命令\t示例\n查看 docker 版本\tdocker version\tdocker version\n查看 docker 信息\tdocker info\tdocker info\n查看某命令 help 信息\tdocker help [command]\tdocker help attach\n查看 docker help 信息\tdocker --help\tdocker --help\ncontainer 相关：\n操作\t命令\t示例\n创建 container\tdocker create\tdocker create chenhengjie123/xwalkdriver\n创建并运行 container\tdocker run\tdocker run chenhengjie123/xwalkdriver /bin/bash\n创建并运行 container 后进入其 bash 控制台\tdocker run -t -i image /bin/bash\tdocker run -t -i ubuntu /bin/bash\n创建并运行 container 并让其在后台运行，并端口映射\tdocker run -p [port in container]:[port in physical system] -d [image] [command]\tdocker run -p 5000:5000 -d training/webapp python app.py\n查看正在运行的所有 container 信息\tdocker ps\tdocker ps\n查看最后创建的 container\tdocker ps -l\tdocker ps -l\n查看所有 container ，包括正在运行和已经关闭的\tdocker ps -a\tdocker ps -a\n输出指定 container 的 stdout 信息（用来看 log ，效果和 tail -f 类似，会实时输出。）\tdocker logs -f [container]\tdocker logs -f nostalgic_morse\n获取 container 指定端口映射关系\tdocker port [container] [port]\tdocker port nostalgic_morse 5000\n查看 container 进程列表\tdocker top [container]\tdocker top nostalgic_morse\n查看 container 详细信息\tdocker inspect [container]\tdocker inspect nostalgic_morse\n停止 continer\tdocker stop [container]\tdocker stop nostalgic_morse\n强制停止 container\tdocker kill [container]\tdocker kill nostalgic_morse\n启动一个已经停止的 container\tdocker start [container]\tdocker start nostalgic_morse\n重启 container (若 container 处于关闭状态，则直接启动)\tdocker restart [container]\tdocker restart nostalgic_morse\n删除 container\tdocker rm [container]\tdocker rm nostalgic_morse\n命令中需要指定 container 时，既可使用其名称，也可使用其 id 。\n\nimage 相关：\n操作\t命令\t示例\n从 container 创建 image\tdocker commit [container] [imageName]\tdocker commit nostalgic_morse ouruser/sinatra:v2\n从 Dockerfile 创建 image\tdocker build -t [imageName] [pathToFolder]\tdocker build ouruser/sinatra:v3 .\n查看本地所有 image\tdocker images\tdocker images\n在 registry 中搜索镜像\tdocker search [query]\tdocker search ubuntu\n从 registry 中获取镜像 （若无指定 tag 名称，则默认使用 latest 这个 tag）\tdocker pull [imageName]\tdocker pull ubuntu:14.04, docker pull training/webapp\n给 image 打 tag\tdocker tag [imageId] [imageName]\tdocker tag 5db5f8471261 ouruser/sinatra:devel\n把本地 image 上传到 registry 中 (此时会把所有 tag 都上传上去)\tdocker push [imageName]\tdocker push ouruser/sinatra\n删除本地 image\tdocker rmi [image]\tdocker rmi training/sinatra\n注意：image 中没有指定 tag 名称的话默认使用 latest 这个 tag 。然而 latest 的含义和 VCS 中的 head 不一样，不是代表最新一个镜像，仅仅是代表 tag 名称为 latest 的镜像。若不存在 tag 名称为 latest 的镜像则会报错。\n\n总结\ndocker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。\n\n同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。\n\n美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。\n\n但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。","slug":"docker-image-container","published":1,"updated":"2019-03-25T13:54:00.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp5001h05abv6ykwq8s","content":"<p>原文地址：<a href=\"https://testerhome.com/topics/2760\" target=\"_blank\" rel=\"noopener\">https://testerhome.com/topics/2760</a> 「发表于 TesterHome 」</p>\n<p>学习 docker 也有数周时间了，一直在 学基础-&gt;手痒想实践-&gt;实践-&gt;卡住-&gt;回去学习基础 的过程中挣扎，总算是把 docker 的对 image，container 的基本操作都过了一遍（其实最基本的早就会了，只是一些相对用得不多的没有用过）。因此把到目前为止的一些学习笔记放在这里分享一下（内容真心水，大家轻拍）。</p>\n<p>Docker 学习笔记（1）– 在 mac 上配置环境<br>Docker 学习笔记（2）– docker 化(Dockerizing)应用： Hello-world<br>Docker 学习笔记（3）– Docker container<br>Docker 学习笔记（4）– Docker image</p>\n<p>最后在这里简单总结一下这些基本命令及基本概念，也作为以后的一个速查表：</p>\n<p>基本概念：<br>container<br>容器。可以把每个 container 看做是一个独立的主机。 container 的创建通常有一个 image 作为其模板。类比成虚拟机的话可以理解为 image 就是虚拟机的镜像，而 container 就是一个个正在运行的虚拟机。一个虚拟机镜像可以创建出多个运行的虚拟主机且相互独立。 注意：container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除哦。</p>\n<p>image<br>镜像。image 相当于 container 的模板，container 创建后里面有什么软件完全取决于它使用什么 image 。image 可以通过 container 创建（相当于把此时 container 的状态保存成快照），也可以通过 Dockerfile （一个文本文件，里面使用 docker 规定的一些写法）来创建。其中通过 Dockerfile 创建的方法能让环境配置和代码一起被版本库一起管理。</p>\n<p>registry<br>存放镜像的仓库。只要能连接到 registry 每个人都可以很方便地通过 pull 命令从仓库中获取镜像。docker 默认使用的仓库是 docker hub，国内可以使用 DaoCloud 来建立 Mirror 连接到 docker hub，进而加快获取 image 的速度。</p>\n<p>boot2docker<br>一个轻量级 linux 虚拟机，主要是为了让非 linux 系统也能用上 docker 。它实质上是一个 virtualbox 虚拟主机+一个能管理这个虚拟主机的命令行工具。由于这个虚拟主机的存在，在非 linux 系统上 container 需要获取一些物理系统资源（如 usb 设备）时不仅需要配置 docker 命令，还需要配置 boot2docker 这个虚拟主机的资源配置。</p>\n<p>常用命令表<br>通用：</p>\n<p>操作    命令    示例<br>查看 docker 版本    docker version    docker version<br>查看 docker 信息    docker info    docker info<br>查看某命令 help 信息    docker help [command]    docker help attach<br>查看 docker help 信息    docker –help    docker –help<br>container 相关：<br>操作    命令    示例<br>创建 container    docker create    docker create chenhengjie123/xwalkdriver<br>创建并运行 container    docker run    docker run chenhengjie123/xwalkdriver /bin/bash<br>创建并运行 container 后进入其 bash 控制台    docker run -t -i image /bin/bash    docker run -t -i ubuntu /bin/bash<br>创建并运行 container 并让其在后台运行，并端口映射    docker run -p [port in container]:[port in physical system] -d [image] [command]    docker run -p 5000:5000 -d training/webapp python app.py<br>查看正在运行的所有 container 信息    docker ps    docker ps<br>查看最后创建的 container    docker ps -l    docker ps -l<br>查看所有 container ，包括正在运行和已经关闭的    docker ps -a    docker ps -a<br>输出指定 container 的 stdout 信息（用来看 log ，效果和 tail -f 类似，会实时输出。）    docker logs -f [container]    docker logs -f nostalgic_morse<br>获取 container 指定端口映射关系    docker port [container] [port]    docker port nostalgic_morse 5000<br>查看 container 进程列表    docker top [container]    docker top nostalgic_morse<br>查看 container 详细信息    docker inspect [container]    docker inspect nostalgic_morse<br>停止 continer    docker stop [container]    docker stop nostalgic_morse<br>强制停止 container    docker kill [container]    docker kill nostalgic_morse<br>启动一个已经停止的 container    docker start [container]    docker start nostalgic_morse<br>重启 container (若 container 处于关闭状态，则直接启动)    docker restart [container]    docker restart nostalgic_morse<br>删除 container    docker rm [container]    docker rm nostalgic_morse<br>命令中需要指定 container 时，既可使用其名称，也可使用其 id 。</p>\n<p>image 相关：<br>操作    命令    示例<br>从 container 创建 image    docker commit [container] [imageName]    docker commit nostalgic_morse ouruser/sinatra:v2<br>从 Dockerfile 创建 image    docker build -t [imageName] [pathToFolder]    docker build ouruser/sinatra:v3 .<br>查看本地所有 image    docker images    docker images<br>在 registry 中搜索镜像    docker search [query]    docker search ubuntu<br>从 registry 中获取镜像 （若无指定 tag 名称，则默认使用 latest 这个 tag）    docker pull [imageName]    docker pull ubuntu:14.04, docker pull training/webapp<br>给 image 打 tag    docker tag [imageId] [imageName]    docker tag 5db5f8471261 ouruser/sinatra:devel<br>把本地 image 上传到 registry 中 (此时会把所有 tag 都上传上去)    docker push [imageName]    docker push ouruser/sinatra<br>删除本地 image    docker rmi [image]    docker rmi training/sinatra<br>注意：image 中没有指定 tag 名称的话默认使用 latest 这个 tag 。然而 latest 的含义和 VCS 中的 head 不一样，不是代表最新一个镜像，仅仅是代表 tag 名称为 latest 的镜像。若不存在 tag 名称为 latest 的镜像则会报错。</p>\n<p>总结<br>docker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。</p>\n<p>同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。</p>\n<p>美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。</p>\n<p>但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://testerhome.com/topics/2760\" target=\"_blank\" rel=\"noopener\">https://testerhome.com/topics/2760</a> 「发表于 TesterHome 」</p>\n<p>学习 docker 也有数周时间了，一直在 学基础-&gt;手痒想实践-&gt;实践-&gt;卡住-&gt;回去学习基础 的过程中挣扎，总算是把 docker 的对 image，container 的基本操作都过了一遍（其实最基本的早就会了，只是一些相对用得不多的没有用过）。因此把到目前为止的一些学习笔记放在这里分享一下（内容真心水，大家轻拍）。</p>\n<p>Docker 学习笔记（1）– 在 mac 上配置环境<br>Docker 学习笔记（2）– docker 化(Dockerizing)应用： Hello-world<br>Docker 学习笔记（3）– Docker container<br>Docker 学习笔记（4）– Docker image</p>\n<p>最后在这里简单总结一下这些基本命令及基本概念，也作为以后的一个速查表：</p>\n<p>基本概念：<br>container<br>容器。可以把每个 container 看做是一个独立的主机。 container 的创建通常有一个 image 作为其模板。类比成虚拟机的话可以理解为 image 就是虚拟机的镜像，而 container 就是一个个正在运行的虚拟机。一个虚拟机镜像可以创建出多个运行的虚拟主机且相互独立。 注意：container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除哦。</p>\n<p>image<br>镜像。image 相当于 container 的模板，container 创建后里面有什么软件完全取决于它使用什么 image 。image 可以通过 container 创建（相当于把此时 container 的状态保存成快照），也可以通过 Dockerfile （一个文本文件，里面使用 docker 规定的一些写法）来创建。其中通过 Dockerfile 创建的方法能让环境配置和代码一起被版本库一起管理。</p>\n<p>registry<br>存放镜像的仓库。只要能连接到 registry 每个人都可以很方便地通过 pull 命令从仓库中获取镜像。docker 默认使用的仓库是 docker hub，国内可以使用 DaoCloud 来建立 Mirror 连接到 docker hub，进而加快获取 image 的速度。</p>\n<p>boot2docker<br>一个轻量级 linux 虚拟机，主要是为了让非 linux 系统也能用上 docker 。它实质上是一个 virtualbox 虚拟主机+一个能管理这个虚拟主机的命令行工具。由于这个虚拟主机的存在，在非 linux 系统上 container 需要获取一些物理系统资源（如 usb 设备）时不仅需要配置 docker 命令，还需要配置 boot2docker 这个虚拟主机的资源配置。</p>\n<p>常用命令表<br>通用：</p>\n<p>操作    命令    示例<br>查看 docker 版本    docker version    docker version<br>查看 docker 信息    docker info    docker info<br>查看某命令 help 信息    docker help [command]    docker help attach<br>查看 docker help 信息    docker –help    docker –help<br>container 相关：<br>操作    命令    示例<br>创建 container    docker create    docker create chenhengjie123/xwalkdriver<br>创建并运行 container    docker run    docker run chenhengjie123/xwalkdriver /bin/bash<br>创建并运行 container 后进入其 bash 控制台    docker run -t -i image /bin/bash    docker run -t -i ubuntu /bin/bash<br>创建并运行 container 并让其在后台运行，并端口映射    docker run -p [port in container]:[port in physical system] -d [image] [command]    docker run -p 5000:5000 -d training/webapp python app.py<br>查看正在运行的所有 container 信息    docker ps    docker ps<br>查看最后创建的 container    docker ps -l    docker ps -l<br>查看所有 container ，包括正在运行和已经关闭的    docker ps -a    docker ps -a<br>输出指定 container 的 stdout 信息（用来看 log ，效果和 tail -f 类似，会实时输出。）    docker logs -f [container]    docker logs -f nostalgic_morse<br>获取 container 指定端口映射关系    docker port [container] [port]    docker port nostalgic_morse 5000<br>查看 container 进程列表    docker top [container]    docker top nostalgic_morse<br>查看 container 详细信息    docker inspect [container]    docker inspect nostalgic_morse<br>停止 continer    docker stop [container]    docker stop nostalgic_morse<br>强制停止 container    docker kill [container]    docker kill nostalgic_morse<br>启动一个已经停止的 container    docker start [container]    docker start nostalgic_morse<br>重启 container (若 container 处于关闭状态，则直接启动)    docker restart [container]    docker restart nostalgic_morse<br>删除 container    docker rm [container]    docker rm nostalgic_morse<br>命令中需要指定 container 时，既可使用其名称，也可使用其 id 。</p>\n<p>image 相关：<br>操作    命令    示例<br>从 container 创建 image    docker commit [container] [imageName]    docker commit nostalgic_morse ouruser/sinatra:v2<br>从 Dockerfile 创建 image    docker build -t [imageName] [pathToFolder]    docker build ouruser/sinatra:v3 .<br>查看本地所有 image    docker images    docker images<br>在 registry 中搜索镜像    docker search [query]    docker search ubuntu<br>从 registry 中获取镜像 （若无指定 tag 名称，则默认使用 latest 这个 tag）    docker pull [imageName]    docker pull ubuntu:14.04, docker pull training/webapp<br>给 image 打 tag    docker tag [imageId] [imageName]    docker tag 5db5f8471261 ouruser/sinatra:devel<br>把本地 image 上传到 registry 中 (此时会把所有 tag 都上传上去)    docker push [imageName]    docker push ouruser/sinatra<br>删除本地 image    docker rmi [image]    docker rmi training/sinatra<br>注意：image 中没有指定 tag 名称的话默认使用 latest 这个 tag 。然而 latest 的含义和 VCS 中的 head 不一样，不是代表最新一个镜像，仅仅是代表 tag 名称为 latest 的镜像。若不存在 tag 名称为 latest 的镜像则会报错。</p>\n<p>总结<br>docker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。</p>\n<p>同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。</p>\n<p>美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。</p>\n<p>但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。</p>\n"},{"post_url":"docker-notes","title":"docker 笔记","date":"2018-06-28T05:51:43.000Z","_content":"\n容器的本质是宿主机上一个特殊的进程，通过 宿主机 的 Namespace、Cgroups、rootfs 等（Namespace 做进程隔离，Cgroups 做限制(限制隔离进程组所使用的cpu,memory,IO等物理资源)，rootfs 做文件系统）与宿主机上的其他东西 \"隔离开\"。\n\n1. 强制删除 docker 镜像：docker rmi -f [IMAGE-ID]  或 docker rmi -f [IMAGE-NAME]\n\n   删除 container：docker rm [CONTAINER ID]\n\n2. 保存镜像到文件：docker save -o /data/image1.tar [IMAGE_NAME]\n\n3. 载入镜像文件：docker load --input /data/image1.tar 或 docker load < /data/image1.tar\n\n4. 使用本地模板导入镜像：cat centos-6-x86_64-20170709.tar.xz | docker import - [IMAGE-NAME-NEW] \n\n例：cat centos-6-x86_64-20170709.tar.xz | docker import - centos6\n\nOpenVZ 模板下载网站：https://openvz.org/Download/template/precreated\n\n5. 查看本地镜像列表：docker images\n\n查找本地镜像：docker images nginx\n\n搜索仓库镜像：docker search nginx\n\n6. 执行 docker 命令：docker run [IMAGE_NAME] ping 10.10.50.55\n\n7. Docker 入门：http://www.docker.org.cn/book/docker/what-is-docker-16.html\n\n8. 创建并运行 container 后进入其 bash 控制台：docker run -t -i 691ad2f6923d /bin/bash\n\n进入后台运行的容器：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh\n\n9. 列出 container：docker ps -a\n\n10. 卸载安装：https://docs.docker.com/install/linux/docker-ce/centos/\n\n11. 镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n12. 容器存储：\n\n前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。\n\n容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。\n\n13. Docker hub地址：https://hub.docker.com/\n\n14. 后台运行（信息不输出到前台）：使用 -d 参数\n\n注： 容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。\n\n参考：https://yeasy.gitbooks.io/docker_practice/container/daemon.html\n\n15. 查看端口映射配置：docker port web2 80\n\n参考：https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html\n\n16. 查看 Image 或 Container 的信息：docker inspect wordpress\n\n17. 安装 docker：https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1\n\n18. 查看系统内核版本：uname -r\n\n19. 安装 docker-compose：\n\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose \n\n$ sudo chmod +x /usr/local/bin/docker-compose\n\n参考：https://docs.docker.com/compose/install/\n\n其他资料：https://docs.docker.com/compose/gettingstarted/\n\n20. 安装 Docker Machine\n\nhttps://docs.docker.com/machine/install-machine/#install-machine-directly\n\n21. 在 Swarm 集群中使用 compose 文件\n\n$ docker stack deploy -c docker-compose.yml wordpress\n\n$ docker stack ls\n\n$ docker stack down wordpress\n\n参考：https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html\n\n22. macOS 下如果用邮箱登录 docker，pull 镜像时会提示：...unauthorized: incorrect username or password. 用 DockerID 登录就没问题。\n\n23. 清理所有停止运行的容器 docker container prune   \n\nimage、volume、network 同理：\n\ndocker image prune\n\ndocker volume prune\n\n \n\ndocker 命令大全：http://www.runoob.com/docker/docker-command-manual.html\n\n《Docker 从入门到实践》：https://yeasy.gitbooks.io/docker_practice/install/centos.html\n\n更多：https://blog.csdn.net/iaiot/article/details/80845250\n","source":"_posts/docker-notes.md","raw":"---\npost_url: docker-notes\ntitle: docker 笔记\ndate: 2018-06-28 13:51:43\ntags: docker\n---\n\n容器的本质是宿主机上一个特殊的进程，通过 宿主机 的 Namespace、Cgroups、rootfs 等（Namespace 做进程隔离，Cgroups 做限制(限制隔离进程组所使用的cpu,memory,IO等物理资源)，rootfs 做文件系统）与宿主机上的其他东西 \"隔离开\"。\n\n1. 强制删除 docker 镜像：docker rmi -f [IMAGE-ID]  或 docker rmi -f [IMAGE-NAME]\n\n   删除 container：docker rm [CONTAINER ID]\n\n2. 保存镜像到文件：docker save -o /data/image1.tar [IMAGE_NAME]\n\n3. 载入镜像文件：docker load --input /data/image1.tar 或 docker load < /data/image1.tar\n\n4. 使用本地模板导入镜像：cat centos-6-x86_64-20170709.tar.xz | docker import - [IMAGE-NAME-NEW] \n\n例：cat centos-6-x86_64-20170709.tar.xz | docker import - centos6\n\nOpenVZ 模板下载网站：https://openvz.org/Download/template/precreated\n\n5. 查看本地镜像列表：docker images\n\n查找本地镜像：docker images nginx\n\n搜索仓库镜像：docker search nginx\n\n6. 执行 docker 命令：docker run [IMAGE_NAME] ping 10.10.50.55\n\n7. Docker 入门：http://www.docker.org.cn/book/docker/what-is-docker-16.html\n\n8. 创建并运行 container 后进入其 bash 控制台：docker run -t -i 691ad2f6923d /bin/bash\n\n进入后台运行的容器：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh\n\n9. 列出 container：docker ps -a\n\n10. 卸载安装：https://docs.docker.com/install/linux/docker-ce/centos/\n\n11. 镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n12. 容器存储：\n\n前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。\n\n容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。\n\n13. Docker hub地址：https://hub.docker.com/\n\n14. 后台运行（信息不输出到前台）：使用 -d 参数\n\n注： 容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。\n\n参考：https://yeasy.gitbooks.io/docker_practice/container/daemon.html\n\n15. 查看端口映射配置：docker port web2 80\n\n参考：https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html\n\n16. 查看 Image 或 Container 的信息：docker inspect wordpress\n\n17. 安装 docker：https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1\n\n18. 查看系统内核版本：uname -r\n\n19. 安装 docker-compose：\n\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose \n\n$ sudo chmod +x /usr/local/bin/docker-compose\n\n参考：https://docs.docker.com/compose/install/\n\n其他资料：https://docs.docker.com/compose/gettingstarted/\n\n20. 安装 Docker Machine\n\nhttps://docs.docker.com/machine/install-machine/#install-machine-directly\n\n21. 在 Swarm 集群中使用 compose 文件\n\n$ docker stack deploy -c docker-compose.yml wordpress\n\n$ docker stack ls\n\n$ docker stack down wordpress\n\n参考：https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html\n\n22. macOS 下如果用邮箱登录 docker，pull 镜像时会提示：...unauthorized: incorrect username or password. 用 DockerID 登录就没问题。\n\n23. 清理所有停止运行的容器 docker container prune   \n\nimage、volume、network 同理：\n\ndocker image prune\n\ndocker volume prune\n\n \n\ndocker 命令大全：http://www.runoob.com/docker/docker-command-manual.html\n\n《Docker 从入门到实践》：https://yeasy.gitbooks.io/docker_practice/install/centos.html\n\n更多：https://blog.csdn.net/iaiot/article/details/80845250\n","slug":"docker-notes","published":1,"updated":"2019-03-24T13:26:07.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp6001i05ab6uea0sc5","content":"<p>容器的本质是宿主机上一个特殊的进程，通过 宿主机 的 Namespace、Cgroups、rootfs 等（Namespace 做进程隔离，Cgroups 做限制(限制隔离进程组所使用的cpu,memory,IO等物理资源)，rootfs 做文件系统）与宿主机上的其他东西 “隔离开”。</p>\n<ol>\n<li><p>强制删除 docker 镜像：docker rmi -f [IMAGE-ID]  或 docker rmi -f [IMAGE-NAME]</p>\n<p>删除 container：docker rm [CONTAINER ID]</p>\n</li>\n<li><p>保存镜像到文件：docker save -o /data/image1.tar [IMAGE_NAME]</p>\n</li>\n<li><p>载入镜像文件：docker load –input /data/image1.tar 或 docker load &lt; /data/image1.tar</p>\n</li>\n<li><p>使用本地模板导入镜像：cat centos-6-x86_64-20170709.tar.xz | docker import - [IMAGE-NAME-NEW] </p>\n</li>\n</ol>\n<p>例：cat centos-6-x86_64-20170709.tar.xz | docker import - centos6</p>\n<p>OpenVZ 模板下载网站：<a href=\"https://openvz.org/Download/template/precreated\" target=\"_blank\" rel=\"noopener\">https://openvz.org/Download/template/precreated</a></p>\n<ol start=\"5\">\n<li>查看本地镜像列表：docker images</li>\n</ol>\n<p>查找本地镜像：docker images nginx</p>\n<p>搜索仓库镜像：docker search nginx</p>\n<ol start=\"6\">\n<li><p>执行 docker 命令：docker run [IMAGE_NAME] ping 10.10.50.55</p>\n</li>\n<li><p>Docker 入门：<a href=\"http://www.docker.org.cn/book/docker/what-is-docker-16.html\" target=\"_blank\" rel=\"noopener\">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></p>\n</li>\n<li><p>创建并运行 container 后进入其 bash 控制台：docker run -t -i 691ad2f6923d /bin/bash</p>\n</li>\n</ol>\n<p>进入后台运行的容器：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh</p>\n<ol start=\"9\">\n<li><p>列出 container：docker ps -a</p>\n</li>\n<li><p>卸载安装：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n</li>\n<li><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n<li><p>容器存储：</p>\n</li>\n</ol>\n<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。</p>\n<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>\n<ol start=\"13\">\n<li><p>Docker hub地址：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n</li>\n<li><p>后台运行（信息不输出到前台）：使用 -d 参数</p>\n</li>\n</ol>\n<p>注： 容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。</p>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/container/daemon.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/container/daemon.html</a></p>\n<ol start=\"15\">\n<li>查看端口映射配置：docker port web2 80</li>\n</ol>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html</a></p>\n<ol start=\"16\">\n<li><p>查看 Image 或 Container 的信息：docker inspect wordpress</p>\n</li>\n<li><p>安装 docker：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1</a></p>\n</li>\n<li><p>查看系统内核版本：uname -r</p>\n</li>\n<li><p>安装 docker-compose：</p>\n</li>\n</ol>\n<p>$ sudo curl -L <a href=\"https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname</a> -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose </p>\n<p>$ sudo chmod +x /usr/local/bin/docker-compose</p>\n<p>参考：<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/install/</a></p>\n<p>其他资料：<a href=\"https://docs.docker.com/compose/gettingstarted/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/gettingstarted/</a></p>\n<ol start=\"20\">\n<li>安装 Docker Machine</li>\n</ol>\n<p><a href=\"https://docs.docker.com/machine/install-machine/#install-machine-directly\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/machine/install-machine/#install-machine-directly</a></p>\n<ol start=\"21\">\n<li>在 Swarm 集群中使用 compose 文件</li>\n</ol>\n<p>$ docker stack deploy -c docker-compose.yml wordpress</p>\n<p>$ docker stack ls</p>\n<p>$ docker stack down wordpress</p>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html</a></p>\n<ol start=\"22\">\n<li><p>macOS 下如果用邮箱登录 docker，pull 镜像时会提示：…unauthorized: incorrect username or password. 用 DockerID 登录就没问题。</p>\n</li>\n<li><p>清理所有停止运行的容器 docker container prune   </p>\n</li>\n</ol>\n<p>image、volume、network 同理：</p>\n<p>docker image prune</p>\n<p>docker volume prune</p>\n<p>docker 命令大全：<a href=\"http://www.runoob.com/docker/docker-command-manual.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-command-manual.html</a></p>\n<p>《Docker 从入门到实践》：<a href=\"https://yeasy.gitbooks.io/docker_practice/install/centos.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/install/centos.html</a></p>\n<p>更多：<a href=\"https://blog.csdn.net/iaiot/article/details/80845250\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/80845250</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>容器的本质是宿主机上一个特殊的进程，通过 宿主机 的 Namespace、Cgroups、rootfs 等（Namespace 做进程隔离，Cgroups 做限制(限制隔离进程组所使用的cpu,memory,IO等物理资源)，rootfs 做文件系统）与宿主机上的其他东西 “隔离开”。</p>\n<ol>\n<li><p>强制删除 docker 镜像：docker rmi -f [IMAGE-ID]  或 docker rmi -f [IMAGE-NAME]</p>\n<p>删除 container：docker rm [CONTAINER ID]</p>\n</li>\n<li><p>保存镜像到文件：docker save -o /data/image1.tar [IMAGE_NAME]</p>\n</li>\n<li><p>载入镜像文件：docker load –input /data/image1.tar 或 docker load &lt; /data/image1.tar</p>\n</li>\n<li><p>使用本地模板导入镜像：cat centos-6-x86_64-20170709.tar.xz | docker import - [IMAGE-NAME-NEW] </p>\n</li>\n</ol>\n<p>例：cat centos-6-x86_64-20170709.tar.xz | docker import - centos6</p>\n<p>OpenVZ 模板下载网站：<a href=\"https://openvz.org/Download/template/precreated\" target=\"_blank\" rel=\"noopener\">https://openvz.org/Download/template/precreated</a></p>\n<ol start=\"5\">\n<li>查看本地镜像列表：docker images</li>\n</ol>\n<p>查找本地镜像：docker images nginx</p>\n<p>搜索仓库镜像：docker search nginx</p>\n<ol start=\"6\">\n<li><p>执行 docker 命令：docker run [IMAGE_NAME] ping 10.10.50.55</p>\n</li>\n<li><p>Docker 入门：<a href=\"http://www.docker.org.cn/book/docker/what-is-docker-16.html\" target=\"_blank\" rel=\"noopener\">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></p>\n</li>\n<li><p>创建并运行 container 后进入其 bash 控制台：docker run -t -i 691ad2f6923d /bin/bash</p>\n</li>\n</ol>\n<p>进入后台运行的容器：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh</p>\n<ol start=\"9\">\n<li><p>列出 container：docker ps -a</p>\n</li>\n<li><p>卸载安装：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n</li>\n<li><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n<li><p>容器存储：</p>\n</li>\n</ol>\n<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。</p>\n<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>\n<ol start=\"13\">\n<li><p>Docker hub地址：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n</li>\n<li><p>后台运行（信息不输出到前台）：使用 -d 参数</p>\n</li>\n</ol>\n<p>注： 容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。</p>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/container/daemon.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/container/daemon.html</a></p>\n<ol start=\"15\">\n<li>查看端口映射配置：docker port web2 80</li>\n</ol>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html</a></p>\n<ol start=\"16\">\n<li><p>查看 Image 或 Container 的信息：docker inspect wordpress</p>\n</li>\n<li><p>安装 docker：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1</a></p>\n</li>\n<li><p>查看系统内核版本：uname -r</p>\n</li>\n<li><p>安装 docker-compose：</p>\n</li>\n</ol>\n<p>$ sudo curl -L <a href=\"https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname</a> -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose </p>\n<p>$ sudo chmod +x /usr/local/bin/docker-compose</p>\n<p>参考：<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/install/</a></p>\n<p>其他资料：<a href=\"https://docs.docker.com/compose/gettingstarted/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/gettingstarted/</a></p>\n<ol start=\"20\">\n<li>安装 Docker Machine</li>\n</ol>\n<p><a href=\"https://docs.docker.com/machine/install-machine/#install-machine-directly\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/machine/install-machine/#install-machine-directly</a></p>\n<ol start=\"21\">\n<li>在 Swarm 集群中使用 compose 文件</li>\n</ol>\n<p>$ docker stack deploy -c docker-compose.yml wordpress</p>\n<p>$ docker stack ls</p>\n<p>$ docker stack down wordpress</p>\n<p>参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/swarm_mode/stack.html</a></p>\n<ol start=\"22\">\n<li><p>macOS 下如果用邮箱登录 docker，pull 镜像时会提示：…unauthorized: incorrect username or password. 用 DockerID 登录就没问题。</p>\n</li>\n<li><p>清理所有停止运行的容器 docker container prune   </p>\n</li>\n</ol>\n<p>image、volume、network 同理：</p>\n<p>docker image prune</p>\n<p>docker volume prune</p>\n<p>docker 命令大全：<a href=\"http://www.runoob.com/docker/docker-command-manual.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-command-manual.html</a></p>\n<p>《Docker 从入门到实践》：<a href=\"https://yeasy.gitbooks.io/docker_practice/install/centos.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/install/centos.html</a></p>\n<p>更多：<a href=\"https://blog.csdn.net/iaiot/article/details/80845250\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/80845250</a></p>\n"},{"post_url":"docker-v-inode","title":"修改docker -v 挂载的文件遇到的问题。inode 软链接 硬链接 docker volume","date":"2018-11-24T02:29:40.000Z","_content":"原文地址：https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/\n\n在启动docker容器时，为了保证一些基础配置与宿主机保持同步，通常需要将这些配置文件挂载进docker容器，例如/etc/resolv.conf//etc/hosts//etc/localtime等。\n\n当这些配置变化时，我们通常会修改这些文件。但是此时遇到了一个问题：\n\n当在宿主机上修改这些文件后，docker容器内查看时，这些文件并未发生对应的修改。\n\n然后通过查阅相关资料，发现该问题是由docker -v挂载文件和某些编辑器存储文件的行为共同导致 的。\n\ndocker 挂载文件时，并不是挂载了某个文件的路径，而是实打实的挂载了对应的文件，即挂载了某 个指定的inode文件。\n某些编辑器(vi)在编辑保存文件时，采用了备份、替换的策略，即编辑过程中，将变更写入新文件， 保存时，再将备份文件替换原文件，此时会导致文件的inode发生变化。\n原inode对应的文件其实并没有发生修改。\n因此，我们从宿主机上修改这些文件时，应该采用echo重定向等操作，避免文件的inode发生变化。\n\n \n\n附 inode：http://www.ruanyifeng.com/blog/2011/12/inode.html\n\n通过 inode 这篇文章能很好的理解 Linux 的软链接和硬链接","source":"_posts/docker-v-inode.md","raw":"---\npost_url: docker-v-inode\ntitle: 修改docker -v 挂载的文件遇到的问题。inode 软链接 硬链接 docker volume\ndate: 2018-11-24 10:29:40\ntags: [docker, linux]\n---\n原文地址：https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/\n\n在启动docker容器时，为了保证一些基础配置与宿主机保持同步，通常需要将这些配置文件挂载进docker容器，例如/etc/resolv.conf//etc/hosts//etc/localtime等。\n\n当这些配置变化时，我们通常会修改这些文件。但是此时遇到了一个问题：\n\n当在宿主机上修改这些文件后，docker容器内查看时，这些文件并未发生对应的修改。\n\n然后通过查阅相关资料，发现该问题是由docker -v挂载文件和某些编辑器存储文件的行为共同导致 的。\n\ndocker 挂载文件时，并不是挂载了某个文件的路径，而是实打实的挂载了对应的文件，即挂载了某 个指定的inode文件。\n某些编辑器(vi)在编辑保存文件时，采用了备份、替换的策略，即编辑过程中，将变更写入新文件， 保存时，再将备份文件替换原文件，此时会导致文件的inode发生变化。\n原inode对应的文件其实并没有发生修改。\n因此，我们从宿主机上修改这些文件时，应该采用echo重定向等操作，避免文件的inode发生变化。\n\n \n\n附 inode：http://www.ruanyifeng.com/blog/2011/12/inode.html\n\n通过 inode 这篇文章能很好的理解 Linux 的软链接和硬链接","slug":"docker-v-inode","published":1,"updated":"2019-03-25T13:54:19.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp7001l05abi6sniig2","content":"<p>原文地址：<a href=\"https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/\" target=\"_blank\" rel=\"noopener\">https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/</a></p>\n<p>在启动docker容器时，为了保证一些基础配置与宿主机保持同步，通常需要将这些配置文件挂载进docker容器，例如/etc/resolv.conf//etc/hosts//etc/localtime等。</p>\n<p>当这些配置变化时，我们通常会修改这些文件。但是此时遇到了一个问题：</p>\n<p>当在宿主机上修改这些文件后，docker容器内查看时，这些文件并未发生对应的修改。</p>\n<p>然后通过查阅相关资料，发现该问题是由docker -v挂载文件和某些编辑器存储文件的行为共同导致 的。</p>\n<p>docker 挂载文件时，并不是挂载了某个文件的路径，而是实打实的挂载了对应的文件，即挂载了某 个指定的inode文件。<br>某些编辑器(vi)在编辑保存文件时，采用了备份、替换的策略，即编辑过程中，将变更写入新文件， 保存时，再将备份文件替换原文件，此时会导致文件的inode发生变化。<br>原inode对应的文件其实并没有发生修改。<br>因此，我们从宿主机上修改这些文件时，应该采用echo重定向等操作，避免文件的inode发生变化。</p>\n<p>附 inode：<a href=\"http://www.ruanyifeng.com/blog/2011/12/inode.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/12/inode.html</a></p>\n<p>通过 inode 这篇文章能很好的理解 Linux 的软链接和硬链接</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/\" target=\"_blank\" rel=\"noopener\">https://lrita.github.io/2017/08/18/mount-volume-to-docker-and-modify-from-host/</a></p>\n<p>在启动docker容器时，为了保证一些基础配置与宿主机保持同步，通常需要将这些配置文件挂载进docker容器，例如/etc/resolv.conf//etc/hosts//etc/localtime等。</p>\n<p>当这些配置变化时，我们通常会修改这些文件。但是此时遇到了一个问题：</p>\n<p>当在宿主机上修改这些文件后，docker容器内查看时，这些文件并未发生对应的修改。</p>\n<p>然后通过查阅相关资料，发现该问题是由docker -v挂载文件和某些编辑器存储文件的行为共同导致 的。</p>\n<p>docker 挂载文件时，并不是挂载了某个文件的路径，而是实打实的挂载了对应的文件，即挂载了某 个指定的inode文件。<br>某些编辑器(vi)在编辑保存文件时，采用了备份、替换的策略，即编辑过程中，将变更写入新文件， 保存时，再将备份文件替换原文件，此时会导致文件的inode发生变化。<br>原inode对应的文件其实并没有发生修改。<br>因此，我们从宿主机上修改这些文件时，应该采用echo重定向等操作，避免文件的inode发生变化。</p>\n<p>附 inode：<a href=\"http://www.ruanyifeng.com/blog/2011/12/inode.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/12/inode.html</a></p>\n<p>通过 inode 这篇文章能很好的理解 Linux 的软链接和硬链接</p>\n"},{"post_url":"docker-install","title":"CentOS7 安装最新版 Docker、compose、swarm、machine","date":"2018-07-16T09:22:00.000Z","_content":"## Docker 安装\n```\n1.卸载 Docker\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-selinux \\\n                docker-engine-selinux \\\n                docker-engine\n \n2.安装所需的包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n \n3.设置阿里云软件存储库\n阿里云：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n \n4.安装 Docker CE\nsudo yum install docker-ce\n \n5.启动 Docker\nsudo systemctl start docker\n \n6.通过运行 hello-world 映像验证是否已正确安装\nsudo docker run hello-world\n```\n## docker-compose 安装\n```\n1.下载最新版本的 Docker Compose (第一次执行提示失败，就多执行几次这个命令试试)\nsudo curl -L \\\nhttps://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) \\\n-o /usr/local/bin/docker-compose\n \n2.对二进制文件应用可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n \n3.测试安装\ndocker-compose --version\n \n4.docker-compose 命令\nhttps://yeasy.gitbooks.io/docker_practice/compose/commands.html\n \n5.docker-compose.yml\nhttps://yeasy.gitbooks.io/docker_practice/compose/compose_file.html\n```\n## docker-machine 安装\n```\n1.下载 Docker Machine 二进制文件并将其解压缩到 PATH (第一次执行提示失败，就多执行几次这个命令试试)\nbase=https://github.com/docker/machine/releases/download/v0.14.0 && \\\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && \\\nsudo install /tmp/docker-machine /usr/local/bin/docker-machine\n \n2.通过显示机器版本来检查安装\ndocker-machine version\n```\n## 搭建 swarm 集群\n```\n1.新版 docker 已集成 swarm，无需单独安装\n \n2.使用 docker swarm init 在管理节点初始化一个 Swarm 集群\ndocker swarm init --advertise-addr 192.168.153.150\n# 如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 --advertise-addr 指定 IP\n# 执行 docker swarm init 命令的节点自动成为管理节点\n \n3.将其他主机作为 管理节点 或 工作节点 加入 swarm 集群（以下命令在待加入节点执行）\ndocker swarm join --token [MANAGER-TOKEN||WORKER-TOKEN] [MANAGER-IP]:2377\n# 示例：docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.153.150:2377\n--------------\n注意：各机器之间要开启以下通信端口 或 关闭防火墙\n# TCP端口2377集群管理端口\n# TCP与 UDP端口7946节点之间通讯端口\n# TCP与 UDP端口4789 overlay 网络通讯端口\nfirewall-cmd --zone=public --add-port=2377/tcp --permanent\nfirewall-cmd --zone=public --add-port=7946/tcp --permanent\nfirewall-cmd --zone=public --add-port=7946/udp --permanent\nfirewall-cmd --zone=public --add-port=4789/tcp --permanent\nfirewall-cmd --zone=public --add-port=4789/udp --permanent\nfirewall-cmd --reload\n关闭防火墙：\nsudo systemctl stop firewalld.service\nsudo systemctl disable firewalld.service\n--------------\n \n4.在管理节点使用 docker node ls 查看集群\ndocker node ls\n \n5.向集群中添加工作节点，通过以下命令获取加入集群的 WORKER-TOKEN\ndocker swarm join-token worker\n向集群中添加管理节点，通过以下命令获取加入集群的 MANAGER-TOKEN\ndocker swarm join-token manager\n \n6.退出集群\n(1)如果是 manager 先降级为 worker \ndocker node demote [HOSTNAME || ID] # ID前几位即可\n(2)退出集群\ndocker swarm leave\n(3)移除节点\ndocker node rm [HOSTNAME || ID] # ID前几位即可\n# leave后该节点仍将出现在节点列表中，并将 STATUS标记为 down，已不影响 swarm操作；\n# 要从列表中删除非活动节点，使用 node rm 命令即可。\n```\n## 使用 swarm+compose 部署集群服务\n```\n1.使用 swarm+compose 部署服务\ndocker stack deploy -c docker-compose.yml [JIQUN-NAME]\n \n2.查看服务\ndocker stack ls\n \n3.移除服务\ndocker stack down [JIQUN-NAME]\n# 该命令不会移除服务所使用的 数据卷，如果你想移除数据卷请使用 docker volume rm\n```\n## 其他 Docker 常用命令\n```\n查看 swarm 集群中的服务：docker service ls\n查看 swarm 集群中某个服务的运行状态信息：docker service ps mwp_db\n查看 swarm 集群中某个服务的基础详细信息：docker service inspect mwp_db\n查看 swarm 集群中某个服务的日志：docker service logs mwp_db\n从 swarm 集群中移除某个服务：docker service rm mwp_db\n \n搜索仓库镜像：docker search nginx\n查找本地镜像：docker images nginx\n查看本地镜像列表：docker images 或 docker image ls\n删除本地镜像：docker rmi [IMAGE ID]\n强制删除本地镜像：docker rmi -f [IMAGE ID] # 一般先停止相关容器，再 docker rmi [IMAGE ID] 正常删除镜像\n \n列出本机容器 container：docker ps -a 或 docker container ls\n删除 container：docker rm [CONTAINER ID] 或 docker container rm [CONTAINER ID]\n清理所有处于终止状态的容器：docker container prune\n进入后台运行的容器 container：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh\n# docker exec 进入容器后 exit 不会导致容器停止\n创建一个新的容器并运行：docker run --name web2 -d -p 81:80 nginx:v2\n停止一个运行中的容器：docker stop [CONTAINER ID || NAMES]\n \n查看所有数据卷：docker volume ls\n删除指定数据卷：docker volume rm [VOLUME NAME]\n清理所有无主数据卷：docker volume prune\n \n查看 Image 或 Container 的信息：docker inspect [IMAGE || IMAGE ID || CONTAINER ID]\n \n查看 CentOS 系统内核版本：uname -r\n \n使用 Dockerfile 定制镜像：docker build -t nginx:v3 [DOCKERFILE PATH || URL]\n# 其中 [DOCKERFILE PATH || URL] 为 Dockerfile 文件所在目录，例：docker build -t nginx:v3 .\n \n更多命令可参考：http://www.runoob.com/docker/docker-command-manual.html\n```\n## 配置 Docker 加速器\n```\n参考：https://yeasy.gitbooks.io/docker_practice/install/mirror.html\n对于使用 systemd 的系统，在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在则新建该文件）\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ]\n}\n之后重新启动服务。\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n检查加速器是否生效：docker info\nRegistry Mirrors:\n https://registry.docker-cn.com/\n```\n更多 daemon.json 配置项参考：https://blog.csdn.net/iaiot/article/details/84679859\n\nDocker hub 地址：https://hub.docker.com/\nDocker 官方文档地址：https://docs.docker.com/\n","source":"_posts/docker-install.md","raw":"---\npost_url: docker-install\ntitle: CentOS7 安装最新版 Docker、compose、swarm、machine\ndate: 2018-07-16 17:22:00\ntags: docker\n---\n## Docker 安装\n```\n1.卸载 Docker\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-selinux \\\n                docker-engine-selinux \\\n                docker-engine\n \n2.安装所需的包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n \n3.设置阿里云软件存储库\n阿里云：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n \n4.安装 Docker CE\nsudo yum install docker-ce\n \n5.启动 Docker\nsudo systemctl start docker\n \n6.通过运行 hello-world 映像验证是否已正确安装\nsudo docker run hello-world\n```\n## docker-compose 安装\n```\n1.下载最新版本的 Docker Compose (第一次执行提示失败，就多执行几次这个命令试试)\nsudo curl -L \\\nhttps://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) \\\n-o /usr/local/bin/docker-compose\n \n2.对二进制文件应用可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n \n3.测试安装\ndocker-compose --version\n \n4.docker-compose 命令\nhttps://yeasy.gitbooks.io/docker_practice/compose/commands.html\n \n5.docker-compose.yml\nhttps://yeasy.gitbooks.io/docker_practice/compose/compose_file.html\n```\n## docker-machine 安装\n```\n1.下载 Docker Machine 二进制文件并将其解压缩到 PATH (第一次执行提示失败，就多执行几次这个命令试试)\nbase=https://github.com/docker/machine/releases/download/v0.14.0 && \\\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && \\\nsudo install /tmp/docker-machine /usr/local/bin/docker-machine\n \n2.通过显示机器版本来检查安装\ndocker-machine version\n```\n## 搭建 swarm 集群\n```\n1.新版 docker 已集成 swarm，无需单独安装\n \n2.使用 docker swarm init 在管理节点初始化一个 Swarm 集群\ndocker swarm init --advertise-addr 192.168.153.150\n# 如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 --advertise-addr 指定 IP\n# 执行 docker swarm init 命令的节点自动成为管理节点\n \n3.将其他主机作为 管理节点 或 工作节点 加入 swarm 集群（以下命令在待加入节点执行）\ndocker swarm join --token [MANAGER-TOKEN||WORKER-TOKEN] [MANAGER-IP]:2377\n# 示例：docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.153.150:2377\n--------------\n注意：各机器之间要开启以下通信端口 或 关闭防火墙\n# TCP端口2377集群管理端口\n# TCP与 UDP端口7946节点之间通讯端口\n# TCP与 UDP端口4789 overlay 网络通讯端口\nfirewall-cmd --zone=public --add-port=2377/tcp --permanent\nfirewall-cmd --zone=public --add-port=7946/tcp --permanent\nfirewall-cmd --zone=public --add-port=7946/udp --permanent\nfirewall-cmd --zone=public --add-port=4789/tcp --permanent\nfirewall-cmd --zone=public --add-port=4789/udp --permanent\nfirewall-cmd --reload\n关闭防火墙：\nsudo systemctl stop firewalld.service\nsudo systemctl disable firewalld.service\n--------------\n \n4.在管理节点使用 docker node ls 查看集群\ndocker node ls\n \n5.向集群中添加工作节点，通过以下命令获取加入集群的 WORKER-TOKEN\ndocker swarm join-token worker\n向集群中添加管理节点，通过以下命令获取加入集群的 MANAGER-TOKEN\ndocker swarm join-token manager\n \n6.退出集群\n(1)如果是 manager 先降级为 worker \ndocker node demote [HOSTNAME || ID] # ID前几位即可\n(2)退出集群\ndocker swarm leave\n(3)移除节点\ndocker node rm [HOSTNAME || ID] # ID前几位即可\n# leave后该节点仍将出现在节点列表中，并将 STATUS标记为 down，已不影响 swarm操作；\n# 要从列表中删除非活动节点，使用 node rm 命令即可。\n```\n## 使用 swarm+compose 部署集群服务\n```\n1.使用 swarm+compose 部署服务\ndocker stack deploy -c docker-compose.yml [JIQUN-NAME]\n \n2.查看服务\ndocker stack ls\n \n3.移除服务\ndocker stack down [JIQUN-NAME]\n# 该命令不会移除服务所使用的 数据卷，如果你想移除数据卷请使用 docker volume rm\n```\n## 其他 Docker 常用命令\n```\n查看 swarm 集群中的服务：docker service ls\n查看 swarm 集群中某个服务的运行状态信息：docker service ps mwp_db\n查看 swarm 集群中某个服务的基础详细信息：docker service inspect mwp_db\n查看 swarm 集群中某个服务的日志：docker service logs mwp_db\n从 swarm 集群中移除某个服务：docker service rm mwp_db\n \n搜索仓库镜像：docker search nginx\n查找本地镜像：docker images nginx\n查看本地镜像列表：docker images 或 docker image ls\n删除本地镜像：docker rmi [IMAGE ID]\n强制删除本地镜像：docker rmi -f [IMAGE ID] # 一般先停止相关容器，再 docker rmi [IMAGE ID] 正常删除镜像\n \n列出本机容器 container：docker ps -a 或 docker container ls\n删除 container：docker rm [CONTAINER ID] 或 docker container rm [CONTAINER ID]\n清理所有处于终止状态的容器：docker container prune\n进入后台运行的容器 container：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh\n# docker exec 进入容器后 exit 不会导致容器停止\n创建一个新的容器并运行：docker run --name web2 -d -p 81:80 nginx:v2\n停止一个运行中的容器：docker stop [CONTAINER ID || NAMES]\n \n查看所有数据卷：docker volume ls\n删除指定数据卷：docker volume rm [VOLUME NAME]\n清理所有无主数据卷：docker volume prune\n \n查看 Image 或 Container 的信息：docker inspect [IMAGE || IMAGE ID || CONTAINER ID]\n \n查看 CentOS 系统内核版本：uname -r\n \n使用 Dockerfile 定制镜像：docker build -t nginx:v3 [DOCKERFILE PATH || URL]\n# 其中 [DOCKERFILE PATH || URL] 为 Dockerfile 文件所在目录，例：docker build -t nginx:v3 .\n \n更多命令可参考：http://www.runoob.com/docker/docker-command-manual.html\n```\n## 配置 Docker 加速器\n```\n参考：https://yeasy.gitbooks.io/docker_practice/install/mirror.html\n对于使用 systemd 的系统，在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在则新建该文件）\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ]\n}\n之后重新启动服务。\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n检查加速器是否生效：docker info\nRegistry Mirrors:\n https://registry.docker-cn.com/\n```\n更多 daemon.json 配置项参考：https://blog.csdn.net/iaiot/article/details/84679859\n\nDocker hub 地址：https://hub.docker.com/\nDocker 官方文档地址：https://docs.docker.com/\n","slug":"docker-install","published":1,"updated":"2019-03-24T13:31:33.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp7001n05abfhjqy9jh","content":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.卸载 Docker</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-selinux \\</span><br><span class=\"line\">                docker-engine-selinux \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\"> </span><br><span class=\"line\">2.安装所需的包</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"> </span><br><span class=\"line\">3.设置阿里云软件存储库</span><br><span class=\"line\">阿里云：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"> </span><br><span class=\"line\">4.安装 Docker CE</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"> </span><br><span class=\"line\">5.启动 Docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"> </span><br><span class=\"line\">6.通过运行 hello-world 映像验证是否已正确安装</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-安装\"><a href=\"#docker-compose-安装\" class=\"headerlink\" title=\"docker-compose 安装\"></a>docker-compose 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.下载最新版本的 Docker Compose (第一次执行提示失败，就多执行几次这个命令试试)</span><br><span class=\"line\">sudo curl -L \\</span><br><span class=\"line\">https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) \\</span><br><span class=\"line\">-o /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\">2.对二进制文件应用可执行权限</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\">3.测试安装</span><br><span class=\"line\">docker-compose --version</span><br><span class=\"line\"> </span><br><span class=\"line\">4.docker-compose 命令</span><br><span class=\"line\">https://yeasy.gitbooks.io/docker_practice/compose/commands.html</span><br><span class=\"line\"> </span><br><span class=\"line\">5.docker-compose.yml</span><br><span class=\"line\">https://yeasy.gitbooks.io/docker_practice/compose/compose_file.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-machine-安装\"><a href=\"#docker-machine-安装\" class=\"headerlink\" title=\"docker-machine 安装\"></a>docker-machine 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.下载 Docker Machine 二进制文件并将其解压缩到 PATH (第一次执行提示失败，就多执行几次这个命令试试)</span><br><span class=\"line\">base=https://github.com/docker/machine/releases/download/v0.14.0 &amp;&amp; \\</span><br><span class=\"line\">curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp; \\</span><br><span class=\"line\">sudo install /tmp/docker-machine /usr/local/bin/docker-machine</span><br><span class=\"line\"> </span><br><span class=\"line\">2.通过显示机器版本来检查安装</span><br><span class=\"line\">docker-machine version</span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建-swarm-集群\"><a href=\"#搭建-swarm-集群\" class=\"headerlink\" title=\"搭建 swarm 集群\"></a>搭建 swarm 集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.新版 docker 已集成 swarm，无需单独安装</span><br><span class=\"line\"> </span><br><span class=\"line\">2.使用 docker swarm init 在管理节点初始化一个 Swarm 集群</span><br><span class=\"line\">docker swarm init --advertise-addr 192.168.153.150</span><br><span class=\"line\"># 如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 --advertise-addr 指定 IP</span><br><span class=\"line\"># 执行 docker swarm init 命令的节点自动成为管理节点</span><br><span class=\"line\"> </span><br><span class=\"line\">3.将其他主机作为 管理节点 或 工作节点 加入 swarm 集群（以下命令在待加入节点执行）</span><br><span class=\"line\">docker swarm join --token [MANAGER-TOKEN||WORKER-TOKEN] [MANAGER-IP]:2377</span><br><span class=\"line\"># 示例：docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.153.150:2377</span><br><span class=\"line\">--------------</span><br><span class=\"line\">注意：各机器之间要开启以下通信端口 或 关闭防火墙</span><br><span class=\"line\"># TCP端口2377集群管理端口</span><br><span class=\"line\"># TCP与 UDP端口7946节点之间通讯端口</span><br><span class=\"line\"># TCP与 UDP端口4789 overlay 网络通讯端口</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">关闭防火墙：</span><br><span class=\"line\">sudo systemctl stop firewalld.service</span><br><span class=\"line\">sudo systemctl disable firewalld.service</span><br><span class=\"line\">--------------</span><br><span class=\"line\"> </span><br><span class=\"line\">4.在管理节点使用 docker node ls 查看集群</span><br><span class=\"line\">docker node ls</span><br><span class=\"line\"> </span><br><span class=\"line\">5.向集群中添加工作节点，通过以下命令获取加入集群的 WORKER-TOKEN</span><br><span class=\"line\">docker swarm join-token worker</span><br><span class=\"line\">向集群中添加管理节点，通过以下命令获取加入集群的 MANAGER-TOKEN</span><br><span class=\"line\">docker swarm join-token manager</span><br><span class=\"line\"> </span><br><span class=\"line\">6.退出集群</span><br><span class=\"line\">(1)如果是 manager 先降级为 worker </span><br><span class=\"line\">docker node demote [HOSTNAME || ID] # ID前几位即可</span><br><span class=\"line\">(2)退出集群</span><br><span class=\"line\">docker swarm leave</span><br><span class=\"line\">(3)移除节点</span><br><span class=\"line\">docker node rm [HOSTNAME || ID] # ID前几位即可</span><br><span class=\"line\"># leave后该节点仍将出现在节点列表中，并将 STATUS标记为 down，已不影响 swarm操作；</span><br><span class=\"line\"># 要从列表中删除非活动节点，使用 node rm 命令即可。</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-swarm-compose-部署集群服务\"><a href=\"#使用-swarm-compose-部署集群服务\" class=\"headerlink\" title=\"使用 swarm+compose 部署集群服务\"></a>使用 swarm+compose 部署集群服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用 swarm+compose 部署服务</span><br><span class=\"line\">docker stack deploy -c docker-compose.yml [JIQUN-NAME]</span><br><span class=\"line\"> </span><br><span class=\"line\">2.查看服务</span><br><span class=\"line\">docker stack ls</span><br><span class=\"line\"> </span><br><span class=\"line\">3.移除服务</span><br><span class=\"line\">docker stack down [JIQUN-NAME]</span><br><span class=\"line\"># 该命令不会移除服务所使用的 数据卷，如果你想移除数据卷请使用 docker volume rm</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他-Docker-常用命令\"><a href=\"#其他-Docker-常用命令\" class=\"headerlink\" title=\"其他 Docker 常用命令\"></a>其他 Docker 常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看 swarm 集群中的服务：docker service ls</span><br><span class=\"line\">查看 swarm 集群中某个服务的运行状态信息：docker service ps mwp_db</span><br><span class=\"line\">查看 swarm 集群中某个服务的基础详细信息：docker service inspect mwp_db</span><br><span class=\"line\">查看 swarm 集群中某个服务的日志：docker service logs mwp_db</span><br><span class=\"line\">从 swarm 集群中移除某个服务：docker service rm mwp_db</span><br><span class=\"line\"> </span><br><span class=\"line\">搜索仓库镜像：docker search nginx</span><br><span class=\"line\">查找本地镜像：docker images nginx</span><br><span class=\"line\">查看本地镜像列表：docker images 或 docker image ls</span><br><span class=\"line\">删除本地镜像：docker rmi [IMAGE ID]</span><br><span class=\"line\">强制删除本地镜像：docker rmi -f [IMAGE ID] # 一般先停止相关容器，再 docker rmi [IMAGE ID] 正常删除镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">列出本机容器 container：docker ps -a 或 docker container ls</span><br><span class=\"line\">删除 container：docker rm [CONTAINER ID] 或 docker container rm [CONTAINER ID]</span><br><span class=\"line\">清理所有处于终止状态的容器：docker container prune</span><br><span class=\"line\">进入后台运行的容器 container：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh</span><br><span class=\"line\"># docker exec 进入容器后 exit 不会导致容器停止</span><br><span class=\"line\">创建一个新的容器并运行：docker run --name web2 -d -p 81:80 nginx:v2</span><br><span class=\"line\">停止一个运行中的容器：docker stop [CONTAINER ID || NAMES]</span><br><span class=\"line\"> </span><br><span class=\"line\">查看所有数据卷：docker volume ls</span><br><span class=\"line\">删除指定数据卷：docker volume rm [VOLUME NAME]</span><br><span class=\"line\">清理所有无主数据卷：docker volume prune</span><br><span class=\"line\"> </span><br><span class=\"line\">查看 Image 或 Container 的信息：docker inspect [IMAGE || IMAGE ID || CONTAINER ID]</span><br><span class=\"line\"> </span><br><span class=\"line\">查看 CentOS 系统内核版本：uname -r</span><br><span class=\"line\"> </span><br><span class=\"line\">使用 Dockerfile 定制镜像：docker build -t nginx:v3 [DOCKERFILE PATH || URL]</span><br><span class=\"line\"># 其中 [DOCKERFILE PATH || URL] 为 Dockerfile 文件所在目录，例：docker build -t nginx:v3 .</span><br><span class=\"line\"> </span><br><span class=\"line\">更多命令可参考：http://www.runoob.com/docker/docker-command-manual.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-Docker-加速器\"><a href=\"#配置-Docker-加速器\" class=\"headerlink\" title=\"配置 Docker 加速器\"></a>配置 Docker 加速器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考：https://yeasy.gitbooks.io/docker_practice/install/mirror.html</span><br><span class=\"line\">对于使用 systemd 的系统，在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在则新建该文件）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">之后重新启动服务。</span><br><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br><span class=\"line\">检查加速器是否生效：docker info</span><br><span class=\"line\">Registry Mirrors:</span><br><span class=\"line\"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure>\n<p>更多 daemon.json 配置项参考：<a href=\"https://blog.csdn.net/iaiot/article/details/84679859\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/84679859</a></p>\n<p>Docker hub 地址：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br>Docker 官方文档地址：<a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.卸载 Docker</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-selinux \\</span><br><span class=\"line\">                docker-engine-selinux \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\"> </span><br><span class=\"line\">2.安装所需的包</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"> </span><br><span class=\"line\">3.设置阿里云软件存储库</span><br><span class=\"line\">阿里云：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"> </span><br><span class=\"line\">4.安装 Docker CE</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"> </span><br><span class=\"line\">5.启动 Docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"> </span><br><span class=\"line\">6.通过运行 hello-world 映像验证是否已正确安装</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-安装\"><a href=\"#docker-compose-安装\" class=\"headerlink\" title=\"docker-compose 安装\"></a>docker-compose 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.下载最新版本的 Docker Compose (第一次执行提示失败，就多执行几次这个命令试试)</span><br><span class=\"line\">sudo curl -L \\</span><br><span class=\"line\">https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) \\</span><br><span class=\"line\">-o /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\">2.对二进制文件应用可执行权限</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"> </span><br><span class=\"line\">3.测试安装</span><br><span class=\"line\">docker-compose --version</span><br><span class=\"line\"> </span><br><span class=\"line\">4.docker-compose 命令</span><br><span class=\"line\">https://yeasy.gitbooks.io/docker_practice/compose/commands.html</span><br><span class=\"line\"> </span><br><span class=\"line\">5.docker-compose.yml</span><br><span class=\"line\">https://yeasy.gitbooks.io/docker_practice/compose/compose_file.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-machine-安装\"><a href=\"#docker-machine-安装\" class=\"headerlink\" title=\"docker-machine 安装\"></a>docker-machine 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.下载 Docker Machine 二进制文件并将其解压缩到 PATH (第一次执行提示失败，就多执行几次这个命令试试)</span><br><span class=\"line\">base=https://github.com/docker/machine/releases/download/v0.14.0 &amp;&amp; \\</span><br><span class=\"line\">curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp; \\</span><br><span class=\"line\">sudo install /tmp/docker-machine /usr/local/bin/docker-machine</span><br><span class=\"line\"> </span><br><span class=\"line\">2.通过显示机器版本来检查安装</span><br><span class=\"line\">docker-machine version</span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建-swarm-集群\"><a href=\"#搭建-swarm-集群\" class=\"headerlink\" title=\"搭建 swarm 集群\"></a>搭建 swarm 集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.新版 docker 已集成 swarm，无需单独安装</span><br><span class=\"line\"> </span><br><span class=\"line\">2.使用 docker swarm init 在管理节点初始化一个 Swarm 集群</span><br><span class=\"line\">docker swarm init --advertise-addr 192.168.153.150</span><br><span class=\"line\"># 如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 --advertise-addr 指定 IP</span><br><span class=\"line\"># 执行 docker swarm init 命令的节点自动成为管理节点</span><br><span class=\"line\"> </span><br><span class=\"line\">3.将其他主机作为 管理节点 或 工作节点 加入 swarm 集群（以下命令在待加入节点执行）</span><br><span class=\"line\">docker swarm join --token [MANAGER-TOKEN||WORKER-TOKEN] [MANAGER-IP]:2377</span><br><span class=\"line\"># 示例：docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.153.150:2377</span><br><span class=\"line\">--------------</span><br><span class=\"line\">注意：各机器之间要开启以下通信端口 或 关闭防火墙</span><br><span class=\"line\"># TCP端口2377集群管理端口</span><br><span class=\"line\"># TCP与 UDP端口7946节点之间通讯端口</span><br><span class=\"line\"># TCP与 UDP端口4789 overlay 网络通讯端口</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">关闭防火墙：</span><br><span class=\"line\">sudo systemctl stop firewalld.service</span><br><span class=\"line\">sudo systemctl disable firewalld.service</span><br><span class=\"line\">--------------</span><br><span class=\"line\"> </span><br><span class=\"line\">4.在管理节点使用 docker node ls 查看集群</span><br><span class=\"line\">docker node ls</span><br><span class=\"line\"> </span><br><span class=\"line\">5.向集群中添加工作节点，通过以下命令获取加入集群的 WORKER-TOKEN</span><br><span class=\"line\">docker swarm join-token worker</span><br><span class=\"line\">向集群中添加管理节点，通过以下命令获取加入集群的 MANAGER-TOKEN</span><br><span class=\"line\">docker swarm join-token manager</span><br><span class=\"line\"> </span><br><span class=\"line\">6.退出集群</span><br><span class=\"line\">(1)如果是 manager 先降级为 worker </span><br><span class=\"line\">docker node demote [HOSTNAME || ID] # ID前几位即可</span><br><span class=\"line\">(2)退出集群</span><br><span class=\"line\">docker swarm leave</span><br><span class=\"line\">(3)移除节点</span><br><span class=\"line\">docker node rm [HOSTNAME || ID] # ID前几位即可</span><br><span class=\"line\"># leave后该节点仍将出现在节点列表中，并将 STATUS标记为 down，已不影响 swarm操作；</span><br><span class=\"line\"># 要从列表中删除非活动节点，使用 node rm 命令即可。</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-swarm-compose-部署集群服务\"><a href=\"#使用-swarm-compose-部署集群服务\" class=\"headerlink\" title=\"使用 swarm+compose 部署集群服务\"></a>使用 swarm+compose 部署集群服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用 swarm+compose 部署服务</span><br><span class=\"line\">docker stack deploy -c docker-compose.yml [JIQUN-NAME]</span><br><span class=\"line\"> </span><br><span class=\"line\">2.查看服务</span><br><span class=\"line\">docker stack ls</span><br><span class=\"line\"> </span><br><span class=\"line\">3.移除服务</span><br><span class=\"line\">docker stack down [JIQUN-NAME]</span><br><span class=\"line\"># 该命令不会移除服务所使用的 数据卷，如果你想移除数据卷请使用 docker volume rm</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他-Docker-常用命令\"><a href=\"#其他-Docker-常用命令\" class=\"headerlink\" title=\"其他 Docker 常用命令\"></a>其他 Docker 常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看 swarm 集群中的服务：docker service ls</span><br><span class=\"line\">查看 swarm 集群中某个服务的运行状态信息：docker service ps mwp_db</span><br><span class=\"line\">查看 swarm 集群中某个服务的基础详细信息：docker service inspect mwp_db</span><br><span class=\"line\">查看 swarm 集群中某个服务的日志：docker service logs mwp_db</span><br><span class=\"line\">从 swarm 集群中移除某个服务：docker service rm mwp_db</span><br><span class=\"line\"> </span><br><span class=\"line\">搜索仓库镜像：docker search nginx</span><br><span class=\"line\">查找本地镜像：docker images nginx</span><br><span class=\"line\">查看本地镜像列表：docker images 或 docker image ls</span><br><span class=\"line\">删除本地镜像：docker rmi [IMAGE ID]</span><br><span class=\"line\">强制删除本地镜像：docker rmi -f [IMAGE ID] # 一般先停止相关容器，再 docker rmi [IMAGE ID] 正常删除镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">列出本机容器 container：docker ps -a 或 docker container ls</span><br><span class=\"line\">删除 container：docker rm [CONTAINER ID] 或 docker container rm [CONTAINER ID]</span><br><span class=\"line\">清理所有处于终止状态的容器：docker container prune</span><br><span class=\"line\">进入后台运行的容器 container：docker exec -it [CONTAINER_NAME || CONTAINER_ID] /bin/sh</span><br><span class=\"line\"># docker exec 进入容器后 exit 不会导致容器停止</span><br><span class=\"line\">创建一个新的容器并运行：docker run --name web2 -d -p 81:80 nginx:v2</span><br><span class=\"line\">停止一个运行中的容器：docker stop [CONTAINER ID || NAMES]</span><br><span class=\"line\"> </span><br><span class=\"line\">查看所有数据卷：docker volume ls</span><br><span class=\"line\">删除指定数据卷：docker volume rm [VOLUME NAME]</span><br><span class=\"line\">清理所有无主数据卷：docker volume prune</span><br><span class=\"line\"> </span><br><span class=\"line\">查看 Image 或 Container 的信息：docker inspect [IMAGE || IMAGE ID || CONTAINER ID]</span><br><span class=\"line\"> </span><br><span class=\"line\">查看 CentOS 系统内核版本：uname -r</span><br><span class=\"line\"> </span><br><span class=\"line\">使用 Dockerfile 定制镜像：docker build -t nginx:v3 [DOCKERFILE PATH || URL]</span><br><span class=\"line\"># 其中 [DOCKERFILE PATH || URL] 为 Dockerfile 文件所在目录，例：docker build -t nginx:v3 .</span><br><span class=\"line\"> </span><br><span class=\"line\">更多命令可参考：http://www.runoob.com/docker/docker-command-manual.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-Docker-加速器\"><a href=\"#配置-Docker-加速器\" class=\"headerlink\" title=\"配置 Docker 加速器\"></a>配置 Docker 加速器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考：https://yeasy.gitbooks.io/docker_practice/install/mirror.html</span><br><span class=\"line\">对于使用 systemd 的系统，在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在则新建该文件）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">之后重新启动服务。</span><br><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br><span class=\"line\">检查加速器是否生效：docker info</span><br><span class=\"line\">Registry Mirrors:</span><br><span class=\"line\"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure>\n<p>更多 daemon.json 配置项参考：<a href=\"https://blog.csdn.net/iaiot/article/details/84679859\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/84679859</a></p>\n<p>Docker hub 地址：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br>Docker 官方文档地址：<a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></p>\n"},{"title":"docker volume 挂载文件后，容器内更新此文件，就报 Device or resource busy 不能保存文件","post_url":"docker-volume-device-or-resource-busy","date":"2019-01-04T09:52:08.000Z","_content":"\n## 问题\nError moving temp DB file temp-1.rdb on the final destination dump.rdb (in server root dir /usr/local/redis/data): Device or resource busy\n## 原因\n挂载路径改为目录，而不是文件\n## 解决\n如：/root/compose/data-volumes/redis/dump.rdb:/usr/local/redis/data/dump.rdb\n改为\n/root/compose/data-volumes/redis:/usr/local/redis/data\n## 拓展\n另外，如果挂载的是目录，如果要更新目录内容，也不能删除再创建，而是要操作挂载目录内部的文件。\n不然就挂载不到容器内了，只能重启容器。","source":"_posts/docker-volume-device-or-resource-busy.md","raw":"---\ntitle: docker volume 挂载文件后，容器内更新此文件，就报 Device or resource busy 不能保存文件\npost_url: docker-volume-device-or-resource-busy\ndate: 2019-01-04 17:52:08\ntags: docker\n---\n\n## 问题\nError moving temp DB file temp-1.rdb on the final destination dump.rdb (in server root dir /usr/local/redis/data): Device or resource busy\n## 原因\n挂载路径改为目录，而不是文件\n## 解决\n如：/root/compose/data-volumes/redis/dump.rdb:/usr/local/redis/data/dump.rdb\n改为\n/root/compose/data-volumes/redis:/usr/local/redis/data\n## 拓展\n另外，如果挂载的是目录，如果要更新目录内容，也不能删除再创建，而是要操作挂载目录内部的文件。\n不然就挂载不到容器内了，只能重启容器。","slug":"docker-volume-device-or-resource-busy","published":1,"updated":"2019-03-25T13:54:26.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp8001q05abt0nwptde","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Error moving temp DB file temp-1.rdb on the final destination dump.rdb (in server root dir /usr/local/redis/data): Device or resource busy</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>挂载路径改为目录，而不是文件</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>如：/root/compose/data-volumes/redis/dump.rdb:/usr/local/redis/data/dump.rdb<br>改为<br>/root/compose/data-volumes/redis:/usr/local/redis/data</p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>另外，如果挂载的是目录，如果要更新目录内容，也不能删除再创建，而是要操作挂载目录内部的文件。<br>不然就挂载不到容器内了，只能重启容器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Error moving temp DB file temp-1.rdb on the final destination dump.rdb (in server root dir /usr/local/redis/data): Device or resource busy</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>挂载路径改为目录，而不是文件</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>如：/root/compose/data-volumes/redis/dump.rdb:/usr/local/redis/data/dump.rdb<br>改为<br>/root/compose/data-volumes/redis:/usr/local/redis/data</p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>另外，如果挂载的是目录，如果要更新目录内容，也不能删除再创建，而是要操作挂载目录内部的文件。<br>不然就挂载不到容器内了，只能重启容器。</p>\n"},{"post_url":"eclipse","title":"旧版本eclipse安装旧版本maven、server等插件","date":"2017-09-01T09:29:48.000Z","_content":"\n1. 需要装旧版本eclipse，要用里面的插件；\n2. 比如我要用到maven和server；\n\n3. 下载相同版本下的eclipse-jee和eclipse-java（因为eclipse-jee中有server，eclipse-java中有maven），\n\n4. 分别解压后打开eclipse目录，直接复制eclipse-java目录下的所有文件到eclipse-jee根目录，提示有重复文件直接跳过；\n\n5. 复制完后打开目标eclipse-jee目录下的eclipse，两个eclipse中的插件在这一个eclipse中就都有了，而且版本完全兼容；\n\n6. eclipse各个版本官网下载地址：http://www.eclipse.org/downloads/packages/release/Juno/SR2\n","source":"_posts/eclipse.md","raw":"---\npost_url: eclipse\ntitle: 旧版本eclipse安装旧版本maven、server等插件\ndate: 2017-09-01 17:29:48\ntags: eclipse\n---\n\n1. 需要装旧版本eclipse，要用里面的插件；\n2. 比如我要用到maven和server；\n\n3. 下载相同版本下的eclipse-jee和eclipse-java（因为eclipse-jee中有server，eclipse-java中有maven），\n\n4. 分别解压后打开eclipse目录，直接复制eclipse-java目录下的所有文件到eclipse-jee根目录，提示有重复文件直接跳过；\n\n5. 复制完后打开目标eclipse-jee目录下的eclipse，两个eclipse中的插件在这一个eclipse中就都有了，而且版本完全兼容；\n\n6. eclipse各个版本官网下载地址：http://www.eclipse.org/downloads/packages/release/Juno/SR2\n","slug":"eclipse","published":1,"updated":"2019-03-24T13:45:57.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp9001s05abzterl86r","content":"<ol>\n<li>需要装旧版本eclipse，要用里面的插件；</li>\n<li><p>比如我要用到maven和server；</p>\n</li>\n<li><p>下载相同版本下的eclipse-jee和eclipse-java（因为eclipse-jee中有server，eclipse-java中有maven），</p>\n</li>\n<li><p>分别解压后打开eclipse目录，直接复制eclipse-java目录下的所有文件到eclipse-jee根目录，提示有重复文件直接跳过；</p>\n</li>\n<li><p>复制完后打开目标eclipse-jee目录下的eclipse，两个eclipse中的插件在这一个eclipse中就都有了，而且版本完全兼容；</p>\n</li>\n<li><p>eclipse各个版本官网下载地址：<a href=\"http://www.eclipse.org/downloads/packages/release/Juno/SR2\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/downloads/packages/release/Juno/SR2</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>需要装旧版本eclipse，要用里面的插件；</li>\n<li><p>比如我要用到maven和server；</p>\n</li>\n<li><p>下载相同版本下的eclipse-jee和eclipse-java（因为eclipse-jee中有server，eclipse-java中有maven），</p>\n</li>\n<li><p>分别解压后打开eclipse目录，直接复制eclipse-java目录下的所有文件到eclipse-jee根目录，提示有重复文件直接跳过；</p>\n</li>\n<li><p>复制完后打开目标eclipse-jee目录下的eclipse，两个eclipse中的插件在这一个eclipse中就都有了，而且版本完全兼容；</p>\n</li>\n<li><p>eclipse各个版本官网下载地址：<a href=\"http://www.eclipse.org/downloads/packages/release/Juno/SR2\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/downloads/packages/release/Juno/SR2</a></p>\n</li>\n</ol>\n"},{"post_url":"elasticsearch-head","title":"elasticsearch 笔记 elasticsearch-head","date":"2018-11-20T14:21:17.000Z","_content":"1. elasticsearch5.0 以上版本安装 elasticsearch-head\n\nes5.1 中，elasticsearch-head\n不能放在 elasticsearch 的 plugins、modules 目录下\n不能使用 elasticsearch-plugin install\n直接启动 elasticsearch 即可\n安装 elasticsearch-head\nelasticsearch/config/elasticsearch.yml 中添加\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n下载 elasticsearch-head 或者 git clone 到随便一个文件夹\n\n安装 nodejs\ncd /path/to/elasticsearch-head\nnpm install -g grunt-cli\nnpm install\ngrunt server\nhttp://localhost:9100/\nEnjoy it.\n参考地址：https://segmentfault.com/q/1010000007827533\nelasticsearch-head 地址：https://github.com/mobz/elasticsearch-head\n\n \n\n2. elasticsearch-head 插件 更方便\n![](/images/20181120222005471.png)\n\n\n3. elsaticsearch\n后台启动：./bin/elasticsearch –d\n查看es进程号：ps –ef | grep elsatic\n关闭：kill -9 es进程号","source":"_posts/elasticsearch-head.md","raw":"---\npost_url: elasticsearch-head\ntitle: elasticsearch 笔记 elasticsearch-head\ndate: 2018-11-20 22:21:17\ntags: elasticsearch\n---\n1. elasticsearch5.0 以上版本安装 elasticsearch-head\n\nes5.1 中，elasticsearch-head\n不能放在 elasticsearch 的 plugins、modules 目录下\n不能使用 elasticsearch-plugin install\n直接启动 elasticsearch 即可\n安装 elasticsearch-head\nelasticsearch/config/elasticsearch.yml 中添加\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n下载 elasticsearch-head 或者 git clone 到随便一个文件夹\n\n安装 nodejs\ncd /path/to/elasticsearch-head\nnpm install -g grunt-cli\nnpm install\ngrunt server\nhttp://localhost:9100/\nEnjoy it.\n参考地址：https://segmentfault.com/q/1010000007827533\nelasticsearch-head 地址：https://github.com/mobz/elasticsearch-head\n\n \n\n2. elasticsearch-head 插件 更方便\n![](/images/20181120222005471.png)\n\n\n3. elsaticsearch\n后台启动：./bin/elasticsearch –d\n查看es进程号：ps –ef | grep elsatic\n关闭：kill -9 es进程号","slug":"elasticsearch-head","published":1,"updated":"2019-03-24T10:04:43.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtp9001v05abv87hfg2r","content":"<ol>\n<li>elasticsearch5.0 以上版本安装 elasticsearch-head</li>\n</ol>\n<p>es5.1 中，elasticsearch-head<br>不能放在 elasticsearch 的 plugins、modules 目录下<br>不能使用 elasticsearch-plugin install<br>直接启动 elasticsearch 即可<br>安装 elasticsearch-head<br>elasticsearch/config/elasticsearch.yml 中添加<br>http.cors.enabled: true<br>http.cors.allow-origin: “*”<br>下载 elasticsearch-head 或者 git clone 到随便一个文件夹</p>\n<p>安装 nodejs<br>cd /path/to/elasticsearch-head<br>npm install -g grunt-cli<br>npm install<br>grunt server<br><a href=\"http://localhost:9100/\" target=\"_blank\" rel=\"noopener\">http://localhost:9100/</a><br>Enjoy it.<br>参考地址：<a href=\"https://segmentfault.com/q/1010000007827533\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000007827533</a><br>elasticsearch-head 地址：<a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"noopener\">https://github.com/mobz/elasticsearch-head</a></p>\n<ol start=\"2\">\n<li>elasticsearch-head 插件 更方便<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181120222005471.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>elsaticsearch<br>后台启动：./bin/elasticsearch –d<br>查看es进程号：ps –ef | grep elsatic<br>关闭：kill -9 es进程号</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>elasticsearch5.0 以上版本安装 elasticsearch-head</li>\n</ol>\n<p>es5.1 中，elasticsearch-head<br>不能放在 elasticsearch 的 plugins、modules 目录下<br>不能使用 elasticsearch-plugin install<br>直接启动 elasticsearch 即可<br>安装 elasticsearch-head<br>elasticsearch/config/elasticsearch.yml 中添加<br>http.cors.enabled: true<br>http.cors.allow-origin: “*”<br>下载 elasticsearch-head 或者 git clone 到随便一个文件夹</p>\n<p>安装 nodejs<br>cd /path/to/elasticsearch-head<br>npm install -g grunt-cli<br>npm install<br>grunt server<br><a href=\"http://localhost:9100/\" target=\"_blank\" rel=\"noopener\">http://localhost:9100/</a><br>Enjoy it.<br>参考地址：<a href=\"https://segmentfault.com/q/1010000007827533\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000007827533</a><br>elasticsearch-head 地址：<a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"noopener\">https://github.com/mobz/elasticsearch-head</a></p>\n<ol start=\"2\">\n<li>elasticsearch-head 插件 更方便<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181120222005471.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>elsaticsearch<br>后台启动：./bin/elasticsearch –d<br>查看es进程号：ps –ef | grep elsatic<br>关闭：kill -9 es进程号</li>\n</ol>\n"},{"post_url":"elasticsearch-notes","title":"『转载』Elasticsearch 笔记 倒排索引 keyword 和 text","date":"2019-03-19T01:42:54.000Z","_content":"\n## 倒排索引(Inverted Index)\n倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\n原文：http://www.cnblogs.com/zlslch/p/6440114.html  \n![](/images/20190319101437635.png)\n![](/images/20190319101449412.png)\n**单词ID**：记录每个单词的单词编号；\n**单词**：对应的单词；\n**文档频率**：代表文档集合中有多少个文档包含某个单词\n**倒排列表**：包含单词ID及其他必要信息\n**DocId**：单词出现的文档id\n**TF**：单词在某个文档中出现的次数\n**POS**：单词在文档中出现的位置\n     以单词“加盟”为例，其单词编号为6，文档频率为3，代表整个文档集合中有三个文档包含这个单词，对应的倒排列表为{(2;1;<4>),(3;1;<7>),(5;1;<5>)}，含义是在文档2，3，5出现过这个单词，在每个文档的出现过1次，单词“加盟”在第一个文档的POS是4，即文档的第四个单词是“加盟”，其他的类似。\n这个倒排索引已经是一个非常完备的索引系统，实际搜索系统的索引结构基本如此。\n\n \n## 中文分词\nhttps://github.com/medcl/elasticsearch-analysis-ik\nhttp://www.cnblogs.com/zlslch/p/6440373.html\n\n\n## keyword 和 text\nkeyword：不进行分词，直接索引、支持模糊、精确查询、支持聚合\ntext：会分词，然后进行索引、支持模糊、精确查询、不支持聚合\n默认的动态模板，可以同时支持两种类型\n参考：https://elasticsearch.cn/question/2099\nhttps://www.jianshu.com/p/0d13dd7d813a\nhttps://blog.csdn.net/u011652364/article/details/78581737","source":"_posts/elasticsearch-notes.md","raw":"---\npost_url: elasticsearch-notes\ntitle: 『转载』Elasticsearch 笔记 倒排索引 keyword 和 text\ndate: 2019-03-19 09:42:54\ntags: elasticsearch\n---\n\n## 倒排索引(Inverted Index)\n倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\n原文：http://www.cnblogs.com/zlslch/p/6440114.html  \n![](/images/20190319101437635.png)\n![](/images/20190319101449412.png)\n**单词ID**：记录每个单词的单词编号；\n**单词**：对应的单词；\n**文档频率**：代表文档集合中有多少个文档包含某个单词\n**倒排列表**：包含单词ID及其他必要信息\n**DocId**：单词出现的文档id\n**TF**：单词在某个文档中出现的次数\n**POS**：单词在文档中出现的位置\n     以单词“加盟”为例，其单词编号为6，文档频率为3，代表整个文档集合中有三个文档包含这个单词，对应的倒排列表为{(2;1;<4>),(3;1;<7>),(5;1;<5>)}，含义是在文档2，3，5出现过这个单词，在每个文档的出现过1次，单词“加盟”在第一个文档的POS是4，即文档的第四个单词是“加盟”，其他的类似。\n这个倒排索引已经是一个非常完备的索引系统，实际搜索系统的索引结构基本如此。\n\n \n## 中文分词\nhttps://github.com/medcl/elasticsearch-analysis-ik\nhttp://www.cnblogs.com/zlslch/p/6440373.html\n\n\n## keyword 和 text\nkeyword：不进行分词，直接索引、支持模糊、精确查询、支持聚合\ntext：会分词，然后进行索引、支持模糊、精确查询、不支持聚合\n默认的动态模板，可以同时支持两种类型\n参考：https://elasticsearch.cn/question/2099\nhttps://www.jianshu.com/p/0d13dd7d813a\nhttps://blog.csdn.net/u011652364/article/details/78581737","slug":"elasticsearch-notes","published":1,"updated":"2019-03-25T13:54:48.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpa001x05abmgqie277","content":"<h2 id=\"倒排索引-Inverted-Index\"><a href=\"#倒排索引-Inverted-Index\" class=\"headerlink\" title=\"倒排索引(Inverted Index)\"></a>倒排索引(Inverted Index)</h2><p>倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。<br>原文：<a href=\"http://www.cnblogs.com/zlslch/p/6440114.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zlslch/p/6440114.html</a><br><img src=\"/images/20190319101437635.png\" alt><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190319101449412.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><strong>单词ID</strong>：记录每个单词的单词编号；<br><strong>单词</strong>：对应的单词；<br><strong>文档频率</strong>：代表文档集合中有多少个文档包含某个单词<br><strong>倒排列表</strong>：包含单词ID及其他必要信息<br><strong>DocId</strong>：单词出现的文档id<br><strong>TF</strong>：单词在某个文档中出现的次数<br><strong>POS</strong>：单词在文档中出现的位置<br>     以单词“加盟”为例，其单词编号为6，文档频率为3，代表整个文档集合中有三个文档包含这个单词，对应的倒排列表为{(2;1;<4>),(3;1;<7>),(5;1;<5>)}，含义是在文档2，3，5出现过这个单词，在每个文档的出现过1次，单词“加盟”在第一个文档的POS是4，即文档的第四个单词是“加盟”，其他的类似。<br>这个倒排索引已经是一个非常完备的索引系统，实际搜索系统的索引结构基本如此。</5></7></4></p>\n<h2 id=\"中文分词\"><a href=\"#中文分词\" class=\"headerlink\" title=\"中文分词\"></a>中文分词</h2><p><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-analysis-ik</a><br><a href=\"http://www.cnblogs.com/zlslch/p/6440373.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zlslch/p/6440373.html</a></p>\n<h2 id=\"keyword-和-text\"><a href=\"#keyword-和-text\" class=\"headerlink\" title=\"keyword 和 text\"></a>keyword 和 text</h2><p>keyword：不进行分词，直接索引、支持模糊、精确查询、支持聚合<br>text：会分词，然后进行索引、支持模糊、精确查询、不支持聚合<br>默认的动态模板，可以同时支持两种类型<br>参考：<a href=\"https://elasticsearch.cn/question/2099\" target=\"_blank\" rel=\"noopener\">https://elasticsearch.cn/question/2099</a><br><a href=\"https://www.jianshu.com/p/0d13dd7d813a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0d13dd7d813a</a><br><a href=\"https://blog.csdn.net/u011652364/article/details/78581737\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011652364/article/details/78581737</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"倒排索引-Inverted-Index\"><a href=\"#倒排索引-Inverted-Index\" class=\"headerlink\" title=\"倒排索引(Inverted Index)\"></a>倒排索引(Inverted Index)</h2><p>倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。<br>原文：<a href=\"http://www.cnblogs.com/zlslch/p/6440114.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zlslch/p/6440114.html</a><br><img src=\"/images/20190319101437635.png\" alt><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190319101449412.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><strong>单词ID</strong>：记录每个单词的单词编号；<br><strong>单词</strong>：对应的单词；<br><strong>文档频率</strong>：代表文档集合中有多少个文档包含某个单词<br><strong>倒排列表</strong>：包含单词ID及其他必要信息<br><strong>DocId</strong>：单词出现的文档id<br><strong>TF</strong>：单词在某个文档中出现的次数<br><strong>POS</strong>：单词在文档中出现的位置<br>     以单词“加盟”为例，其单词编号为6，文档频率为3，代表整个文档集合中有三个文档包含这个单词，对应的倒排列表为{(2;1;<4>),(3;1;<7>),(5;1;<5>)}，含义是在文档2，3，5出现过这个单词，在每个文档的出现过1次，单词“加盟”在第一个文档的POS是4，即文档的第四个单词是“加盟”，其他的类似。<br>这个倒排索引已经是一个非常完备的索引系统，实际搜索系统的索引结构基本如此。</5></7></4></p>\n<h2 id=\"中文分词\"><a href=\"#中文分词\" class=\"headerlink\" title=\"中文分词\"></a>中文分词</h2><p><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-analysis-ik</a><br><a href=\"http://www.cnblogs.com/zlslch/p/6440373.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zlslch/p/6440373.html</a></p>\n<h2 id=\"keyword-和-text\"><a href=\"#keyword-和-text\" class=\"headerlink\" title=\"keyword 和 text\"></a>keyword 和 text</h2><p>keyword：不进行分词，直接索引、支持模糊、精确查询、支持聚合<br>text：会分词，然后进行索引、支持模糊、精确查询、不支持聚合<br>默认的动态模板，可以同时支持两种类型<br>参考：<a href=\"https://elasticsearch.cn/question/2099\" target=\"_blank\" rel=\"noopener\">https://elasticsearch.cn/question/2099</a><br><a href=\"https://www.jianshu.com/p/0d13dd7d813a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0d13dd7d813a</a><br><a href=\"https://blog.csdn.net/u011652364/article/details/78581737\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u011652364/article/details/78581737</a></p>\n"},{"title":"解决 fastJson 出现重复引用的问题 \"$ref\":\"$[0].layout[0].....\"","post_url":"fastJson-$ref","date":"2019-01-09T01:53:25.000Z","_content":"\n```java\nJSONObject.put(\"k\", jsonv);\n→\nJSONObject.put(\"k\", jsonv.clone());\n```\n或\n```java\nString returnJson = JSON.toJSONString(map, SerializerFeature.DisableCircularReferenceDetect);\n```","source":"_posts/fastJson-$ref.md","raw":"---\ntitle: 解决 fastJson 出现重复引用的问题 \"$ref\":\"$[0].layout[0].....\"\npost_url: fastJson-$ref\ndate: 2019-01-09 09:53:25\ntags: java\n---\n\n```java\nJSONObject.put(\"k\", jsonv);\n→\nJSONObject.put(\"k\", jsonv.clone());\n```\n或\n```java\nString returnJson = JSON.toJSONString(map, SerializerFeature.DisableCircularReferenceDetect);\n```","slug":"fastJson-$ref","published":1,"updated":"2019-03-25T13:55:38.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpb002005ab1k4vs567","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONObject.put(<span class=\"string\">\"k\"</span>, jsonv);</span><br><span class=\"line\">→</span><br><span class=\"line\">JSONObject.put(<span class=\"string\">\"k\"</span>, jsonv.clone());</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String returnJson = JSON.toJSONString(map, SerializerFeature.DisableCircularReferenceDetect);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONObject.put(<span class=\"string\">\"k\"</span>, jsonv);</span><br><span class=\"line\">→</span><br><span class=\"line\">JSONObject.put(<span class=\"string\">\"k\"</span>, jsonv.clone());</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String returnJson = JSON.toJSONString(map, SerializerFeature.DisableCircularReferenceDetect);</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"facet-Dynamic-web","title":"解决Cannot change version of project facet Dynamic web module to 3.0","date":"2017-06-18T07:58:52.000Z","_content":"问题：Cannot change version of project facet Dynamic web module to 3.0\n\n解决：项目所在文件夹下搜索org.eclipse.wst.common.project.facet.core.xml\n\n将其中的<installed facet=\"jst.web\" version=\"2.*\"/>\n\n       改为<installed facet=\"jst.web\" version=\"3.0\"/>\n\n然后eclipse中项目右键maven→Update project\n","source":"_posts/facet-Dynamic-web.md","raw":"---\npost_url: facet-Dynamic-web\ntitle: 解决Cannot change version of project facet Dynamic web module to 3.0\ndate: 2017-06-18 15:58:52\ntags: java\n---\n问题：Cannot change version of project facet Dynamic web module to 3.0\n\n解决：项目所在文件夹下搜索org.eclipse.wst.common.project.facet.core.xml\n\n将其中的<installed facet=\"jst.web\" version=\"2.*\"/>\n\n       改为<installed facet=\"jst.web\" version=\"3.0\"/>\n\n然后eclipse中项目右键maven→Update project\n","slug":"facet-Dynamic-web","published":1,"updated":"2019-03-25T13:55:16.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpc002205absd7gabf6","content":"<p>问题：Cannot change version of project facet Dynamic web module to 3.0</p>\n<p>解决：项目所在文件夹下搜索org.eclipse.wst.common.project.facet.core.xml</p>\n<p>将其中的<installed facet=\"jst.web\" version=\"2.*\"></installed></p>\n<pre><code>改为&lt;installed facet=&quot;jst.web&quot; version=&quot;3.0&quot;/&gt;\n</code></pre><p>然后eclipse中项目右键maven→Update project</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：Cannot change version of project facet Dynamic web module to 3.0</p>\n<p>解决：项目所在文件夹下搜索org.eclipse.wst.common.project.facet.core.xml</p>\n<p>将其中的<installed facet=\"jst.web\" version=\"2.*\"></installed></p>\n<pre><code>改为&lt;installed facet=&quot;jst.web&quot; version=&quot;3.0&quot;/&gt;\n</code></pre><p>然后eclipse中项目右键maven→Update project</p>\n"},{"title":"filebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作 CRIT Unable to publish events to console","post_url":"filebeat-error1","date":"2018-12-03T09:37:43.000Z","_content":"filebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作，日志中输出如下信息：\n\n2018-12-03T17:07:29+08:00 CRIT Unable to publish events to console: write /dev/stdout: The handle is invalid.\n2018-12-03T17:07:29+08:00 INFO Error bulk publishing events: write /dev/stdout: The handle is invalid.\n\n原因：\n\n配置了 filebeat 控制台输出信息，而当 filebeta 作为服务启动时，控制台不可用，filebeat 就停止工作了\n\n这是 filebeat 某些版本的 bug，后续版本应该修复了。\n\n解决：\n\n取消 filebeat 的控制台输出（注释掉下面两行）（Windows版和Linux版 通用）\n![](/images/2018120317301921.png)\n官方说明：https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692","source":"_posts/filebeat-error1.md","raw":"---\ntitle: filebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作 CRIT Unable to publish events to console\npost_url: filebeat-error1\ndate: 2018-12-03 17:37:43\ntags: filebeat\n---\nfilebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作，日志中输出如下信息：\n\n2018-12-03T17:07:29+08:00 CRIT Unable to publish events to console: write /dev/stdout: The handle is invalid.\n2018-12-03T17:07:29+08:00 INFO Error bulk publishing events: write /dev/stdout: The handle is invalid.\n\n原因：\n\n配置了 filebeat 控制台输出信息，而当 filebeta 作为服务启动时，控制台不可用，filebeat 就停止工作了\n\n这是 filebeat 某些版本的 bug，后续版本应该修复了。\n\n解决：\n\n取消 filebeat 的控制台输出（注释掉下面两行）（Windows版和Linux版 通用）\n![](/images/2018120317301921.png)\n官方说明：https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692","slug":"filebeat-error1","published":1,"updated":"2019-03-24T09:41:39.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpd002405abjvi6983w","content":"<p>filebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作，日志中输出如下信息：</p>\n<p>2018-12-03T17:07:29+08:00 CRIT Unable to publish events to console: write /dev/stdout: The handle is invalid.<br>2018-12-03T17:07:29+08:00 INFO Error bulk publishing events: write /dev/stdout: The handle is invalid.</p>\n<p>原因：</p>\n<p>配置了 filebeat 控制台输出信息，而当 filebeta 作为服务启动时，控制台不可用，filebeat 就停止工作了</p>\n<p>这是 filebeat 某些版本的 bug，后续版本应该修复了。</p>\n<p>解决：</p>\n<p>取消 filebeat 的控制台输出（注释掉下面两行）（Windows版和Linux版 通用）<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/2018120317301921.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>官方说明：<a href=\"https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692\" target=\"_blank\" rel=\"noopener\">https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>filebeat 作为服务启动，而非命令行启动时，传输一批数据后便停止工作，日志中输出如下信息：</p>\n<p>2018-12-03T17:07:29+08:00 CRIT Unable to publish events to console: write /dev/stdout: The handle is invalid.<br>2018-12-03T17:07:29+08:00 INFO Error bulk publishing events: write /dev/stdout: The handle is invalid.</p>\n<p>原因：</p>\n<p>配置了 filebeat 控制台输出信息，而当 filebeta 作为服务启动时，控制台不可用，filebeat 就停止工作了</p>\n<p>这是 filebeat 某些版本的 bug，后续版本应该修复了。</p>\n<p>解决：</p>\n<p>取消 filebeat 的控制台输出（注释掉下面两行）（Windows版和Linux版 通用）<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/2018120317301921.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>官方说明：<a href=\"https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692\" target=\"_blank\" rel=\"noopener\">https://discuss.elastic.co/t/filebeat-output-to-console-not-work/56692</a></p>\n"},{"title":"fastjson中getLong(\"\")返回的是Long类型，不能直接用“==”比较","post_url":"fastjson","date":"2018-05-16T10:16:28.000Z","_content":"fastjson中getLong(\"\")返回的是Long类型，不能直接用“==”比较；\n\n如需比较要使用getLongValue(\"\")，getLongValue返回的是long类型的；\n\n\nuser.getLong(\"mid\") != fileDetail.getLong(\"mid\")\nuser.getLongValue(\"mid\") == fileDetail.getLongValue(\"mid\")\n","source":"_posts/fastjson.md","raw":"---\ntitle: fastjson中getLong(\"\")返回的是Long类型，不能直接用“==”比较\npost_url: fastjson\ndate: 2018-05-16 18:16:28\ntags: java\n---\nfastjson中getLong(\"\")返回的是Long类型，不能直接用“==”比较；\n\n如需比较要使用getLongValue(\"\")，getLongValue返回的是long类型的；\n\n\nuser.getLong(\"mid\") != fileDetail.getLong(\"mid\")\nuser.getLongValue(\"mid\") == fileDetail.getLongValue(\"mid\")\n","slug":"fastjson","published":1,"updated":"2019-03-25T13:55:42.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpe002705abkrmh6rr7","content":"<p>fastjson中getLong(“”)返回的是Long类型，不能直接用“==”比较；</p>\n<p>如需比较要使用getLongValue(“”)，getLongValue返回的是long类型的；</p>\n<p>user.getLong(“mid”) != fileDetail.getLong(“mid”)<br>user.getLongValue(“mid”) == fileDetail.getLongValue(“mid”)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>fastjson中getLong(“”)返回的是Long类型，不能直接用“==”比较；</p>\n<p>如需比较要使用getLongValue(“”)，getLongValue返回的是long类型的；</p>\n<p>user.getLong(“mid”) != fileDetail.getLong(“mid”)<br>user.getLongValue(“mid”) == fileDetail.getLongValue(“mid”)</p>\n"},{"post_url":"gitignore","title":"idea 忽略不需要提交 git、svn 的目录或文件","date":"2018-09-07T08:29:47.000Z","_content":"## 方法一：\n\n项目根目录下新建 .gitignore 文件（详细参考：https://www.cnblogs.com/youyoui/p/8337147.html）\n```\n/target/*\n/.idea/*\n/src/test/*\n*.iml\n```\n\n```\n# .gitignore 规则不生效\ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n```\n\n## 方法二：\n\n 新建一个 ChangeList，并把不需要提交的目录或文件拖进去\n![](/images/20180907162520781.png)\n 把不需要提交的目录或文件拖到 ignore 目录 \n![](/images/2018090716255676.png)\n 提交的时候选择要提交的目录\n ![](/images/20180907162713361.png)","source":"_posts/gitignore.md","raw":"---\npost_url: gitignore\ntitle: idea 忽略不需要提交 git、svn 的目录或文件\ndate: 2018-09-07 16:29:47\ntags: git\n---\n## 方法一：\n\n项目根目录下新建 .gitignore 文件（详细参考：https://www.cnblogs.com/youyoui/p/8337147.html）\n```\n/target/*\n/.idea/*\n/src/test/*\n*.iml\n```\n\n```\n# .gitignore 规则不生效\ngit rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n```\n\n## 方法二：\n\n 新建一个 ChangeList，并把不需要提交的目录或文件拖进去\n![](/images/20180907162520781.png)\n 把不需要提交的目录或文件拖到 ignore 目录 \n![](/images/2018090716255676.png)\n 提交的时候选择要提交的目录\n ![](/images/20180907162713361.png)","slug":"gitignore","published":1,"updated":"2019-03-24T11:38:37.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpf002905abkgu1xlo1","content":"<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p>项目根目录下新建 .gitignore 文件（详细参考：<a href=\"https://www.cnblogs.com/youyoui/p/8337147.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/youyoui/p/8337147.html）</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/target/*</span><br><span class=\"line\">/.idea/*</span><br><span class=\"line\">/src/test/*</span><br><span class=\"line\">*.iml</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .gitignore 规则不生效</span><br><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;update .gitignore&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p> 新建一个 ChangeList，并把不需要提交的目录或文件拖进去<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180907162520781.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> 把不需要提交的目录或文件拖到 ignore 目录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/2018090716255676.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> 提交的时候选择要提交的目录<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180907162713361.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p>项目根目录下新建 .gitignore 文件（详细参考：<a href=\"https://www.cnblogs.com/youyoui/p/8337147.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/youyoui/p/8337147.html）</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/target/*</span><br><span class=\"line\">/.idea/*</span><br><span class=\"line\">/src/test/*</span><br><span class=\"line\">*.iml</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .gitignore 规则不生效</span><br><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;update .gitignore&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p> 新建一个 ChangeList，并把不需要提交的目录或文件拖进去<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180907162520781.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> 把不需要提交的目录或文件拖到 ignore 目录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/2018090716255676.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> 提交的时候选择要提交的目录<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180907162713361.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"git-notes","title":"git 笔记","date":"2018-04-04T08:23:45.000Z","_content":"VCS→Import into→Version Control→Create Git Repository→选择本地项目目录→OK\n\ngit add→commit→push，其中 push 之前会提示先输入 Git 项目地址\n\n \n\n1. 用 IDEA 上传本地项目到码云/Github：https://blog.csdn.net/zsyoung/article/details/76891211\n\n \n\n2. git config --global user.name \"hjl666\"\n    git config --global user.email \"hjl666@iaiot.com\"\n\n \n\n3. git clone -b dev url （克隆指定分支或tags）\n\ngit status\n\ngit add ./src/*\n\ngit commit -m \"fix bugs\"\n\ngit push origin master:dev\n\n删除远程 dev 分支：git push origin :dev\n\n*******************\n\nTo https://github.com/haojiliang/haojiliang.github.io.git\n\n ! [remote rejected] public (refusing to delete the current branch: refs/heads/public)\n\nerror: failed to push some refs to 'https://github.com/haojiliang/haojiliang.github.io.git'\n\n删除远程分支时出现这个错误是因为，dev是当前项目的默认分支，github→Settings→Branches→改一下 Default branch 即可。\n\n********************\n\n \n\n \n\n4. git init\n\ngit add ./src/*\n\ngit commit -m \"fix bugs\"\n\ngit remote add origin https://github.com/haojiliang/haojiliang.github.io.git\n\ngit push origin master\n","source":"_posts/git-notes.md","raw":"---\npost_url: git-notes\ntitle: git 笔记\ndate: 2018-04-04 16:23:45\ntags: git\n---\nVCS→Import into→Version Control→Create Git Repository→选择本地项目目录→OK\n\ngit add→commit→push，其中 push 之前会提示先输入 Git 项目地址\n\n \n\n1. 用 IDEA 上传本地项目到码云/Github：https://blog.csdn.net/zsyoung/article/details/76891211\n\n \n\n2. git config --global user.name \"hjl666\"\n    git config --global user.email \"hjl666@iaiot.com\"\n\n \n\n3. git clone -b dev url （克隆指定分支或tags）\n\ngit status\n\ngit add ./src/*\n\ngit commit -m \"fix bugs\"\n\ngit push origin master:dev\n\n删除远程 dev 分支：git push origin :dev\n\n*******************\n\nTo https://github.com/haojiliang/haojiliang.github.io.git\n\n ! [remote rejected] public (refusing to delete the current branch: refs/heads/public)\n\nerror: failed to push some refs to 'https://github.com/haojiliang/haojiliang.github.io.git'\n\n删除远程分支时出现这个错误是因为，dev是当前项目的默认分支，github→Settings→Branches→改一下 Default branch 即可。\n\n********************\n\n \n\n \n\n4. git init\n\ngit add ./src/*\n\ngit commit -m \"fix bugs\"\n\ngit remote add origin https://github.com/haojiliang/haojiliang.github.io.git\n\ngit push origin master\n","slug":"git-notes","published":1,"updated":"2019-03-24T13:14:17.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpg002c05abo3jryrau","content":"<p>VCS→Import into→Version Control→Create Git Repository→选择本地项目目录→OK</p>\n<p>git add→commit→push，其中 push 之前会提示先输入 Git 项目地址</p>\n<ol>\n<li>用 IDEA 上传本地项目到码云/Github：<a href=\"https://blog.csdn.net/zsyoung/article/details/76891211\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zsyoung/article/details/76891211</a></li>\n</ol>\n<ol start=\"2\">\n<li>git config –global user.name “hjl666”<br> git config –global user.email “<a href=\"mailto:hjl666@iaiot.com\" target=\"_blank\" rel=\"noopener\">hjl666@iaiot.com</a>“</li>\n</ol>\n<ol start=\"3\">\n<li>git clone -b dev url （克隆指定分支或tags）</li>\n</ol>\n<p>git status</p>\n<p>git add ./src/*</p>\n<p>git commit -m “fix bugs”</p>\n<p>git push origin master:dev</p>\n<p>删除远程 dev 分支：git push origin :dev</p>\n<hr>\n<p>To <a href=\"https://github.com/haojiliang/haojiliang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git</a></p>\n<p> ! [remote rejected] public (refusing to delete the current branch: refs/heads/public)</p>\n<p>error: failed to push some refs to ‘<a href=\"https://github.com/haojiliang/haojiliang.github.io.git&#39;\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git&#39;</a></p>\n<p>删除远程分支时出现这个错误是因为，dev是当前项目的默认分支，github→Settings→Branches→改一下 Default branch 即可。</p>\n<hr>\n<ol start=\"4\">\n<li>git init</li>\n</ol>\n<p>git add ./src/*</p>\n<p>git commit -m “fix bugs”</p>\n<p>git remote add origin <a href=\"https://github.com/haojiliang/haojiliang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git</a></p>\n<p>git push origin master</p>\n","site":{"data":{}},"excerpt":"","more":"<p>VCS→Import into→Version Control→Create Git Repository→选择本地项目目录→OK</p>\n<p>git add→commit→push，其中 push 之前会提示先输入 Git 项目地址</p>\n<ol>\n<li>用 IDEA 上传本地项目到码云/Github：<a href=\"https://blog.csdn.net/zsyoung/article/details/76891211\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zsyoung/article/details/76891211</a></li>\n</ol>\n<ol start=\"2\">\n<li>git config –global user.name “hjl666”<br> git config –global user.email “<a href=\"mailto:hjl666@iaiot.com\" target=\"_blank\" rel=\"noopener\">hjl666@iaiot.com</a>“</li>\n</ol>\n<ol start=\"3\">\n<li>git clone -b dev url （克隆指定分支或tags）</li>\n</ol>\n<p>git status</p>\n<p>git add ./src/*</p>\n<p>git commit -m “fix bugs”</p>\n<p>git push origin master:dev</p>\n<p>删除远程 dev 分支：git push origin :dev</p>\n<hr>\n<p>To <a href=\"https://github.com/haojiliang/haojiliang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git</a></p>\n<p> ! [remote rejected] public (refusing to delete the current branch: refs/heads/public)</p>\n<p>error: failed to push some refs to ‘<a href=\"https://github.com/haojiliang/haojiliang.github.io.git&#39;\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git&#39;</a></p>\n<p>删除远程分支时出现这个错误是因为，dev是当前项目的默认分支，github→Settings→Branches→改一下 Default branch 即可。</p>\n<hr>\n<ol start=\"4\">\n<li>git init</li>\n</ol>\n<p>git add ./src/*</p>\n<p>git commit -m “fix bugs”</p>\n<p>git remote add origin <a href=\"https://github.com/haojiliang/haojiliang.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/haojiliang.github.io.git</a></p>\n<p>git push origin master</p>\n"},{"title":"Hello Hexo","post_url":"Hello-Hexo","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hello Hexo\npost_url: Hello-Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-hexo","published":1,"date":"2019-03-22T14:29:43.032Z","updated":"2019-03-24T07:55:12.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtph002e05abaynizqe4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"post_url":"java-image-base64","title":"java实现image和base64互转","date":"2018-08-09T09:21:45.000Z","_content":"原文：https://blog.csdn.net/windon12345/article/details/45966949\n\njava安装的目录下的jre/lib/rt.jar中有以下两个类实现base64的编码和解码：\nsun.misc.BASE64Encoder\nsun.misc.BASE64Decoder\n\n \n\n下面是java实现：\n```java\npublic class Imagebase64 {\n    static BASE64Encoder encoder = new sun.misc.BASE64Encoder();\n    static BASE64Decoder decoder = new sun.misc.BASE64Decoder();\n\n    public static void main(String[] args) {\n        System.out.println(getImageBinary()); // image to base64\n        base64StringToImage(getImageBinary()); // base64 to image\n    }\n\n    static String getImageBinary() {\n        File f = new File(\"d://in.jpg\");\n        try {\n            BufferedImage bi = ImageIO.read(f);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"jpg\", baos);\n            byte[] bytes = baos.toByteArray();\n\n            return encoder.encodeBuffer(bytes).trim();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    static void base64StringToImage(String base64String) {\n        try {\n            byte[] bytes1 = decoder.decodeBuffer(base64String);\n            ByteArrayInputStream bais = new ByteArrayInputStream(bytes1);\n            BufferedImage bi1 = ImageIO.read(bais);\n            File f1 = new File(\"d://out.jpg\");\n            ImageIO.write(bi1, \"jpg\", f1);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```","source":"_posts/java-image-base64.md","raw":"---\npost_url: java-image-base64\ntitle: java实现image和base64互转\ndate: 2018-08-09 17:21:45\ntags: java\n---\n原文：https://blog.csdn.net/windon12345/article/details/45966949\n\njava安装的目录下的jre/lib/rt.jar中有以下两个类实现base64的编码和解码：\nsun.misc.BASE64Encoder\nsun.misc.BASE64Decoder\n\n \n\n下面是java实现：\n```java\npublic class Imagebase64 {\n    static BASE64Encoder encoder = new sun.misc.BASE64Encoder();\n    static BASE64Decoder decoder = new sun.misc.BASE64Decoder();\n\n    public static void main(String[] args) {\n        System.out.println(getImageBinary()); // image to base64\n        base64StringToImage(getImageBinary()); // base64 to image\n    }\n\n    static String getImageBinary() {\n        File f = new File(\"d://in.jpg\");\n        try {\n            BufferedImage bi = ImageIO.read(f);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(bi, \"jpg\", baos);\n            byte[] bytes = baos.toByteArray();\n\n            return encoder.encodeBuffer(bytes).trim();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    static void base64StringToImage(String base64String) {\n        try {\n            byte[] bytes1 = decoder.decodeBuffer(base64String);\n            ByteArrayInputStream bais = new ByteArrayInputStream(bytes1);\n            BufferedImage bi1 = ImageIO.read(bais);\n            File f1 = new File(\"d://out.jpg\");\n            ImageIO.write(bi1, \"jpg\", f1);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```","slug":"java-image-base64","published":1,"updated":"2019-03-24T11:58:03.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtph002h05abhh5lrqaf","content":"<p>原文：<a href=\"https://blog.csdn.net/windon12345/article/details/45966949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/windon12345/article/details/45966949</a></p>\n<p>java安装的目录下的jre/lib/rt.jar中有以下两个类实现base64的编码和解码：<br>sun.misc.BASE64Encoder<br>sun.misc.BASE64Decoder</p>\n<p>下面是java实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagebase64</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> BASE64Encoder encoder = <span class=\"keyword\">new</span> sun.misc.BASE64Encoder();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> BASE64Decoder decoder = <span class=\"keyword\">new</span> sun.misc.BASE64Decoder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getImageBinary()); <span class=\"comment\">// image to base64</span></span><br><span class=\"line\">        base64StringToImage(getImageBinary()); <span class=\"comment\">// base64 to image</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getImageBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        File f = <span class=\"keyword\">new</span> File(<span class=\"string\">\"d://in.jpg\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            BufferedImage bi = ImageIO.read(f);</span><br><span class=\"line\">            ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            ImageIO.write(bi, <span class=\"string\">\"jpg\"</span>, baos);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = baos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> encoder.encodeBuffer(bytes).trim();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">base64StringToImage</span><span class=\"params\">(String base64String)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes1 = decoder.decodeBuffer(base64String);</span><br><span class=\"line\">            ByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(bytes1);</span><br><span class=\"line\">            BufferedImage bi1 = ImageIO.read(bais);</span><br><span class=\"line\">            File f1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"d://out.jpg\"</span>);</span><br><span class=\"line\">            ImageIO.write(bi1, <span class=\"string\">\"jpg\"</span>, f1);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://blog.csdn.net/windon12345/article/details/45966949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/windon12345/article/details/45966949</a></p>\n<p>java安装的目录下的jre/lib/rt.jar中有以下两个类实现base64的编码和解码：<br>sun.misc.BASE64Encoder<br>sun.misc.BASE64Decoder</p>\n<p>下面是java实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagebase64</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> BASE64Encoder encoder = <span class=\"keyword\">new</span> sun.misc.BASE64Encoder();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> BASE64Decoder decoder = <span class=\"keyword\">new</span> sun.misc.BASE64Decoder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getImageBinary()); <span class=\"comment\">// image to base64</span></span><br><span class=\"line\">        base64StringToImage(getImageBinary()); <span class=\"comment\">// base64 to image</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getImageBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        File f = <span class=\"keyword\">new</span> File(<span class=\"string\">\"d://in.jpg\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            BufferedImage bi = ImageIO.read(f);</span><br><span class=\"line\">            ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            ImageIO.write(bi, <span class=\"string\">\"jpg\"</span>, baos);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = baos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> encoder.encodeBuffer(bytes).trim();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">base64StringToImage</span><span class=\"params\">(String base64String)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes1 = decoder.decodeBuffer(base64String);</span><br><span class=\"line\">            ByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(bytes1);</span><br><span class=\"line\">            BufferedImage bi1 = ImageIO.read(bais);</span><br><span class=\"line\">            File f1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"d://out.jpg\"</span>);</span><br><span class=\"line\">            ImageIO.write(bi1, <span class=\"string\">\"jpg\"</span>, f1);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"java-deep-clone","title":"Java 深拷贝 Cloneable","date":"2018-09-07T03:35:05.000Z","_content":"```java\nimport java.util.ArrayList;\n \npublic class Person implements Cloneable {\n \n    private String name;\n    private ArrayList<Integer> books;\n \n    public Person(String name, ArrayList<Integer> books) {\n        this.name = name;\n        this.books = books;\n    }\n \n    public ArrayList<Integer> getBooks() {\n        return books;\n    }\n \n    public void setBooks(ArrayList<Integer> books) {\n        this.books = books;\n    }\n \n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        Object obj = super.clone();\n        ((Person) obj).setBooks((ArrayList<Integer>) books.clone());\n        return obj;\n    }\n \n    public static void main(String[] args) {\n        try {\n            ArrayList<Integer> books = new ArrayList<>();\n            books.add(1);\n            books.add(2);\n            Person p1 = new Person(\"张三\", books);\n            Person p2 = (Person) p1.clone();\n            p2.setBooks(null);\n            System.out.println(\"p1=\" + p1.getBooks());\n            System.out.println(\"p2=\" + p2.getBooks());\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n    }\n \n}\n```\n```\np1=[1, 2]\np2=null\n```","source":"_posts/java-deep-clone.md","raw":"---\npost_url: java-deep-clone\ntitle: Java 深拷贝 Cloneable\ndate: 2018-09-07 11:35:05\ntags: java\n---\n```java\nimport java.util.ArrayList;\n \npublic class Person implements Cloneable {\n \n    private String name;\n    private ArrayList<Integer> books;\n \n    public Person(String name, ArrayList<Integer> books) {\n        this.name = name;\n        this.books = books;\n    }\n \n    public ArrayList<Integer> getBooks() {\n        return books;\n    }\n \n    public void setBooks(ArrayList<Integer> books) {\n        this.books = books;\n    }\n \n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        Object obj = super.clone();\n        ((Person) obj).setBooks((ArrayList<Integer>) books.clone());\n        return obj;\n    }\n \n    public static void main(String[] args) {\n        try {\n            ArrayList<Integer> books = new ArrayList<>();\n            books.add(1);\n            books.add(2);\n            Person p1 = new Person(\"张三\", books);\n            Person p2 = (Person) p1.clone();\n            p2.setBooks(null);\n            System.out.println(\"p1=\" + p1.getBooks());\n            System.out.println(\"p2=\" + p2.getBooks());\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n    }\n \n}\n```\n```\np1=[1, 2]\np2=null\n```","slug":"java-deep-clone","published":1,"updated":"2019-03-24T11:28:59.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpi002j05abk30zztcw","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Integer&gt; books;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, ArrayList&lt;Integer&gt; books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">getBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBooks</span><span class=\"params\">(ArrayList&lt;Integer&gt; books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        ((Person) obj).setBooks((ArrayList&lt;Integer&gt;) books.clone());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; books = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            books.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">            books.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">            Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, books);</span><br><span class=\"line\">            Person p2 = (Person) p1.clone();</span><br><span class=\"line\">            p2.setBooks(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"p1=\"</span> + p1.getBooks());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"p2=\"</span> + p2.getBooks());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1=[1, 2]</span><br><span class=\"line\">p2=null</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Integer&gt; books;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, ArrayList&lt;Integer&gt; books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">getBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBooks</span><span class=\"params\">(ArrayList&lt;Integer&gt; books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = books;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        ((Person) obj).setBooks((ArrayList&lt;Integer&gt;) books.clone());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; books = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            books.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">            books.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">            Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, books);</span><br><span class=\"line\">            Person p2 = (Person) p1.clone();</span><br><span class=\"line\">            p2.setBooks(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"p1=\"</span> + p1.getBooks());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"p2=\"</span> + p2.getBooks());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1=[1, 2]</span><br><span class=\"line\">p2=null</span><br></pre></td></tr></table></figure>"},{"title":"页面输出时用js转义替换字符串中的script标签，防止XSS","post_url":"js-xss","date":"2018-02-06T01:54:06.000Z","_content":"```js\n  function stringEncode(str){\n      var div=document.createElement('div');\n      if(div.innerText){\n          div.innerText=str;\n      }else{\n          div.textContent=str;\n      }\n      return div.innerHTML;\n  }\n  ```\n\n```\n  tblStr = tblStr.replace(/<script>/gi, stringEncode(\"<script>\"));\n// 替换字符串变量或者结束标签这样写\ntblStr = tblStr.replace(new RegExp(\"</script>\",'gi'), stringEncode(\"</script>\"));\n$('#search-result').append(tblStr);\n```\n其中g表示全文替换，i表示忽略大小写；","source":"_posts/js-xss.md","raw":"---\ntitle: 页面输出时用js转义替换字符串中的script标签，防止XSS\npost_url: js-xss\ndate: 2018-02-06 09:54:06\ntags: [xss, js]\n---\n```js\n  function stringEncode(str){\n      var div=document.createElement('div');\n      if(div.innerText){\n          div.innerText=str;\n      }else{\n          div.textContent=str;\n      }\n      return div.innerHTML;\n  }\n  ```\n\n```\n  tblStr = tblStr.replace(/<script>/gi, stringEncode(\"<script>\"));\n// 替换字符串变量或者结束标签这样写\ntblStr = tblStr.replace(new RegExp(\"</script>\",'gi'), stringEncode(\"</script>\"));\n$('#search-result').append(tblStr);\n```\n其中g表示全文替换，i表示忽略大小写；","slug":"js-xss","published":1,"updated":"2019-03-25T13:57:19.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpj002m05abytjgu38b","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringEncode</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(div.innerText)&#123;</span><br><span class=\"line\">        div.innerText=str;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        div.textContent=str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> div.innerHTML;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  tblStr = tblStr.replace(/&lt;script&gt;/gi, stringEncode(&quot;&lt;script&gt;&quot;));</span><br><span class=\"line\">// 替换字符串变量或者结束标签这样写</span><br><span class=\"line\">tblStr = tblStr.replace(new RegExp(&quot;&lt;/script&gt;&quot;,&apos;gi&apos;), stringEncode(&quot;&lt;/script&gt;&quot;));</span><br><span class=\"line\">$(&apos;#search-result&apos;).append(tblStr);</span><br></pre></td></tr></table></figure>\n<p>其中g表示全文替换，i表示忽略大小写；</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringEncode</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(div.innerText)&#123;</span><br><span class=\"line\">        div.innerText=str;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        div.textContent=str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> div.innerHTML;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  tblStr = tblStr.replace(/&lt;script&gt;/gi, stringEncode(&quot;&lt;script&gt;&quot;));</span><br><span class=\"line\">// 替换字符串变量或者结束标签这样写</span><br><span class=\"line\">tblStr = tblStr.replace(new RegExp(&quot;&lt;/script&gt;&quot;,&apos;gi&apos;), stringEncode(&quot;&lt;/script&gt;&quot;));</span><br><span class=\"line\">$(&apos;#search-result&apos;).append(tblStr);</span><br></pre></td></tr></table></figure>\n<p>其中g表示全文替换，i表示忽略大小写；</p>\n"},{"post_url":"javah-hellondk","title":"用javah导出类的头文件，Not a valid class name或者错误:找不到 HelloNDK 的类文件","date":"2016-08-28T06:50:33.000Z","_content":"1. Exception in thread \"main\" java.lang.IllegalArgumentException: Not a valid class name: HelloNDK.class\n\n错误写法：L:\\ndk\\HelloNDK2\\bin\\classes>javah -jni com.iaiot.hellondk2.GetString.class\n\n原因：不能指明扩展名.class\n\n正确写法：L:\\ndk\\HelloNDK2\\bin\\classes>javah -jni com.iaiot.hellondk2.GetString\n\n2. 错误: 找不到 'HelloNDK' 的类文件\n\n原因：环境变量classpath配置错误\n\n解决方法：将android.jar写到classpath里面；\n![](/images/20160828144815858.png)\n\n参考地址：http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah","source":"_posts/javah-hellondk.md","raw":"---\npost_url: javah-hellondk\ntitle: 用javah导出类的头文件，Not a valid class name或者错误:找不到 HelloNDK 的类文件\ndate: 2016-08-28 14:50:33\ntags: [android, ndk]\n---\n1. Exception in thread \"main\" java.lang.IllegalArgumentException: Not a valid class name: HelloNDK.class\n\n错误写法：L:\\ndk\\HelloNDK2\\bin\\classes>javah -jni com.iaiot.hellondk2.GetString.class\n\n原因：不能指明扩展名.class\n\n正确写法：L:\\ndk\\HelloNDK2\\bin\\classes>javah -jni com.iaiot.hellondk2.GetString\n\n2. 错误: 找不到 'HelloNDK' 的类文件\n\n原因：环境变量classpath配置错误\n\n解决方法：将android.jar写到classpath里面；\n![](/images/20160828144815858.png)\n\n参考地址：http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah","slug":"javah-hellondk","published":1,"updated":"2019-03-25T13:56:49.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpj002o05abo83py6jw","content":"<ol>\n<li>Exception in thread “main” java.lang.IllegalArgumentException: Not a valid class name: HelloNDK.class</li>\n</ol>\n<p>错误写法：L:\\ndk\\HelloNDK2\\bin\\classes&gt;javah -jni com.iaiot.hellondk2.GetString.class</p>\n<p>原因：不能指明扩展名.class</p>\n<p>正确写法：L:\\ndk\\HelloNDK2\\bin\\classes&gt;javah -jni com.iaiot.hellondk2.GetString</p>\n<ol start=\"2\">\n<li>错误: 找不到 ‘HelloNDK’ 的类文件</li>\n</ol>\n<p>原因：环境变量classpath配置错误</p>\n<p>解决方法：将android.jar写到classpath里面；<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20160828144815858.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>参考地址：<a href=\"http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Exception in thread “main” java.lang.IllegalArgumentException: Not a valid class name: HelloNDK.class</li>\n</ol>\n<p>错误写法：L:\\ndk\\HelloNDK2\\bin\\classes&gt;javah -jni com.iaiot.hellondk2.GetString.class</p>\n<p>原因：不能指明扩展名.class</p>\n<p>正确写法：L:\\ndk\\HelloNDK2\\bin\\classes&gt;javah -jni com.iaiot.hellondk2.GetString</p>\n<ol start=\"2\">\n<li>错误: 找不到 ‘HelloNDK’ 的类文件</li>\n</ol>\n<p>原因：环境变量classpath配置错误</p>\n<p>解决方法：将android.jar写到classpath里面；<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20160828144815858.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>参考地址：<a href=\"http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/17631116/java-lang-illegalargumentexception-not-a-valid-class-name-android-ndk-javah</a></p>\n"},{"post_url":"jstorm-kill-mytopo-1","title":"jstorm kill mytopo 后 Topology 一直处于 killed 状态","date":"2018-08-01T08:54:32.000Z","_content":"jstorm 设置了一个比较大的超时时间（topology.message.timeout.secs），导致 jstorm kill mytopo 后 Topology 一直处于 killed 状态，直到达到超时时间后 Topology 才结束。\n\n解决：调低超时时间（topology.message.timeout.secs）值，如果将超时时间调低后导致数据处理不完，可以将 topology.max.spout.pending 调小，具体的按照实际业务场景配置。\n\n \n\n或者直接 jstorm kill mytopo 1\n\n意思是：1秒后立即停止 topo\n","source":"_posts/jstorm-kill-mytopo-1.md","raw":"---\npost_url: jstorm-kill-mytopo-1\ntitle: jstorm kill mytopo 后 Topology 一直处于 killed 状态\ndate: 2018-08-01 16:54:32\ntags: jstorm\n---\njstorm 设置了一个比较大的超时时间（topology.message.timeout.secs），导致 jstorm kill mytopo 后 Topology 一直处于 killed 状态，直到达到超时时间后 Topology 才结束。\n\n解决：调低超时时间（topology.message.timeout.secs）值，如果将超时时间调低后导致数据处理不完，可以将 topology.max.spout.pending 调小，具体的按照实际业务场景配置。\n\n \n\n或者直接 jstorm kill mytopo 1\n\n意思是：1秒后立即停止 topo\n","slug":"jstorm-kill-mytopo-1","published":1,"updated":"2019-03-25T13:57:37.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpk002q05abecbu76qw","content":"<p>jstorm 设置了一个比较大的超时时间（topology.message.timeout.secs），导致 jstorm kill mytopo 后 Topology 一直处于 killed 状态，直到达到超时时间后 Topology 才结束。</p>\n<p>解决：调低超时时间（topology.message.timeout.secs）值，如果将超时时间调低后导致数据处理不完，可以将 topology.max.spout.pending 调小，具体的按照实际业务场景配置。</p>\n<p>或者直接 jstorm kill mytopo 1</p>\n<p>意思是：1秒后立即停止 topo</p>\n","site":{"data":{}},"excerpt":"","more":"<p>jstorm 设置了一个比较大的超时时间（topology.message.timeout.secs），导致 jstorm kill mytopo 后 Topology 一直处于 killed 状态，直到达到超时时间后 Topology 才结束。</p>\n<p>解决：调低超时时间（topology.message.timeout.secs）值，如果将超时时间调低后导致数据处理不完，可以将 topology.max.spout.pending 调小，具体的按照实际业务场景配置。</p>\n<p>或者直接 jstorm kill mytopo 1</p>\n<p>意思是：1秒后立即停止 topo</p>\n"},{"post_url":"linux-arm9","title":"把电脑虚拟机linux下编译的程序烧写到ARM9开发板的linux系统里面的具体操作步骤","date":"2015-12-31T08:52:08.000Z","_content":"## 首先在Linux虚拟机下操作的：\n\n①、cd /mnt/hgfs/share（share是在VM里面设置的Linux虚拟机和Windows共享的文件夹）\n②、cd ZigbeeCom （到该文件夹下面看一下只有那四个文件）\n③、make （make编译之后就会生成ZigbeeCom文件）\n④、cp /mnt/hgfs/share/ZigbeeCom/ZigbeeCom /test\n⑤、ifconfig(查看虚拟机ip地址和子网掩码并修改以便通过网线将文件烧写到开发板中)\n⑥、ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up\n## 然后到DNW下（操作开发板内的文件了）：\n⑦、用网线把开发板和电脑连接起来\n⑧、进入arm9开发板内的Linux系统\n⑨、ls\n⑩、ifconfig\n⑪、ifconfig eth0 192.168.1.200 netmask 255.255.255.0 up\n⑫、mount -o tcp,nolock 192.168.1.100:/test /mnt（mnt文件夹叫挂载点，挂载到/mnt下面）\n⑬、cp /mnt/ZigbeeCom /sample\n⑭、cd /sample\n⑮、用网线把开发板连接到路由器的lan口上\n⑯、./ZigbeeCom\n⑰、手机app连接到路由器的无线网上\n⑱、app上的ip地址填设置的开发板的ip地址192.168.1.200（端口7081自己在serverthread.c中设置）\n\n \n\n⑲、然后app发送相应口令获取数据\n\n \n\n这是我们做的微信云智能火灾防控系统。实现了微信端，手机APP端，网页端的远程监测及控制。以后有时间会陆续把整个系统的实现分享给大家。\n![](/images/20151231172153087.png)","source":"_posts/linux-arm9.md","raw":"---\npost_url: linux-arm9\ntitle: 把电脑虚拟机linux下编译的程序烧写到ARM9开发板的linux系统里面的具体操作步骤\ndate: 2015-12-31 16:52:08\ntags: [linux, 物联网]\n---\n## 首先在Linux虚拟机下操作的：\n\n①、cd /mnt/hgfs/share（share是在VM里面设置的Linux虚拟机和Windows共享的文件夹）\n②、cd ZigbeeCom （到该文件夹下面看一下只有那四个文件）\n③、make （make编译之后就会生成ZigbeeCom文件）\n④、cp /mnt/hgfs/share/ZigbeeCom/ZigbeeCom /test\n⑤、ifconfig(查看虚拟机ip地址和子网掩码并修改以便通过网线将文件烧写到开发板中)\n⑥、ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up\n## 然后到DNW下（操作开发板内的文件了）：\n⑦、用网线把开发板和电脑连接起来\n⑧、进入arm9开发板内的Linux系统\n⑨、ls\n⑩、ifconfig\n⑪、ifconfig eth0 192.168.1.200 netmask 255.255.255.0 up\n⑫、mount -o tcp,nolock 192.168.1.100:/test /mnt（mnt文件夹叫挂载点，挂载到/mnt下面）\n⑬、cp /mnt/ZigbeeCom /sample\n⑭、cd /sample\n⑮、用网线把开发板连接到路由器的lan口上\n⑯、./ZigbeeCom\n⑰、手机app连接到路由器的无线网上\n⑱、app上的ip地址填设置的开发板的ip地址192.168.1.200（端口7081自己在serverthread.c中设置）\n\n \n\n⑲、然后app发送相应口令获取数据\n\n \n\n这是我们做的微信云智能火灾防控系统。实现了微信端，手机APP端，网页端的远程监测及控制。以后有时间会陆续把整个系统的实现分享给大家。\n![](/images/20151231172153087.png)","slug":"linux-arm9","published":1,"updated":"2019-03-25T13:58:27.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpl002t05ab9r323ego","content":"<h2 id=\"首先在Linux虚拟机下操作的：\"><a href=\"#首先在Linux虚拟机下操作的：\" class=\"headerlink\" title=\"首先在Linux虚拟机下操作的：\"></a>首先在Linux虚拟机下操作的：</h2><p>①、cd /mnt/hgfs/share（share是在VM里面设置的Linux虚拟机和Windows共享的文件夹）<br>②、cd ZigbeeCom （到该文件夹下面看一下只有那四个文件）<br>③、make （make编译之后就会生成ZigbeeCom文件）<br>④、cp /mnt/hgfs/share/ZigbeeCom/ZigbeeCom /test<br>⑤、ifconfig(查看虚拟机ip地址和子网掩码并修改以便通过网线将文件烧写到开发板中)<br>⑥、ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up</p>\n<h2 id=\"然后到DNW下（操作开发板内的文件了）：\"><a href=\"#然后到DNW下（操作开发板内的文件了）：\" class=\"headerlink\" title=\"然后到DNW下（操作开发板内的文件了）：\"></a>然后到DNW下（操作开发板内的文件了）：</h2><p>⑦、用网线把开发板和电脑连接起来<br>⑧、进入arm9开发板内的Linux系统<br>⑨、ls<br>⑩、ifconfig<br>⑪、ifconfig eth0 192.168.1.200 netmask 255.255.255.0 up<br>⑫、mount -o tcp,nolock 192.168.1.100:/test /mnt（mnt文件夹叫挂载点，挂载到/mnt下面）<br>⑬、cp /mnt/ZigbeeCom /sample<br>⑭、cd /sample<br>⑮、用网线把开发板连接到路由器的lan口上<br>⑯、./ZigbeeCom<br>⑰、手机app连接到路由器的无线网上<br>⑱、app上的ip地址填设置的开发板的ip地址192.168.1.200（端口7081自己在serverthread.c中设置）</p>\n<p>⑲、然后app发送相应口令获取数据</p>\n<p>这是我们做的微信云智能火灾防控系统。实现了微信端，手机APP端，网页端的远程监测及控制。以后有时间会陆续把整个系统的实现分享给大家。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20151231172153087.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先在Linux虚拟机下操作的：\"><a href=\"#首先在Linux虚拟机下操作的：\" class=\"headerlink\" title=\"首先在Linux虚拟机下操作的：\"></a>首先在Linux虚拟机下操作的：</h2><p>①、cd /mnt/hgfs/share（share是在VM里面设置的Linux虚拟机和Windows共享的文件夹）<br>②、cd ZigbeeCom （到该文件夹下面看一下只有那四个文件）<br>③、make （make编译之后就会生成ZigbeeCom文件）<br>④、cp /mnt/hgfs/share/ZigbeeCom/ZigbeeCom /test<br>⑤、ifconfig(查看虚拟机ip地址和子网掩码并修改以便通过网线将文件烧写到开发板中)<br>⑥、ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up</p>\n<h2 id=\"然后到DNW下（操作开发板内的文件了）：\"><a href=\"#然后到DNW下（操作开发板内的文件了）：\" class=\"headerlink\" title=\"然后到DNW下（操作开发板内的文件了）：\"></a>然后到DNW下（操作开发板内的文件了）：</h2><p>⑦、用网线把开发板和电脑连接起来<br>⑧、进入arm9开发板内的Linux系统<br>⑨、ls<br>⑩、ifconfig<br>⑪、ifconfig eth0 192.168.1.200 netmask 255.255.255.0 up<br>⑫、mount -o tcp,nolock 192.168.1.100:/test /mnt（mnt文件夹叫挂载点，挂载到/mnt下面）<br>⑬、cp /mnt/ZigbeeCom /sample<br>⑭、cd /sample<br>⑮、用网线把开发板连接到路由器的lan口上<br>⑯、./ZigbeeCom<br>⑰、手机app连接到路由器的无线网上<br>⑱、app上的ip地址填设置的开发板的ip地址192.168.1.200（端口7081自己在serverthread.c中设置）</p>\n<p>⑲、然后app发送相应口令获取数据</p>\n<p>这是我们做的微信云智能火灾防控系统。实现了微信端，手机APP端，网页端的远程监测及控制。以后有时间会陆续把整个系统的实现分享给大家。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20151231172153087.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"jstorm-nimbus-Supervisor","title":"Jstorm 启动后 nimbus、Supervisor 自动停止","date":"2018-05-22T03:18:54.000Z","_content":"情景1：以前可以，异常关机重启后不行了。。。\n\n原因1：jstorm 进程异常终止，导致 storm data 目录下的数据异常；\n\n解决：删除 Jstorm data 目录里面的内容，再重新启动~\n\n\n情景2：第一次安装的，从节点 Supervisor 可以正常启动，主节点的 nimbus 和 Supervisor 启动后接着停止（nimbus 甚至直接不启动）；\n\n原因：未配置 hostname\n![](/images/20180619190149680.jpeg)\n\n\n解决：1.vim /etc/hosts...............在里面加入 hostname....\n\n例：10.168.13.147 storm-m  （其中 10.168.13.147 为内网 ip，非 127.0.0.1）\n\n \n\n2.vim /etc/sysconfig/network .............在里面改过来\n\n \n\n例：HOSTNAME=storm-m\n\n3.service network restart\n\n参考：http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html\n","source":"_posts/jstorm-nimbus-Supervisor.md","raw":"---\npost_url: jstorm-nimbus-Supervisor\ntitle: Jstorm 启动后 nimbus、Supervisor 自动停止\ndate: 2018-05-22 11:18:54\ntags: jstorm\n---\n情景1：以前可以，异常关机重启后不行了。。。\n\n原因1：jstorm 进程异常终止，导致 storm data 目录下的数据异常；\n\n解决：删除 Jstorm data 目录里面的内容，再重新启动~\n\n\n情景2：第一次安装的，从节点 Supervisor 可以正常启动，主节点的 nimbus 和 Supervisor 启动后接着停止（nimbus 甚至直接不启动）；\n\n原因：未配置 hostname\n![](/images/20180619190149680.jpeg)\n\n\n解决：1.vim /etc/hosts...............在里面加入 hostname....\n\n例：10.168.13.147 storm-m  （其中 10.168.13.147 为内网 ip，非 127.0.0.1）\n\n \n\n2.vim /etc/sysconfig/network .............在里面改过来\n\n \n\n例：HOSTNAME=storm-m\n\n3.service network restart\n\n参考：http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html\n","slug":"jstorm-nimbus-Supervisor","published":1,"updated":"2019-03-25T13:57:30.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpl002v05abpct70oyv","content":"<p>情景1：以前可以，异常关机重启后不行了。。。</p>\n<p>原因1：jstorm 进程异常终止，导致 storm data 目录下的数据异常；</p>\n<p>解决：删除 Jstorm data 目录里面的内容，再重新启动~</p>\n<p>情景2：第一次安装的，从节点 Supervisor 可以正常启动，主节点的 nimbus 和 Supervisor 启动后接着停止（nimbus 甚至直接不启动）；</p>\n<p>原因：未配置 hostname<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180619190149680.jpeg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>解决：1.vim /etc/hosts……………在里面加入 hostname….</p>\n<p>例：10.168.13.147 storm-m  （其中 10.168.13.147 为内网 ip，非 127.0.0.1）</p>\n<p>2.vim /etc/sysconfig/network ………….在里面改过来</p>\n<p>例：HOSTNAME=storm-m</p>\n<p>3.service network restart</p>\n<p>参考：<a href=\"http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html\" target=\"_blank\" rel=\"noopener\">http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>情景1：以前可以，异常关机重启后不行了。。。</p>\n<p>原因1：jstorm 进程异常终止，导致 storm data 目录下的数据异常；</p>\n<p>解决：删除 Jstorm data 目录里面的内容，再重新启动~</p>\n<p>情景2：第一次安装的，从节点 Supervisor 可以正常启动，主节点的 nimbus 和 Supervisor 启动后接着停止（nimbus 甚至直接不启动）；</p>\n<p>原因：未配置 hostname<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180619190149680.jpeg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>解决：1.vim /etc/hosts……………在里面加入 hostname….</p>\n<p>例：10.168.13.147 storm-m  （其中 10.168.13.147 为内网 ip，非 127.0.0.1）</p>\n<p>2.vim /etc/sysconfig/network ………….在里面改过来</p>\n<p>例：HOSTNAME=storm-m</p>\n<p>3.service network restart</p>\n<p>参考：<a href=\"http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html\" target=\"_blank\" rel=\"noopener\">http://www.jstorm.io/QuickStart_cn/Deploy/Standalone.html</a></p>\n"},{"post_url":"kubernetes-notes","title":"CentOS7 Kubernetes 集群安装搭建及 k8s 常用命令","date":"2018-07-18T01:20:14.000Z","_content":"## 安装启动：\n```\n# 安装 etcd 和 Kubernetes 软件（会自动安装 Docker 软件）\nyum install -y etcd kubernetes\n \n# 启动\nsystemctl start etcd\nsystemctl start docker\nsystemctl start kube-apiserver\nsystemctl start kube-controller-manager\nsystemctl start kube-scheduler\nsystemctl start kubelet\nsystemctl start kube-proxy\n```\n## 常用命令\n```\n发布：kubectl create -f mysql-rc.yaml\n查看刚刚创建的 RC：kubectl get rc\n查看 Pod：kubectl get pods\n删除创建的 RC：kubectl delete -f mysql-rc.yaml\n查看 pods 详情：kubectl describe pod mysql\n创建 service：kubectl create -f mysql-svc.yaml\n查看 service：kubectl get svc\n```","source":"_posts/kubernetes-notes-0.md","raw":"---\npost_url: kubernetes-notes\ntitle: CentOS7 Kubernetes 集群安装搭建及 k8s 常用命令\ndate: 2018-07-18 09:20:14\ntags: kubernetes\n---\n## 安装启动：\n```\n# 安装 etcd 和 Kubernetes 软件（会自动安装 Docker 软件）\nyum install -y etcd kubernetes\n \n# 启动\nsystemctl start etcd\nsystemctl start docker\nsystemctl start kube-apiserver\nsystemctl start kube-controller-manager\nsystemctl start kube-scheduler\nsystemctl start kubelet\nsystemctl start kube-proxy\n```\n## 常用命令\n```\n发布：kubectl create -f mysql-rc.yaml\n查看刚刚创建的 RC：kubectl get rc\n查看 Pod：kubectl get pods\n删除创建的 RC：kubectl delete -f mysql-rc.yaml\n查看 pods 详情：kubectl describe pod mysql\n创建 service：kubectl create -f mysql-svc.yaml\n查看 service：kubectl get svc\n```","slug":"kubernetes-notes-0","published":1,"updated":"2019-03-25T13:57:54.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpm002y05ab4yfxxtwc","content":"<h2 id=\"安装启动：\"><a href=\"#安装启动：\" class=\"headerlink\" title=\"安装启动：\"></a>安装启动：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 etcd 和 Kubernetes 软件（会自动安装 Docker 软件）</span><br><span class=\"line\">yum install -y etcd kubernetes</span><br><span class=\"line\"> </span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start etcd</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl start kube-apiserver</span><br><span class=\"line\">systemctl start kube-controller-manager</span><br><span class=\"line\">systemctl start kube-scheduler</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\">systemctl start kube-proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发布：kubectl create -f mysql-rc.yaml</span><br><span class=\"line\">查看刚刚创建的 RC：kubectl get rc</span><br><span class=\"line\">查看 Pod：kubectl get pods</span><br><span class=\"line\">删除创建的 RC：kubectl delete -f mysql-rc.yaml</span><br><span class=\"line\">查看 pods 详情：kubectl describe pod mysql</span><br><span class=\"line\">创建 service：kubectl create -f mysql-svc.yaml</span><br><span class=\"line\">查看 service：kubectl get svc</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装启动：\"><a href=\"#安装启动：\" class=\"headerlink\" title=\"安装启动：\"></a>安装启动：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 etcd 和 Kubernetes 软件（会自动安装 Docker 软件）</span><br><span class=\"line\">yum install -y etcd kubernetes</span><br><span class=\"line\"> </span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start etcd</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl start kube-apiserver</span><br><span class=\"line\">systemctl start kube-controller-manager</span><br><span class=\"line\">systemctl start kube-scheduler</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\">systemctl start kube-proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发布：kubectl create -f mysql-rc.yaml</span><br><span class=\"line\">查看刚刚创建的 RC：kubectl get rc</span><br><span class=\"line\">查看 Pod：kubectl get pods</span><br><span class=\"line\">删除创建的 RC：kubectl delete -f mysql-rc.yaml</span><br><span class=\"line\">查看 pods 详情：kubectl describe pod mysql</span><br><span class=\"line\">创建 service：kubectl create -f mysql-svc.yaml</span><br><span class=\"line\">查看 service：kubectl get svc</span><br></pre></td></tr></table></figure>"},{"post-url":"k8s-6443-was-refused","title":"Mac Kubernetes 报 The connection to the server localhost:6443 was refused","date":"2018-12-22T14:11:22.000Z","_content":"原文：https://github.com/kubernetes/kubernetes/issues/23726\n\n\nDeleted the old config from ~/.kube and then restarted docker (for macos) and it rebuilt the config folder.\n\nAll good now when I do 'kubectl get nodes'.\n\n\n1. rm -rf ~/.kube\n\n2. 重启 docker 和 k8s","source":"_posts/k8s-6443-was-refused.md","raw":"---\npost-url: k8s-6443-was-refused\ntitle: Mac Kubernetes 报 The connection to the server localhost:6443 was refused\ndate: 2018-12-22 22:11:22\ntags: kubernetes\n---\n原文：https://github.com/kubernetes/kubernetes/issues/23726\n\n\nDeleted the old config from ~/.kube and then restarted docker (for macos) and it rebuilt the config folder.\n\nAll good now when I do 'kubectl get nodes'.\n\n\n1. rm -rf ~/.kube\n\n2. 重启 docker 和 k8s","slug":"k8s-6443-was-refused","published":1,"updated":"2019-03-25T13:57:47.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpn003005ab7puwmwm4","content":"<p>原文：<a href=\"https://github.com/kubernetes/kubernetes/issues/23726\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/issues/23726</a></p>\n<p>Deleted the old config from ~/.kube and then restarted docker (for macos) and it rebuilt the config folder.</p>\n<p>All good now when I do ‘kubectl get nodes’.</p>\n<ol>\n<li><p>rm -rf ~/.kube</p>\n</li>\n<li><p>重启 docker 和 k8s</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://github.com/kubernetes/kubernetes/issues/23726\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/kubernetes/issues/23726</a></p>\n<p>Deleted the old config from ~/.kube and then restarted docker (for macos) and it rebuilt the config folder.</p>\n<p>All good now when I do ‘kubectl get nodes’.</p>\n<ol>\n<li><p>rm -rf ~/.kube</p>\n</li>\n<li><p>重启 docker 和 k8s</p>\n</li>\n</ol>\n"},{"post_url":"linux-notes","title":"Linux、CentOS、Windows、零散笔记","date":"2017-09-18T09:48:19.000Z","_content":"一、Linux相关(以下均在CentOS中操作)\n1.安装sz/rz：yum install lrzsz\n\n2.新建的.sh文件不能执行：chmod +x a.sh\n\n3.创建目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}\n\n4.cat << EOF > EOF\n\n# 新建或覆盖\ncat << EOF > /root/xxx.txt\naaa\nbbb\nEOF\n# 新建或文尾追加\ncat << EOF >> /root/xxx.txt\naaa\nbbb\nEOF\n\n5.linux swap（磁盘缓存）：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。\n\n6.查看目录大小：du -h --max-depth=1 /\n\ndu -sh /*\n\n7.linux 定时任务：service crond status (start、stop、restart、reload、status)\ncat <<EOF >  /root/cleanlog.cron\n25,35 * * * * cd /root/cron/ && ./cleanlog.sh\nEOF\n添加任务：crontab cleanlog.cron\n查看任务：crontab -l\n\n删除修改添加任务：crontab -e\n(minute) (hour) (day of month) (month) (day of week)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 6) (Sunday=0 or 7)\n\n\n10.查找文件：find / -name *my.cnf*\n\n\n11.Linux杀死进程(以关闭Elasticsearch为例)：\nps -ef | grep elastic\n\nkill -9 进程号\n\n或 kill $(ps -ef | grep elastic | awk '{print $2}')\n\n原型：kill $(jps | awk '{print $1}')\n\n$1：表示jps出来的第一个参数\n\n \n\n\n12.hosts配置文件路径：/etc/hosts\n\n\n13.查看和修改计算机名\n查看：hostname\n\nCentOS6修改：/etc/sysconfig/network中修改hostname=destname(目标名字)\n\nCentOS7修改：/etc/hostname\n\n\n\n14.resin日志\n目录：/home/admin/resin/log\n显示实时日志：tail -f jvm-app-0.log\n\n\n15.查看文件实时更新：tail -f  aaaaa.log\n\n\n16.Storm启停\n启动：例：jstorm jar /home/admin/stormmy-0.1-jar-with-dependencies.jar com.iaiot.Topology.MyTopo /home/admin/conf.yaml\n关闭：例：jstorm kill mytopo(拓扑名)\n\n\n18.用户管理\n添加用户：useradd admin\n设置密码：passwd admin(回车设密码)\n删除用户：userdel -rf admin\n创建用户参数解释：useradd -s /sbin/nologin -M -g admin admin\n        -s表示指定用户所用的shell，此处为/sbin/nologin，表示不登录\n        -M表示不创建用户主目录\n        -g表示指定用户的组名为admin\n        最后的admin表示用户名\n\n\n22.tar压缩解压\n压缩：tar -zcvf /home/aa.tar.gz /aa/\n解压：tar -zxvf aa.tar.gz\n      tar -xvf  aa.tar\n\n\n23.查看内存使用情况\n\nfree -h\n\nfree -m\n其中-m是指以M为单位显示已用的和空闲的内存\n详细可参考：http://www.cnblogs.com/zhaoyl/p/4325811.html\n附查看所有文件系统使用情况：df -h\n查看文件及文件夹的大小：du -h  \n查看文件夹大小：du -h --max-depth=1 /usr/local/tomcat/logs/\n查看文件夹下所有文件及文件夹大小：du -h --max-depth=1 /usr/local/tomcat/logs/*\n--max-depth表示要查询目录的深度\n参考：https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html\n\n\n24.chown\n给指定用户授权指定目录：chown admin:admin -R /home/resin\n查看指定用户所属用户组：groups admin\nadmin:admin ： 用户所属用户组：用户名\n\n\n\n26.复制目录\ncp -r dir1/ dir2/\n\n\n28.resin启停（resin根目录下）\n启动：java -jar lib/resin.jar start\n停止：java -jar lib/resin.jar stop\n\n\n29.vsftpd相关\n安装：http://blog.csdn.net/the_victory/article/details/52192085\n设置开机启动：chkconfig vsftpd on\n注意：还要给ftp用户所访问的目录设置权限 例：chmod -R 777 /mnt/sites\n\n\n30.用户与用户组相关操作\n参考文章：http://www.cnblogs.com/jackyyou/p/5498083.html\n          https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html\n\n\n31.查看系统时间命令：date\n\n\n32.返回上一目录：cd -\n\n\n33.找出包含某字符串的文件\ngrep -r vn_static_root /opt/verynginx/\n参考：http://www.runoob.com/linux/linux-comm-grep.html\n  \n34.查看系统信息\n版本：cat /etc/redhat-release\n位数：getconf LONG_BIT\n\n\n35.源码安装node.js\n准备命令：yum -y install gcc make gcc-c++ openssl-devel wget\n下载源码及解压：wget http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz\ntar -zvxf node-v0.10.26.tar.gz\n编译及安装：cd node-v0.10.26\nmake && make install\n验证是否安装配置成功：node -v\n参考地址：http://www.jianshu.com/p/783906f10d58\n\n\n37.命令行下粘贴：Shift+Insert (Windows下也适用)\n\n\n38.易读方式显示目录下文件大小：ll -h\n\n\n39.查看登陆记录：last\n参考：https://www.cnblogs.com/lizhaoxian/p/5981029.html\n\n\n41.查看机器负载：\nuptime\nw\n实时监控：top\n参考：http://blog.csdn.net/szchtx/article/details/38455385\n\n\n\n43.scp 远程复制\n远程到本地：scp root@192.168.1.5:/home/admin/storm.jar /home/\n本地到远程：scp /home/storm.jar root@192.168.1.5:/home/admin/\n\n递归复制目录：scp -r /data/nginx/ root@192.168.153.150:/data/\n参考：http://www.runoob.com/linux/linux-comm-scp.html\n\n\n44.安装vim\nyum install vim\n\n \n\n \n\n47.查看 linux 网络状态：netstat\n\n例：查看 FastDFS 运行状态：netstat -unltp|grep fdfs\n\n \n\n \n\n51.XenServer\n\nxe console-list\n\nxe console uuid=7089a098-ed7a-4f9e-bd88-a916da2fd700\n\n \n\n \n\n53.查看某个进程或者服务是否存在\n\nps -aux ｜ grep xxx\n\n \n\n57.resin 配置到一个地址\n```\n<host id=\"message.api.mardi.com\" root-directory=\".\">\n            <host-alias>message.api.mardi.com</host-alias>\n            <host-alias>message.api.iaiot.com</host-alias>\n            <web-app id=\"/\" root-directory=\"webapps/mardi_api\" />\n   </host>\n```\n \n\n58.查看centos内核版本\n\nuname -r\n\n \n\n59.CentOS 安装 jdk\n```\n# 下载java的jar包解压后在 /etc/profile 文尾添加如下配置\nJAVA_HOME=/usr/java/jdk1.8.0_101\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\nexport PATH JAVA_HOME CLASSPATH\n# 添加上述配置后执行 source /etc/profile 使配置即时生效\n```\n\n二、Windows相关：\n1.Windows下查找某目录下包含某字符串的文件方法\nfindstr -s -i \"listener\" *.*\n-s:遍历当前目录及子目录\n-i:忽略大小写\n其他参数说明请参考：http://blog.csdn.net/zhiqiangzhan/article/details/5828533\n\n\n3.Windows自动关机命令\n3600秒后自动关机：shutdown -f -s -t 3600\n撤销自动关机：shutdown -a\n \n\n5.查看WinSCP记住的密码：\n\n用winscppwd.exe，百度winscppwd\n\n命令：winscppwd WINSCP.INI\n\n \n\n \n\n\n三、Windows软件推荐：\n1.本地全局文件搜索：Everything\n2.Java class反编译工具：jd-gui\n3.hosts管理工具：SwitchHosts\n\n \n\n \n\n\n四、Note\n1.代码中用空格代替tab\n2.word2016不显示换行符：文件-选项-显示-段落标记-取消勾选\n3.正则表达式(“[]”和“{}”可以实现大部分常规的表达式)\n[]：表示其中的任何一个字符 [a-z],[0-9]\n{}：表示出现的次数 a{3}\n{m}：正好出现m次\n{m,n}：最少m次，最多n次\n{m,}：最少m次，没有上限\n例：手机号码：1[34578][0-9]{9}\n\n \n\n4.使用MyBatis Generator自动创建代码 命令：\n\njava -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite\n\n参考地址：https://blog.csdn.net/zhshulin/article/details/23912615\n","source":"_posts/linux-notes.md","raw":"---\npost_url: linux-notes\ntitle: Linux、CentOS、Windows、零散笔记\ndate: 2017-09-18 17:48:19\ntags: [linux, windows]\n---\n一、Linux相关(以下均在CentOS中操作)\n1.安装sz/rz：yum install lrzsz\n\n2.新建的.sh文件不能执行：chmod +x a.sh\n\n3.创建目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}\n\n4.cat << EOF > EOF\n\n# 新建或覆盖\ncat << EOF > /root/xxx.txt\naaa\nbbb\nEOF\n# 新建或文尾追加\ncat << EOF >> /root/xxx.txt\naaa\nbbb\nEOF\n\n5.linux swap（磁盘缓存）：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。\n\n6.查看目录大小：du -h --max-depth=1 /\n\ndu -sh /*\n\n7.linux 定时任务：service crond status (start、stop、restart、reload、status)\ncat <<EOF >  /root/cleanlog.cron\n25,35 * * * * cd /root/cron/ && ./cleanlog.sh\nEOF\n添加任务：crontab cleanlog.cron\n查看任务：crontab -l\n\n删除修改添加任务：crontab -e\n(minute) (hour) (day of month) (month) (day of week)\nminute (0 - 59)\nhour (0 - 23)\nday of month (1 - 31)\nmonth (1 - 12)\nday of week (0 - 6) (Sunday=0 or 7)\n\n\n10.查找文件：find / -name *my.cnf*\n\n\n11.Linux杀死进程(以关闭Elasticsearch为例)：\nps -ef | grep elastic\n\nkill -9 进程号\n\n或 kill $(ps -ef | grep elastic | awk '{print $2}')\n\n原型：kill $(jps | awk '{print $1}')\n\n$1：表示jps出来的第一个参数\n\n \n\n\n12.hosts配置文件路径：/etc/hosts\n\n\n13.查看和修改计算机名\n查看：hostname\n\nCentOS6修改：/etc/sysconfig/network中修改hostname=destname(目标名字)\n\nCentOS7修改：/etc/hostname\n\n\n\n14.resin日志\n目录：/home/admin/resin/log\n显示实时日志：tail -f jvm-app-0.log\n\n\n15.查看文件实时更新：tail -f  aaaaa.log\n\n\n16.Storm启停\n启动：例：jstorm jar /home/admin/stormmy-0.1-jar-with-dependencies.jar com.iaiot.Topology.MyTopo /home/admin/conf.yaml\n关闭：例：jstorm kill mytopo(拓扑名)\n\n\n18.用户管理\n添加用户：useradd admin\n设置密码：passwd admin(回车设密码)\n删除用户：userdel -rf admin\n创建用户参数解释：useradd -s /sbin/nologin -M -g admin admin\n        -s表示指定用户所用的shell，此处为/sbin/nologin，表示不登录\n        -M表示不创建用户主目录\n        -g表示指定用户的组名为admin\n        最后的admin表示用户名\n\n\n22.tar压缩解压\n压缩：tar -zcvf /home/aa.tar.gz /aa/\n解压：tar -zxvf aa.tar.gz\n      tar -xvf  aa.tar\n\n\n23.查看内存使用情况\n\nfree -h\n\nfree -m\n其中-m是指以M为单位显示已用的和空闲的内存\n详细可参考：http://www.cnblogs.com/zhaoyl/p/4325811.html\n附查看所有文件系统使用情况：df -h\n查看文件及文件夹的大小：du -h  \n查看文件夹大小：du -h --max-depth=1 /usr/local/tomcat/logs/\n查看文件夹下所有文件及文件夹大小：du -h --max-depth=1 /usr/local/tomcat/logs/*\n--max-depth表示要查询目录的深度\n参考：https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html\n\n\n24.chown\n给指定用户授权指定目录：chown admin:admin -R /home/resin\n查看指定用户所属用户组：groups admin\nadmin:admin ： 用户所属用户组：用户名\n\n\n\n26.复制目录\ncp -r dir1/ dir2/\n\n\n28.resin启停（resin根目录下）\n启动：java -jar lib/resin.jar start\n停止：java -jar lib/resin.jar stop\n\n\n29.vsftpd相关\n安装：http://blog.csdn.net/the_victory/article/details/52192085\n设置开机启动：chkconfig vsftpd on\n注意：还要给ftp用户所访问的目录设置权限 例：chmod -R 777 /mnt/sites\n\n\n30.用户与用户组相关操作\n参考文章：http://www.cnblogs.com/jackyyou/p/5498083.html\n          https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html\n\n\n31.查看系统时间命令：date\n\n\n32.返回上一目录：cd -\n\n\n33.找出包含某字符串的文件\ngrep -r vn_static_root /opt/verynginx/\n参考：http://www.runoob.com/linux/linux-comm-grep.html\n  \n34.查看系统信息\n版本：cat /etc/redhat-release\n位数：getconf LONG_BIT\n\n\n35.源码安装node.js\n准备命令：yum -y install gcc make gcc-c++ openssl-devel wget\n下载源码及解压：wget http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz\ntar -zvxf node-v0.10.26.tar.gz\n编译及安装：cd node-v0.10.26\nmake && make install\n验证是否安装配置成功：node -v\n参考地址：http://www.jianshu.com/p/783906f10d58\n\n\n37.命令行下粘贴：Shift+Insert (Windows下也适用)\n\n\n38.易读方式显示目录下文件大小：ll -h\n\n\n39.查看登陆记录：last\n参考：https://www.cnblogs.com/lizhaoxian/p/5981029.html\n\n\n41.查看机器负载：\nuptime\nw\n实时监控：top\n参考：http://blog.csdn.net/szchtx/article/details/38455385\n\n\n\n43.scp 远程复制\n远程到本地：scp root@192.168.1.5:/home/admin/storm.jar /home/\n本地到远程：scp /home/storm.jar root@192.168.1.5:/home/admin/\n\n递归复制目录：scp -r /data/nginx/ root@192.168.153.150:/data/\n参考：http://www.runoob.com/linux/linux-comm-scp.html\n\n\n44.安装vim\nyum install vim\n\n \n\n \n\n47.查看 linux 网络状态：netstat\n\n例：查看 FastDFS 运行状态：netstat -unltp|grep fdfs\n\n \n\n \n\n51.XenServer\n\nxe console-list\n\nxe console uuid=7089a098-ed7a-4f9e-bd88-a916da2fd700\n\n \n\n \n\n53.查看某个进程或者服务是否存在\n\nps -aux ｜ grep xxx\n\n \n\n57.resin 配置到一个地址\n```\n<host id=\"message.api.mardi.com\" root-directory=\".\">\n            <host-alias>message.api.mardi.com</host-alias>\n            <host-alias>message.api.iaiot.com</host-alias>\n            <web-app id=\"/\" root-directory=\"webapps/mardi_api\" />\n   </host>\n```\n \n\n58.查看centos内核版本\n\nuname -r\n\n \n\n59.CentOS 安装 jdk\n```\n# 下载java的jar包解压后在 /etc/profile 文尾添加如下配置\nJAVA_HOME=/usr/java/jdk1.8.0_101\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\nexport PATH JAVA_HOME CLASSPATH\n# 添加上述配置后执行 source /etc/profile 使配置即时生效\n```\n\n二、Windows相关：\n1.Windows下查找某目录下包含某字符串的文件方法\nfindstr -s -i \"listener\" *.*\n-s:遍历当前目录及子目录\n-i:忽略大小写\n其他参数说明请参考：http://blog.csdn.net/zhiqiangzhan/article/details/5828533\n\n\n3.Windows自动关机命令\n3600秒后自动关机：shutdown -f -s -t 3600\n撤销自动关机：shutdown -a\n \n\n5.查看WinSCP记住的密码：\n\n用winscppwd.exe，百度winscppwd\n\n命令：winscppwd WINSCP.INI\n\n \n\n \n\n\n三、Windows软件推荐：\n1.本地全局文件搜索：Everything\n2.Java class反编译工具：jd-gui\n3.hosts管理工具：SwitchHosts\n\n \n\n \n\n\n四、Note\n1.代码中用空格代替tab\n2.word2016不显示换行符：文件-选项-显示-段落标记-取消勾选\n3.正则表达式(“[]”和“{}”可以实现大部分常规的表达式)\n[]：表示其中的任何一个字符 [a-z],[0-9]\n{}：表示出现的次数 a{3}\n{m}：正好出现m次\n{m,n}：最少m次，最多n次\n{m,}：最少m次，没有上限\n例：手机号码：1[34578][0-9]{9}\n\n \n\n4.使用MyBatis Generator自动创建代码 命令：\n\njava -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite\n\n参考地址：https://blog.csdn.net/zhshulin/article/details/23912615\n","slug":"linux-notes","published":1,"updated":"2019-03-25T13:58:46.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpo003305abm6dye1t0","content":"<p>一、Linux相关(以下均在CentOS中操作)<br>1.安装sz/rz：yum install lrzsz</p>\n<p>2.新建的.sh文件不能执行：chmod +x a.sh</p>\n<p>3.创建目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}</p>\n<p>4.cat &lt;&lt; EOF &gt; EOF</p>\n<h1 id=\"新建或覆盖\"><a href=\"#新建或覆盖\" class=\"headerlink\" title=\"新建或覆盖\"></a>新建或覆盖</h1><p>cat &lt;&lt; EOF &gt; /root/xxx.txt<br>aaa<br>bbb<br>EOF</p>\n<h1 id=\"新建或文尾追加\"><a href=\"#新建或文尾追加\" class=\"headerlink\" title=\"新建或文尾追加\"></a>新建或文尾追加</h1><p>cat &lt;&lt; EOF &gt;&gt; /root/xxx.txt<br>aaa<br>bbb<br>EOF</p>\n<p>5.linux swap（磁盘缓存）：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。</p>\n<p>6.查看目录大小：du -h –max-depth=1 /</p>\n<p>du -sh /*</p>\n<p>7.linux 定时任务：service crond status (start、stop、restart、reload、status)<br>cat &lt;<eof>  /root/cleanlog.cron<br>25,35 <em> </em> <em> </em> cd /root/cron/ &amp;&amp; ./cleanlog.sh<br>EOF<br>添加任务：crontab cleanlog.cron<br>查看任务：crontab -l</eof></p>\n<p>删除修改添加任务：crontab -e<br>(minute) (hour) (day of month) (month) (day of week)<br>minute (0 - 59)<br>hour (0 - 23)<br>day of month (1 - 31)<br>month (1 - 12)<br>day of week (0 - 6) (Sunday=0 or 7)</p>\n<p>10.查找文件：find / -name <em>my.cnf</em></p>\n<p>11.Linux杀死进程(以关闭Elasticsearch为例)：<br>ps -ef | grep elastic</p>\n<p>kill -9 进程号</p>\n<p>或 kill $(ps -ef | grep elastic | awk ‘{print $2}’)</p>\n<p>原型：kill $(jps | awk ‘{print $1}’)</p>\n<p>$1：表示jps出来的第一个参数</p>\n<p>12.hosts配置文件路径：/etc/hosts</p>\n<p>13.查看和修改计算机名<br>查看：hostname</p>\n<p>CentOS6修改：/etc/sysconfig/network中修改hostname=destname(目标名字)</p>\n<p>CentOS7修改：/etc/hostname</p>\n<p>14.resin日志<br>目录：/home/admin/resin/log<br>显示实时日志：tail -f jvm-app-0.log</p>\n<p>15.查看文件实时更新：tail -f  aaaaa.log</p>\n<p>16.Storm启停<br>启动：例：jstorm jar /home/admin/stormmy-0.1-jar-with-dependencies.jar com.iaiot.Topology.MyTopo /home/admin/conf.yaml<br>关闭：例：jstorm kill mytopo(拓扑名)</p>\n<p>18.用户管理<br>添加用户：useradd admin<br>设置密码：passwd admin(回车设密码)<br>删除用户：userdel -rf admin<br>创建用户参数解释：useradd -s /sbin/nologin -M -g admin admin<br>        -s表示指定用户所用的shell，此处为/sbin/nologin，表示不登录<br>        -M表示不创建用户主目录<br>        -g表示指定用户的组名为admin<br>        最后的admin表示用户名</p>\n<p>22.tar压缩解压<br>压缩：tar -zcvf /home/aa.tar.gz /aa/<br>解压：tar -zxvf aa.tar.gz<br>      tar -xvf  aa.tar</p>\n<p>23.查看内存使用情况</p>\n<p>free -h</p>\n<p>free -m<br>其中-m是指以M为单位显示已用的和空闲的内存<br>详细可参考：<a href=\"http://www.cnblogs.com/zhaoyl/p/4325811.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyl/p/4325811.html</a><br>附查看所有文件系统使用情况：df -h<br>查看文件及文件夹的大小：du -h<br>查看文件夹大小：du -h –max-depth=1 /usr/local/tomcat/logs/<br>查看文件夹下所有文件及文件夹大小：du -h –max-depth=1 /usr/local/tomcat/logs/*<br>–max-depth表示要查询目录的深度<br>参考：<a href=\"https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html</a></p>\n<p>24.chown<br>给指定用户授权指定目录：chown admin:admin -R /home/resin<br>查看指定用户所属用户组：groups admin<br>admin:admin ： 用户所属用户组：用户名</p>\n<p>26.复制目录<br>cp -r dir1/ dir2/</p>\n<p>28.resin启停（resin根目录下）<br>启动：java -jar lib/resin.jar start<br>停止：java -jar lib/resin.jar stop</p>\n<p>29.vsftpd相关<br>安装：<a href=\"http://blog.csdn.net/the_victory/article/details/52192085\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/the_victory/article/details/52192085</a><br>设置开机启动：chkconfig vsftpd on<br>注意：还要给ftp用户所访问的目录设置权限 例：chmod -R 777 /mnt/sites</p>\n<p>30.用户与用户组相关操作<br>参考文章：<a href=\"http://www.cnblogs.com/jackyyou/p/5498083.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jackyyou/p/5498083.html</a><br>          <a href=\"https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html</a></p>\n<p>31.查看系统时间命令：date</p>\n<p>32.返回上一目录：cd -</p>\n<p>33.找出包含某字符串的文件<br>grep -r vn_static_root /opt/verynginx/<br>参考：<a href=\"http://www.runoob.com/linux/linux-comm-grep.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-comm-grep.html</a></p>\n<p>34.查看系统信息<br>版本：cat /etc/redhat-release<br>位数：getconf LONG_BIT</p>\n<p>35.源码安装node.js<br>准备命令：yum -y install gcc make gcc-c++ openssl-devel wget<br>下载源码及解压：wget <a href=\"http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz</a><br>tar -zvxf node-v0.10.26.tar.gz<br>编译及安装：cd node-v0.10.26<br>make &amp;&amp; make install<br>验证是否安装配置成功：node -v<br>参考地址：<a href=\"http://www.jianshu.com/p/783906f10d58\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/783906f10d58</a></p>\n<p>37.命令行下粘贴：Shift+Insert (Windows下也适用)</p>\n<p>38.易读方式显示目录下文件大小：ll -h</p>\n<p>39.查看登陆记录：last<br>参考：<a href=\"https://www.cnblogs.com/lizhaoxian/p/5981029.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lizhaoxian/p/5981029.html</a></p>\n<p>41.查看机器负载：<br>uptime<br>w<br>实时监控：top<br>参考：<a href=\"http://blog.csdn.net/szchtx/article/details/38455385\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/szchtx/article/details/38455385</a></p>\n<p>43.scp 远程复制<br>远程到本地：scp <a href=\"mailto:root@192.168.1.5\" target=\"_blank\" rel=\"noopener\">root@192.168.1.5</a>:/home/admin/storm.jar /home/<br>本地到远程：scp /home/storm.jar <a href=\"mailto:root@192.168.1.5\" target=\"_blank\" rel=\"noopener\">root@192.168.1.5</a>:/home/admin/</p>\n<p>递归复制目录：scp -r /data/nginx/ <a href=\"mailto:root@192.168.153.150\" target=\"_blank\" rel=\"noopener\">root@192.168.153.150</a>:/data/<br>参考：<a href=\"http://www.runoob.com/linux/linux-comm-scp.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-comm-scp.html</a></p>\n<p>44.安装vim<br>yum install vim</p>\n<p>47.查看 linux 网络状态：netstat</p>\n<p>例：查看 FastDFS 运行状态：netstat -unltp|grep fdfs</p>\n<p>51.XenServer</p>\n<p>xe console-list</p>\n<p>xe console uuid=7089a098-ed7a-4f9e-bd88-a916da2fd700</p>\n<p>53.查看某个进程或者服务是否存在</p>\n<p>ps -aux ｜ grep xxx</p>\n<p>57.resin 配置到一个地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;host id=&quot;message.api.mardi.com&quot; root-directory=&quot;.&quot;&gt;</span><br><span class=\"line\">            &lt;host-alias&gt;message.api.mardi.com&lt;/host-alias&gt;</span><br><span class=\"line\">            &lt;host-alias&gt;message.api.iaiot.com&lt;/host-alias&gt;</span><br><span class=\"line\">            &lt;web-app id=&quot;/&quot; root-directory=&quot;webapps/mardi_api&quot; /&gt;</span><br><span class=\"line\">   &lt;/host&gt;</span><br></pre></td></tr></table></figure></p>\n<p>58.查看centos内核版本</p>\n<p>uname -r</p>\n<p>59.CentOS 安装 jdk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载java的jar包解压后在 /etc/profile 文尾添加如下配置</span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_101</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br><span class=\"line\"># 添加上述配置后执行 source /etc/profile 使配置即时生效</span><br></pre></td></tr></table></figure></p>\n<p>二、Windows相关：<br>1.Windows下查找某目录下包含某字符串的文件方法<br>findstr -s -i “listener” <em>.</em><br>-s:遍历当前目录及子目录<br>-i:忽略大小写<br>其他参数说明请参考：<a href=\"http://blog.csdn.net/zhiqiangzhan/article/details/5828533\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhiqiangzhan/article/details/5828533</a></p>\n<p>3.Windows自动关机命令<br>3600秒后自动关机：shutdown -f -s -t 3600<br>撤销自动关机：shutdown -a</p>\n<p>5.查看WinSCP记住的密码：</p>\n<p>用winscppwd.exe，百度winscppwd</p>\n<p>命令：winscppwd WINSCP.INI</p>\n<p>三、Windows软件推荐：<br>1.本地全局文件搜索：Everything<br>2.Java class反编译工具：jd-gui<br>3.hosts管理工具：SwitchHosts</p>\n<p>四、Note<br>1.代码中用空格代替tab<br>2.word2016不显示换行符：文件-选项-显示-段落标记-取消勾选<br>3.正则表达式(“[]”和“{}”可以实现大部分常规的表达式)<br>[]：表示其中的任何一个字符 [a-z],[0-9]<br>{}：表示出现的次数 a{3}<br>{m}：正好出现m次<br>{m,n}：最少m次，最多n次<br>{m,}：最少m次，没有上限<br>例：手机号码：1[34578][0-9]{9}</p>\n<p>4.使用MyBatis Generator自动创建代码 命令：</p>\n<p>java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/zhshulin/article/details/23912615\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhshulin/article/details/23912615</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、Linux相关(以下均在CentOS中操作)<br>1.安装sz/rz：yum install lrzsz</p>\n<p>2.新建的.sh文件不能执行：chmod +x a.sh</p>\n<p>3.创建目录：mkdir -p /data/nginx/{conf,conf.d,html,logs}</p>\n<p>4.cat &lt;&lt; EOF &gt; EOF</p>\n<h1 id=\"新建或覆盖\"><a href=\"#新建或覆盖\" class=\"headerlink\" title=\"新建或覆盖\"></a>新建或覆盖</h1><p>cat &lt;&lt; EOF &gt; /root/xxx.txt<br>aaa<br>bbb<br>EOF</p>\n<h1 id=\"新建或文尾追加\"><a href=\"#新建或文尾追加\" class=\"headerlink\" title=\"新建或文尾追加\"></a>新建或文尾追加</h1><p>cat &lt;&lt; EOF &gt;&gt; /root/xxx.txt<br>aaa<br>bbb<br>EOF</p>\n<p>5.linux swap（磁盘缓存）：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。</p>\n<p>6.查看目录大小：du -h –max-depth=1 /</p>\n<p>du -sh /*</p>\n<p>7.linux 定时任务：service crond status (start、stop、restart、reload、status)<br>cat &lt;<eof>  /root/cleanlog.cron<br>25,35 <em> </em> <em> </em> cd /root/cron/ &amp;&amp; ./cleanlog.sh<br>EOF<br>添加任务：crontab cleanlog.cron<br>查看任务：crontab -l</eof></p>\n<p>删除修改添加任务：crontab -e<br>(minute) (hour) (day of month) (month) (day of week)<br>minute (0 - 59)<br>hour (0 - 23)<br>day of month (1 - 31)<br>month (1 - 12)<br>day of week (0 - 6) (Sunday=0 or 7)</p>\n<p>10.查找文件：find / -name <em>my.cnf</em></p>\n<p>11.Linux杀死进程(以关闭Elasticsearch为例)：<br>ps -ef | grep elastic</p>\n<p>kill -9 进程号</p>\n<p>或 kill $(ps -ef | grep elastic | awk ‘{print $2}’)</p>\n<p>原型：kill $(jps | awk ‘{print $1}’)</p>\n<p>$1：表示jps出来的第一个参数</p>\n<p>12.hosts配置文件路径：/etc/hosts</p>\n<p>13.查看和修改计算机名<br>查看：hostname</p>\n<p>CentOS6修改：/etc/sysconfig/network中修改hostname=destname(目标名字)</p>\n<p>CentOS7修改：/etc/hostname</p>\n<p>14.resin日志<br>目录：/home/admin/resin/log<br>显示实时日志：tail -f jvm-app-0.log</p>\n<p>15.查看文件实时更新：tail -f  aaaaa.log</p>\n<p>16.Storm启停<br>启动：例：jstorm jar /home/admin/stormmy-0.1-jar-with-dependencies.jar com.iaiot.Topology.MyTopo /home/admin/conf.yaml<br>关闭：例：jstorm kill mytopo(拓扑名)</p>\n<p>18.用户管理<br>添加用户：useradd admin<br>设置密码：passwd admin(回车设密码)<br>删除用户：userdel -rf admin<br>创建用户参数解释：useradd -s /sbin/nologin -M -g admin admin<br>        -s表示指定用户所用的shell，此处为/sbin/nologin，表示不登录<br>        -M表示不创建用户主目录<br>        -g表示指定用户的组名为admin<br>        最后的admin表示用户名</p>\n<p>22.tar压缩解压<br>压缩：tar -zcvf /home/aa.tar.gz /aa/<br>解压：tar -zxvf aa.tar.gz<br>      tar -xvf  aa.tar</p>\n<p>23.查看内存使用情况</p>\n<p>free -h</p>\n<p>free -m<br>其中-m是指以M为单位显示已用的和空闲的内存<br>详细可参考：<a href=\"http://www.cnblogs.com/zhaoyl/p/4325811.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyl/p/4325811.html</a><br>附查看所有文件系统使用情况：df -h<br>查看文件及文件夹的大小：du -h<br>查看文件夹大小：du -h –max-depth=1 /usr/local/tomcat/logs/<br>查看文件夹下所有文件及文件夹大小：du -h –max-depth=1 /usr/local/tomcat/logs/*<br>–max-depth表示要查询目录的深度<br>参考：<a href=\"https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/benio/archive/2010/10/13/1849946.html</a></p>\n<p>24.chown<br>给指定用户授权指定目录：chown admin:admin -R /home/resin<br>查看指定用户所属用户组：groups admin<br>admin:admin ： 用户所属用户组：用户名</p>\n<p>26.复制目录<br>cp -r dir1/ dir2/</p>\n<p>28.resin启停（resin根目录下）<br>启动：java -jar lib/resin.jar start<br>停止：java -jar lib/resin.jar stop</p>\n<p>29.vsftpd相关<br>安装：<a href=\"http://blog.csdn.net/the_victory/article/details/52192085\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/the_victory/article/details/52192085</a><br>设置开机启动：chkconfig vsftpd on<br>注意：还要给ftp用户所访问的目录设置权限 例：chmod -R 777 /mnt/sites</p>\n<p>30.用户与用户组相关操作<br>参考文章：<a href=\"http://www.cnblogs.com/jackyyou/p/5498083.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jackyyou/p/5498083.html</a><br>          <a href=\"https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/a681b0de159b093b184346a7.html</a></p>\n<p>31.查看系统时间命令：date</p>\n<p>32.返回上一目录：cd -</p>\n<p>33.找出包含某字符串的文件<br>grep -r vn_static_root /opt/verynginx/<br>参考：<a href=\"http://www.runoob.com/linux/linux-comm-grep.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-comm-grep.html</a></p>\n<p>34.查看系统信息<br>版本：cat /etc/redhat-release<br>位数：getconf LONG_BIT</p>\n<p>35.源码安装node.js<br>准备命令：yum -y install gcc make gcc-c++ openssl-devel wget<br>下载源码及解压：wget <a href=\"http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz</a><br>tar -zvxf node-v0.10.26.tar.gz<br>编译及安装：cd node-v0.10.26<br>make &amp;&amp; make install<br>验证是否安装配置成功：node -v<br>参考地址：<a href=\"http://www.jianshu.com/p/783906f10d58\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/783906f10d58</a></p>\n<p>37.命令行下粘贴：Shift+Insert (Windows下也适用)</p>\n<p>38.易读方式显示目录下文件大小：ll -h</p>\n<p>39.查看登陆记录：last<br>参考：<a href=\"https://www.cnblogs.com/lizhaoxian/p/5981029.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lizhaoxian/p/5981029.html</a></p>\n<p>41.查看机器负载：<br>uptime<br>w<br>实时监控：top<br>参考：<a href=\"http://blog.csdn.net/szchtx/article/details/38455385\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/szchtx/article/details/38455385</a></p>\n<p>43.scp 远程复制<br>远程到本地：scp <a href=\"mailto:root@192.168.1.5\" target=\"_blank\" rel=\"noopener\">root@192.168.1.5</a>:/home/admin/storm.jar /home/<br>本地到远程：scp /home/storm.jar <a href=\"mailto:root@192.168.1.5\" target=\"_blank\" rel=\"noopener\">root@192.168.1.5</a>:/home/admin/</p>\n<p>递归复制目录：scp -r /data/nginx/ <a href=\"mailto:root@192.168.153.150\" target=\"_blank\" rel=\"noopener\">root@192.168.153.150</a>:/data/<br>参考：<a href=\"http://www.runoob.com/linux/linux-comm-scp.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-comm-scp.html</a></p>\n<p>44.安装vim<br>yum install vim</p>\n<p>47.查看 linux 网络状态：netstat</p>\n<p>例：查看 FastDFS 运行状态：netstat -unltp|grep fdfs</p>\n<p>51.XenServer</p>\n<p>xe console-list</p>\n<p>xe console uuid=7089a098-ed7a-4f9e-bd88-a916da2fd700</p>\n<p>53.查看某个进程或者服务是否存在</p>\n<p>ps -aux ｜ grep xxx</p>\n<p>57.resin 配置到一个地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;host id=&quot;message.api.mardi.com&quot; root-directory=&quot;.&quot;&gt;</span><br><span class=\"line\">            &lt;host-alias&gt;message.api.mardi.com&lt;/host-alias&gt;</span><br><span class=\"line\">            &lt;host-alias&gt;message.api.iaiot.com&lt;/host-alias&gt;</span><br><span class=\"line\">            &lt;web-app id=&quot;/&quot; root-directory=&quot;webapps/mardi_api&quot; /&gt;</span><br><span class=\"line\">   &lt;/host&gt;</span><br></pre></td></tr></table></figure></p>\n<p>58.查看centos内核版本</p>\n<p>uname -r</p>\n<p>59.CentOS 安装 jdk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载java的jar包解压后在 /etc/profile 文尾添加如下配置</span><br><span class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_101</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br><span class=\"line\"># 添加上述配置后执行 source /etc/profile 使配置即时生效</span><br></pre></td></tr></table></figure></p>\n<p>二、Windows相关：<br>1.Windows下查找某目录下包含某字符串的文件方法<br>findstr -s -i “listener” <em>.</em><br>-s:遍历当前目录及子目录<br>-i:忽略大小写<br>其他参数说明请参考：<a href=\"http://blog.csdn.net/zhiqiangzhan/article/details/5828533\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhiqiangzhan/article/details/5828533</a></p>\n<p>3.Windows自动关机命令<br>3600秒后自动关机：shutdown -f -s -t 3600<br>撤销自动关机：shutdown -a</p>\n<p>5.查看WinSCP记住的密码：</p>\n<p>用winscppwd.exe，百度winscppwd</p>\n<p>命令：winscppwd WINSCP.INI</p>\n<p>三、Windows软件推荐：<br>1.本地全局文件搜索：Everything<br>2.Java class反编译工具：jd-gui<br>3.hosts管理工具：SwitchHosts</p>\n<p>四、Note<br>1.代码中用空格代替tab<br>2.word2016不显示换行符：文件-选项-显示-段落标记-取消勾选<br>3.正则表达式(“[]”和“{}”可以实现大部分常规的表达式)<br>[]：表示其中的任何一个字符 [a-z],[0-9]<br>{}：表示出现的次数 a{3}<br>{m}：正好出现m次<br>{m,n}：最少m次，最多n次<br>{m,}：最少m次，没有上限<br>例：手机号码：1[34578][0-9]{9}</p>\n<p>4.使用MyBatis Generator自动创建代码 命令：</p>\n<p>java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/zhshulin/article/details/23912615\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhshulin/article/details/23912615</a></p>\n"},{"post_url":"linux-ping","title":"嵌入式Linux系统连不上外网，也ping不通外网解决办法","date":"2016-01-04T04:40:43.000Z","_content":"①、不仅要设置系统的ip地址和子网掩码（命令如下）：\n\nifconfig eth0 ***.***.***.*** netmask 255.255.255.0 up\n\n（这里***.***.***.***是你要输入的ip地址）\n\n②、还要设置系统的默认网关（命令如下）：\n\nroute add default gw ***.***.***.1\n","source":"_posts/linux-ping.md","raw":"---\npost_url: linux-ping\ntitle: 嵌入式Linux系统连不上外网，也ping不通外网解决办法\ndate: 2016-01-04 12:40:43\ntags: linux\n---\n①、不仅要设置系统的ip地址和子网掩码（命令如下）：\n\nifconfig eth0 ***.***.***.*** netmask 255.255.255.0 up\n\n（这里***.***.***.***是你要输入的ip地址）\n\n②、还要设置系统的默认网关（命令如下）：\n\nroute add default gw ***.***.***.1\n","slug":"linux-ping","published":1,"updated":"2019-03-25T13:58:50.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpp003505ab01w0fwrb","content":"<p>①、不仅要设置系统的ip地址和子网掩码（命令如下）：</p>\n<p>ifconfig eth0 <strong><em>.</em></strong>.<strong><em>.</em></strong> netmask 255.255.255.0 up</p>\n<p>（这里<strong><em>.</em></strong>.<strong><em>.</em></strong>是你要输入的ip地址）</p>\n<p>②、还要设置系统的默认网关（命令如下）：</p>\n<p>route add default gw <strong><em>.</em></strong>.***.1</p>\n","site":{"data":{}},"excerpt":"","more":"<p>①、不仅要设置系统的ip地址和子网掩码（命令如下）：</p>\n<p>ifconfig eth0 <strong><em>.</em></strong>.<strong><em>.</em></strong> netmask 255.255.255.0 up</p>\n<p>（这里<strong><em>.</em></strong>.<strong><em>.</em></strong>是你要输入的ip地址）</p>\n<p>②、还要设置系统的默认网关（命令如下）：</p>\n<p>route add default gw <strong><em>.</em></strong>.***.1</p>\n"},{"title":"CentOS 和 Windows 服务相关操作，配置开机自动启动等，Windows 脚本获取路径语法","post_url":"linux-widows-service","date":"2018-11-20T12:49:59.000Z","_content":"## CentOS  服务（https://www.jianshu.com/p/7bd61fc1de4b）：\nchkconfig  --add  xxx     //  把服务添加到  chkconfig  列表\nchkconfig  --del  xxx      //  把服务从  chkconfig  列表中删除\nchkconfig  xxx  on         //  开机启动\nchkconfig  xxx  off         //  关闭开机启动\nchkconfig  --list             //  查看所有  chklist  中服务\nchkconfig  --list  xxx     //  查看指定服务\n\n配置开机启动\nchkconfig  --add  xxx\nchkconfig  xxx  on\n\n取消开机启动\nchkconfig  xxx  off\n\n\nCentOS7  下需要配置权限开机启动才能生效：\nchmod  +x  /etc/rc.d/rc.local\nchmod  +x  /etc/rc.d/init.d/xxx\n\n\n启停服务\nservice  mysqld  start/stop\n/etc/init.d/mysqld  start/stop\n\n查看进程\nps  -ef    //  显示所有命令，连带命令行\nps  -aux  //  显示所有包含其他使用者的进程\nps  -aux  |  grep  xxx\n\n \n\n## Windows  服务（https://blog.csdn.net/mubingyun/article/details/4567100）\ncmd  或  bat  下可有两种方法打开，net和sc\nnet  用于打开没有被禁用的服务：  \n启动  net  start  服务名\n停止  net  stop  服务名\n\n用  sc  可打开被禁用的服务（注意空格）：\nsc  config  服务名  start=  demand     //手动\nsc  condig  服务名  start=  auto          //自动\nsc  config  服务名  start=  disabled    //禁用\nsc  start  服务名\nsc  stop  服务名(计算机管理→服务→服务item→右键→属性→服务名称)\n\n \n\n## Windows 开机启动\n\n将需要开机启动的软件快捷方式复制到启动目录；\n\n启动目录：cmd→shell:startup\n\n\n## Windows  脚本获取路径（https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\n@echo  off\necho  当前盘符：%~d0\necho  当前盘符和路径：%~dp0\necho  当前批处理全路径：%~f0\necho  当前盘符和路径的短文件名格式：%~sdp0\necho  当前CMD默认目录：%cd%\necho  目录中有空格也可以加入\"\"避免找不到路径\necho  当前盘符：\"%~d0\"\necho  当前盘符和路径：\"%~dp0\"\necho  当前批处理全路径：\"%~f0\"\necho  当前盘符和路径的短文件名格式：\"%~sdp0\"\necho  当前CMD默认目录：\"%cd%\"\npause\n\n## 参考\n```bash\n#!/bin/sh\n#\n# start/restart/stop kp-server\n#\n# chkconfig: 2345 85 15\n# description: start kp-server on boot time\n \nstart(){\n        ssserver -c /etc/shadowsocks.json -d start\n}\nstop(){\n        ssserver -c /etc/shadowsocks.json -d stop\n}\nrestart(){\n        ssserver -c /etc/shadowsocks.json -d restart\n}\n \ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        restart\n        ;;\n*)\n        echo \"Usage: $0 {start|restart|stop}\"\n        exit 1\n        ;;\nesac\n```","source":"_posts/linux-widows-service.md","raw":"---\ntitle: CentOS 和 Windows 服务相关操作，配置开机自动启动等，Windows 脚本获取路径语法\npost_url: linux-widows-service\ndate: 2018-11-20 20:49:59\ntags: [linux, windows]\n---\n## CentOS  服务（https://www.jianshu.com/p/7bd61fc1de4b）：\nchkconfig  --add  xxx     //  把服务添加到  chkconfig  列表\nchkconfig  --del  xxx      //  把服务从  chkconfig  列表中删除\nchkconfig  xxx  on         //  开机启动\nchkconfig  xxx  off         //  关闭开机启动\nchkconfig  --list             //  查看所有  chklist  中服务\nchkconfig  --list  xxx     //  查看指定服务\n\n配置开机启动\nchkconfig  --add  xxx\nchkconfig  xxx  on\n\n取消开机启动\nchkconfig  xxx  off\n\n\nCentOS7  下需要配置权限开机启动才能生效：\nchmod  +x  /etc/rc.d/rc.local\nchmod  +x  /etc/rc.d/init.d/xxx\n\n\n启停服务\nservice  mysqld  start/stop\n/etc/init.d/mysqld  start/stop\n\n查看进程\nps  -ef    //  显示所有命令，连带命令行\nps  -aux  //  显示所有包含其他使用者的进程\nps  -aux  |  grep  xxx\n\n \n\n## Windows  服务（https://blog.csdn.net/mubingyun/article/details/4567100）\ncmd  或  bat  下可有两种方法打开，net和sc\nnet  用于打开没有被禁用的服务：  \n启动  net  start  服务名\n停止  net  stop  服务名\n\n用  sc  可打开被禁用的服务（注意空格）：\nsc  config  服务名  start=  demand     //手动\nsc  condig  服务名  start=  auto          //自动\nsc  config  服务名  start=  disabled    //禁用\nsc  start  服务名\nsc  stop  服务名(计算机管理→服务→服务item→右键→属性→服务名称)\n\n \n\n## Windows 开机启动\n\n将需要开机启动的软件快捷方式复制到启动目录；\n\n启动目录：cmd→shell:startup\n\n\n## Windows  脚本获取路径（https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\n@echo  off\necho  当前盘符：%~d0\necho  当前盘符和路径：%~dp0\necho  当前批处理全路径：%~f0\necho  当前盘符和路径的短文件名格式：%~sdp0\necho  当前CMD默认目录：%cd%\necho  目录中有空格也可以加入\"\"避免找不到路径\necho  当前盘符：\"%~d0\"\necho  当前盘符和路径：\"%~dp0\"\necho  当前批处理全路径：\"%~f0\"\necho  当前盘符和路径的短文件名格式：\"%~sdp0\"\necho  当前CMD默认目录：\"%cd%\"\npause\n\n## 参考\n```bash\n#!/bin/sh\n#\n# start/restart/stop kp-server\n#\n# chkconfig: 2345 85 15\n# description: start kp-server on boot time\n \nstart(){\n        ssserver -c /etc/shadowsocks.json -d start\n}\nstop(){\n        ssserver -c /etc/shadowsocks.json -d stop\n}\nrestart(){\n        ssserver -c /etc/shadowsocks.json -d restart\n}\n \ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        restart\n        ;;\n*)\n        echo \"Usage: $0 {start|restart|stop}\"\n        exit 1\n        ;;\nesac\n```","slug":"linux-widows-service","published":1,"updated":"2019-03-25T13:59:02.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpq003805abv7yhv0r2","content":"<h2 id=\"CentOS-服务（https-www-jianshu-com-p-7bd61fc1de4b）：\"><a href=\"#CentOS-服务（https-www-jianshu-com-p-7bd61fc1de4b）：\" class=\"headerlink\" title=\"CentOS  服务（https://www.jianshu.com/p/7bd61fc1de4b）：\"></a>CentOS  服务（<a href=\"https://www.jianshu.com/p/7bd61fc1de4b）：\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7bd61fc1de4b）：</a></h2><p>chkconfig  –add  xxx     //  把服务添加到  chkconfig  列表<br>chkconfig  –del  xxx      //  把服务从  chkconfig  列表中删除<br>chkconfig  xxx  on         //  开机启动<br>chkconfig  xxx  off         //  关闭开机启动<br>chkconfig  –list             //  查看所有  chklist  中服务<br>chkconfig  –list  xxx     //  查看指定服务</p>\n<p>配置开机启动<br>chkconfig  –add  xxx<br>chkconfig  xxx  on</p>\n<p>取消开机启动<br>chkconfig  xxx  off</p>\n<p>CentOS7  下需要配置权限开机启动才能生效：<br>chmod  +x  /etc/rc.d/rc.local<br>chmod  +x  /etc/rc.d/init.d/xxx</p>\n<p>启停服务<br>service  mysqld  start/stop<br>/etc/init.d/mysqld  start/stop</p>\n<p>查看进程<br>ps  -ef    //  显示所有命令，连带命令行<br>ps  -aux  //  显示所有包含其他使用者的进程<br>ps  -aux  |  grep  xxx</p>\n<h2 id=\"Windows-服务（https-blog-csdn-net-mubingyun-article-details-4567100）\"><a href=\"#Windows-服务（https-blog-csdn-net-mubingyun-article-details-4567100）\" class=\"headerlink\" title=\"Windows  服务（https://blog.csdn.net/mubingyun/article/details/4567100）\"></a>Windows  服务（<a href=\"https://blog.csdn.net/mubingyun/article/details/4567100）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mubingyun/article/details/4567100）</a></h2><p>cmd  或  bat  下可有两种方法打开，net和sc<br>net  用于打开没有被禁用的服务：<br>启动  net  start  服务名<br>停止  net  stop  服务名</p>\n<p>用  sc  可打开被禁用的服务（注意空格）：<br>sc  config  服务名  start=  demand     //手动<br>sc  condig  服务名  start=  auto          //自动<br>sc  config  服务名  start=  disabled    //禁用<br>sc  start  服务名<br>sc  stop  服务名(计算机管理→服务→服务item→右键→属性→服务名称)</p>\n<h2 id=\"Windows-开机启动\"><a href=\"#Windows-开机启动\" class=\"headerlink\" title=\"Windows 开机启动\"></a>Windows 开机启动</h2><p>将需要开机启动的软件快捷方式复制到启动目录；</p>\n<p>启动目录：cmd→shell:startup</p>\n<h2 id=\"Windows-脚本获取路径（https-blog-csdn-net-Sagittarius-Warrior-article-details-51516195）\"><a href=\"#Windows-脚本获取路径（https-blog-csdn-net-Sagittarius-Warrior-article-details-51516195）\" class=\"headerlink\" title=\"Windows  脚本获取路径（https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\"></a>Windows  脚本获取路径（<a href=\"https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）</a></h2><p>@echo  off<br>echo  当前盘符：%~d0<br>echo  当前盘符和路径：%~dp0<br>echo  当前批处理全路径：%~f0<br>echo  当前盘符和路径的短文件名格式：%~sdp0<br>echo  当前CMD默认目录：%cd%<br>echo  目录中有空格也可以加入””避免找不到路径<br>echo  当前盘符：”%~d0”<br>echo  当前盘符和路径：”%~dp0”<br>echo  当前批处理全路径：”%~f0”<br>echo  当前盘符和路径的短文件名格式：”%~sdp0”<br>echo  当前CMD默认目录：”%cd%”<br>pause</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># start/restart/stop kp-server</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description: start kp-server on boot time</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d restart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        restart</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> &#123;start|restart|stop&#125;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CentOS-服务（https-www-jianshu-com-p-7bd61fc1de4b）：\"><a href=\"#CentOS-服务（https-www-jianshu-com-p-7bd61fc1de4b）：\" class=\"headerlink\" title=\"CentOS  服务（https://www.jianshu.com/p/7bd61fc1de4b）：\"></a>CentOS  服务（<a href=\"https://www.jianshu.com/p/7bd61fc1de4b）：\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7bd61fc1de4b）：</a></h2><p>chkconfig  –add  xxx     //  把服务添加到  chkconfig  列表<br>chkconfig  –del  xxx      //  把服务从  chkconfig  列表中删除<br>chkconfig  xxx  on         //  开机启动<br>chkconfig  xxx  off         //  关闭开机启动<br>chkconfig  –list             //  查看所有  chklist  中服务<br>chkconfig  –list  xxx     //  查看指定服务</p>\n<p>配置开机启动<br>chkconfig  –add  xxx<br>chkconfig  xxx  on</p>\n<p>取消开机启动<br>chkconfig  xxx  off</p>\n<p>CentOS7  下需要配置权限开机启动才能生效：<br>chmod  +x  /etc/rc.d/rc.local<br>chmod  +x  /etc/rc.d/init.d/xxx</p>\n<p>启停服务<br>service  mysqld  start/stop<br>/etc/init.d/mysqld  start/stop</p>\n<p>查看进程<br>ps  -ef    //  显示所有命令，连带命令行<br>ps  -aux  //  显示所有包含其他使用者的进程<br>ps  -aux  |  grep  xxx</p>\n<h2 id=\"Windows-服务（https-blog-csdn-net-mubingyun-article-details-4567100）\"><a href=\"#Windows-服务（https-blog-csdn-net-mubingyun-article-details-4567100）\" class=\"headerlink\" title=\"Windows  服务（https://blog.csdn.net/mubingyun/article/details/4567100）\"></a>Windows  服务（<a href=\"https://blog.csdn.net/mubingyun/article/details/4567100）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mubingyun/article/details/4567100）</a></h2><p>cmd  或  bat  下可有两种方法打开，net和sc<br>net  用于打开没有被禁用的服务：<br>启动  net  start  服务名<br>停止  net  stop  服务名</p>\n<p>用  sc  可打开被禁用的服务（注意空格）：<br>sc  config  服务名  start=  demand     //手动<br>sc  condig  服务名  start=  auto          //自动<br>sc  config  服务名  start=  disabled    //禁用<br>sc  start  服务名<br>sc  stop  服务名(计算机管理→服务→服务item→右键→属性→服务名称)</p>\n<h2 id=\"Windows-开机启动\"><a href=\"#Windows-开机启动\" class=\"headerlink\" title=\"Windows 开机启动\"></a>Windows 开机启动</h2><p>将需要开机启动的软件快捷方式复制到启动目录；</p>\n<p>启动目录：cmd→shell:startup</p>\n<h2 id=\"Windows-脚本获取路径（https-blog-csdn-net-Sagittarius-Warrior-article-details-51516195）\"><a href=\"#Windows-脚本获取路径（https-blog-csdn-net-Sagittarius-Warrior-article-details-51516195）\" class=\"headerlink\" title=\"Windows  脚本获取路径（https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\"></a>Windows  脚本获取路径（<a href=\"https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Sagittarius_Warrior/article/details/51516195）</a></h2><p>@echo  off<br>echo  当前盘符：%~d0<br>echo  当前盘符和路径：%~dp0<br>echo  当前批处理全路径：%~f0<br>echo  当前盘符和路径的短文件名格式：%~sdp0<br>echo  当前CMD默认目录：%cd%<br>echo  目录中有空格也可以加入””避免找不到路径<br>echo  当前盘符：”%~d0”<br>echo  当前盘符和路径：”%~dp0”<br>echo  当前批处理全路径：”%~f0”<br>echo  当前盘符和路径的短文件名格式：”%~sdp0”<br>echo  当前CMD默认目录：”%cd%”<br>pause</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># start/restart/stop kp-server</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description: start kp-server on boot time</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>()&#123;</span><br><span class=\"line\">        ssserver -c /etc/shadowsocks.json -d restart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        restart</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> &#123;start|restart|stop&#125;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>"},{"post_url":"logstash-conf","title":"Logstash logstash.conf 配置示例","date":"2018-11-08T03:30:55.000Z","_content":"Sample Logstash configuration for creating a simple\nFile -> Logstash -> Elasticsearch pipeline.\n\n```conf\ninput {\n  file {\n    path => \"/data/nginx/logs/access.log\"\n  }\n}\n \nfilter {\n  mutate {\n    add_field => [ \"[fields][path]\", \"%{[path]}\"]\n\tadd_field => [ \"message]\", \"%{[message]}\"]\n  }\n}\n \noutput {\n  elasticsearch {\n    hosts => [\"http://192.168.153.7:9200\"]\n\tindex => \"test-logstash\"\n  }\n}\n```\n\ninput 配置参考：https://www.elastic.co/guide/en/logstash/current/input-plugins.html\noutput 配置参考：https://www.elastic.co/guide/en/logstash/current/output-plugins.html\nfilter 配置参考：https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html\nLogstash Reference：https://www.elastic.co/guide/en/logstash/6.4/index.html\n","source":"_posts/logstash-conf.md","raw":"---\npost_url: logstash-conf\ntitle: Logstash logstash.conf 配置示例\ndate: 2018-11-08 11:30:55\ntags: logstash\n---\nSample Logstash configuration for creating a simple\nFile -> Logstash -> Elasticsearch pipeline.\n\n```conf\ninput {\n  file {\n    path => \"/data/nginx/logs/access.log\"\n  }\n}\n \nfilter {\n  mutate {\n    add_field => [ \"[fields][path]\", \"%{[path]}\"]\n\tadd_field => [ \"message]\", \"%{[message]}\"]\n  }\n}\n \noutput {\n  elasticsearch {\n    hosts => [\"http://192.168.153.7:9200\"]\n\tindex => \"test-logstash\"\n  }\n}\n```\n\ninput 配置参考：https://www.elastic.co/guide/en/logstash/current/input-plugins.html\noutput 配置参考：https://www.elastic.co/guide/en/logstash/current/output-plugins.html\nfilter 配置参考：https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html\nLogstash Reference：https://www.elastic.co/guide/en/logstash/6.4/index.html\n","slug":"logstash-conf","published":1,"updated":"2019-03-24T10:36:28.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpq003a05abewckk57r","content":"<p>Sample Logstash configuration for creating a simple<br>File -&gt; Logstash -&gt; Elasticsearch pipeline.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    path =&gt; &quot;/data/nginx/logs/access.log&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  mutate &#123;</span><br><span class=\"line\">    add_field =&gt; [ &quot;[fields][path]&quot;, &quot;%&#123;[path]&#125;&quot;]</span><br><span class=\"line\">\tadd_field =&gt; [ &quot;message]&quot;, &quot;%&#123;[message]&#125;&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;http://192.168.153.7:9200&quot;]</span><br><span class=\"line\">\tindex =&gt; &quot;test-logstash&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>input 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/current/input-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/current/input-plugins.html</a><br>output 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/current/output-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/current/output-plugins.html</a><br>filter 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html</a><br>Logstash Reference：<a href=\"https://www.elastic.co/guide/en/logstash/6.4/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/6.4/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sample Logstash configuration for creating a simple<br>File -&gt; Logstash -&gt; Elasticsearch pipeline.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    path =&gt; &quot;/data/nginx/logs/access.log&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  mutate &#123;</span><br><span class=\"line\">    add_field =&gt; [ &quot;[fields][path]&quot;, &quot;%&#123;[path]&#125;&quot;]</span><br><span class=\"line\">\tadd_field =&gt; [ &quot;message]&quot;, &quot;%&#123;[message]&#125;&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;http://192.168.153.7:9200&quot;]</span><br><span class=\"line\">\tindex =&gt; &quot;test-logstash&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>input 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/current/input-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/current/input-plugins.html</a><br>output 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/current/output-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/current/output-plugins.html</a><br>filter 配置参考：<a href=\"https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/6.4/filter-plugins.html</a><br>Logstash Reference：<a href=\"https://www.elastic.co/guide/en/logstash/6.4/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/logstash/6.4/index.html</a></p>\n"},{"post_url":"logstash-syslog","title":"logstash 接收 syslog 消息调试","date":"2019-02-22T08:03:50.000Z","_content":"\nlinux logger、rsyslog：\nlogger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm\n查看生成的日志：tail -f /var/log/messages\nrsyslog 配置：/etc/rsyslog.conf\n配置 rsyslog 输出到指定地址（如 logstash）：\n![](/images/20190222155850774.png)\n重启 rsyslog 服务：service rsyslog restart\n  \nlogstash 接收 rsyslog 消息：\n```yml\ninput {\n  syslog {\n    port => \"514\"\n    add_field => [ \"type\", \"syslog\"]\n  }\n}\n \nfilter {\n  if \"syslog\" in [type]\n    {\n       grok {}\n       mutate {\n        add_field => [ \"a\", \"%{[host]}\"]\n        add_field => [ \"b\", \"0\"]\n       }\n    }\n  geoip {}\n}\n \noutput {\n  kafka {\n    bootstrap_servers => \"192.168.0.100:9092\"\n    topic_id => \"tttttest\"\n    #compression_type => \"snappy\"\n    codec => \"json\"\n  } \n \n # stdout { codec => rubydebug }  # 调试输出\n}\n```","source":"_posts/logstash-syslog.md","raw":"---\npost_url: logstash-syslog\ntitle: logstash 接收 syslog 消息调试\ndate: 2019-02-22 16:03:50\ntags: [logstash, syslog]\n---\n\nlinux logger、rsyslog：\nlogger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm\n查看生成的日志：tail -f /var/log/messages\nrsyslog 配置：/etc/rsyslog.conf\n配置 rsyslog 输出到指定地址（如 logstash）：\n![](/images/20190222155850774.png)\n重启 rsyslog 服务：service rsyslog restart\n  \nlogstash 接收 rsyslog 消息：\n```yml\ninput {\n  syslog {\n    port => \"514\"\n    add_field => [ \"type\", \"syslog\"]\n  }\n}\n \nfilter {\n  if \"syslog\" in [type]\n    {\n       grok {}\n       mutate {\n        add_field => [ \"a\", \"%{[host]}\"]\n        add_field => [ \"b\", \"0\"]\n       }\n    }\n  geoip {}\n}\n \noutput {\n  kafka {\n    bootstrap_servers => \"192.168.0.100:9092\"\n    topic_id => \"tttttest\"\n    #compression_type => \"snappy\"\n    codec => \"json\"\n  } \n \n # stdout { codec => rubydebug }  # 调试输出\n}\n```","slug":"logstash-syslog","published":1,"updated":"2019-03-25T14:00:00.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpr003c05abiwdne7if","content":"<p>linux logger、rsyslog：<br>logger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm<br>查看生成的日志：tail -f /var/log/messages<br>rsyslog 配置：/etc/rsyslog.conf<br>配置 rsyslog 输出到指定地址（如 logstash）：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190222155850774.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>重启 rsyslog 服务：service rsyslog restart</p>\n<p>logstash 接收 rsyslog 消息：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">syslog</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">port</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"514\"</span></span><br><span class=\"line\">    <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"type\"</span><span class=\"string\">,</span> <span class=\"string\">\"syslog\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">filter</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">if</span> <span class=\"string\">\"syslog\"</span> <span class=\"string\">in</span> <span class=\"string\">[type]</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">       <span class=\"string\">grok</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">       <span class=\"string\">mutate</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"a\"</span><span class=\"string\">,</span> <span class=\"string\">\"<span class=\"template-variable\">%&#123;[host]&#125;</span>\"</span><span class=\"string\">]</span></span><br><span class=\"line\">        <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"b\"</span><span class=\"string\">,</span> <span class=\"string\">\"0\"</span><span class=\"string\">]</span></span><br><span class=\"line\">       <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\">  <span class=\"string\">geoip</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">kafka</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">bootstrap_servers</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"192.168.0.100:9092\"</span></span><br><span class=\"line\">    <span class=\"string\">topic_id</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"tttttest\"</span></span><br><span class=\"line\">    <span class=\"comment\">#compression_type =&gt; \"snappy\"</span></span><br><span class=\"line\">    <span class=\"string\">codec</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"json\"</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># stdout &#123; codec =&gt; rubydebug &#125;  # 调试输出</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>linux logger、rsyslog：<br>logger 生成 message 日志：logger -t aaaaaaaaa mmmmmmmmmmm<br>查看生成的日志：tail -f /var/log/messages<br>rsyslog 配置：/etc/rsyslog.conf<br>配置 rsyslog 输出到指定地址（如 logstash）：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190222155850774.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>重启 rsyslog 服务：service rsyslog restart</p>\n<p>logstash 接收 rsyslog 消息：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">syslog</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">port</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"514\"</span></span><br><span class=\"line\">    <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"type\"</span><span class=\"string\">,</span> <span class=\"string\">\"syslog\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">filter</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">if</span> <span class=\"string\">\"syslog\"</span> <span class=\"string\">in</span> <span class=\"string\">[type]</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">       <span class=\"string\">grok</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">       <span class=\"string\">mutate</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"a\"</span><span class=\"string\">,</span> <span class=\"string\">\"<span class=\"template-variable\">%&#123;[host]&#125;</span>\"</span><span class=\"string\">]</span></span><br><span class=\"line\">        <span class=\"string\">add_field</span> <span class=\"string\">=&gt;</span> <span class=\"string\">[</span> <span class=\"string\">\"b\"</span><span class=\"string\">,</span> <span class=\"string\">\"0\"</span><span class=\"string\">]</span></span><br><span class=\"line\">       <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\">  <span class=\"string\">geoip</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">kafka</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">bootstrap_servers</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"192.168.0.100:9092\"</span></span><br><span class=\"line\">    <span class=\"string\">topic_id</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"tttttest\"</span></span><br><span class=\"line\">    <span class=\"comment\">#compression_type =&gt; \"snappy\"</span></span><br><span class=\"line\">    <span class=\"string\">codec</span> <span class=\"string\">=&gt;</span> <span class=\"string\">\"json\"</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># stdout &#123; codec =&gt; rubydebug &#125;  # 调试输出</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"lua-notes","title":"Nginx+lua-nginx-module，openresty，lua基础语法 笔记","date":"2018-01-12T09:31:42.000Z","_content":"1. Lua 用[[...]]括起来的字符不会被转义，在写正则表达式的时候很实用；\n例：[[^\\d+.\\d+$]]\n\n2. lua 中\"~=\"表示不等于\n\n3. 可以用 type(aa)查看变量 aa 的类型\n\n4. lua 中 0 是真(true)\n\n5. 字符串连接符：..\n\n7. lua 中的逻辑运算符比较特殊\n例：local y = a and b or c 相当于 a?b:c\n参考：https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html\n\n8. local m,n = \"aaa\" 表示 m 被赋值为字符串，n 没有被赋值，是 nil\n\n9. lua function 可以返回多个值\n参考：https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html\n\n10. lua 中当 table 作为一个函数的参数时，就和 java 中的集合和数组一样是传引用的方式，而不是传值的方式\n注：java 中都是值传递，只不过集合和数组传的是对象的地址值\n\n11. 请求头参数修改方法：ngx.req.set_header(header_name, header_value)；\n请求体是 table 类型的，所以要修改请求体，可以先 ngx.req.get_body_data，修改完再 ngx.req.set_body_data\ntable 修改方法：table.key = newvalue 或 table[key] = newvalue\n\n12. Nginx Http 处理流程有：init/rewrite/access/content/filter/log 等\n可参考：http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)\n\n13. 在 lua 里判断空字符串只能用检查长度的方式\n\n14. 正则匹配，ngx.re.match()返回的结果是一个表，里面存储了匹配的结果，如果匹配成功，\nm[0]保存的是整个(匹配成功的)字符串，之后的 m[1],m[2]等保存的是匹配的子表达式\nlocal m = ngx.re.match(\"abcd-123\", \"(.*)123$\", \"jo\")\n-- 参数 \"j\" 启用 JIT 编译，参数 \"o\" 是开启缓存必须的\n\n15. 单行注释：--\n多行注释：--[[...]]\n\n16. print(#'openresty') --计算字符串长度，输出 9\n\n17. 这些文件 I/O 操作，在 OpenResty 的上下文中对事件循环是会产生阻塞效应。OpenResty 比较擅长的是高并发网络处理，在这个环境中，任何文件的操作，都将阻塞其他并行执行的请求。实际中的应用，在 OpenResty 项目中应尽可能让网络处理部分、文件 I/0 操作部分相互独立，不要揉和在一起。\nhttps://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html\n\n18. 官方建议使用 openresty，不建议使用原生 nginx 自己集成 lua-nginx-module\n原文：https://github.com/openresty/lua-nginx-module#installation\n\n19. 任何重写规则的第一部分都是一个正则表达式\n可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。\n例：^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)$\n$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。\n参考：http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/\n\n20. nginx lua指令及其执行顺序\n![](/images/20180112173241641.png)\n其中上图中提到的各个指令的作用：\ninit_by_lua\\*:初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)\ninit_worker_by_lua\\*:每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，\n比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；\nssl_certificate_by_lua\\*:对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；\nset_by_lua\\*:设置 nginx 变量\nrewrite_by_lua\\*:重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；\naccess_by_lua\\*:处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）\ncontent_by_lua\\*:执行业务逻辑并产生响应，类似于 jsp 中的 servlet\nbalancer_by_lua\\*:负载均衡\nheader_filter_by_lua\\*:处理响应头\nbody_filter_by_lua\\*:处理响应体\nlog_by_lua\\*:记录访问日志\n参考：https://github.com/openresty/lua-nginx-module\nhttp://tengine.taobao.org/book/chapter_12.html#id8\nhttp://jinnianshilongnian.iteye.com/blog/2186448\n21. http请求报文\n![](/images/20180112173844671.png)\n22. HTTP响应报文\n![](/images/20180112173621526.png)\n23. 附openresty的Github地址：https://github.com/openresty","source":"_posts/lua-notes.md","raw":"---\npost_url: lua-notes\ntitle: Nginx+lua-nginx-module，openresty，lua基础语法 笔记\ndate: 2018-01-12 17:31:42\ntags: lua\n---\n1. Lua 用[[...]]括起来的字符不会被转义，在写正则表达式的时候很实用；\n例：[[^\\d+.\\d+$]]\n\n2. lua 中\"~=\"表示不等于\n\n3. 可以用 type(aa)查看变量 aa 的类型\n\n4. lua 中 0 是真(true)\n\n5. 字符串连接符：..\n\n7. lua 中的逻辑运算符比较特殊\n例：local y = a and b or c 相当于 a?b:c\n参考：https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html\n\n8. local m,n = \"aaa\" 表示 m 被赋值为字符串，n 没有被赋值，是 nil\n\n9. lua function 可以返回多个值\n参考：https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html\n\n10. lua 中当 table 作为一个函数的参数时，就和 java 中的集合和数组一样是传引用的方式，而不是传值的方式\n注：java 中都是值传递，只不过集合和数组传的是对象的地址值\n\n11. 请求头参数修改方法：ngx.req.set_header(header_name, header_value)；\n请求体是 table 类型的，所以要修改请求体，可以先 ngx.req.get_body_data，修改完再 ngx.req.set_body_data\ntable 修改方法：table.key = newvalue 或 table[key] = newvalue\n\n12. Nginx Http 处理流程有：init/rewrite/access/content/filter/log 等\n可参考：http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)\n\n13. 在 lua 里判断空字符串只能用检查长度的方式\n\n14. 正则匹配，ngx.re.match()返回的结果是一个表，里面存储了匹配的结果，如果匹配成功，\nm[0]保存的是整个(匹配成功的)字符串，之后的 m[1],m[2]等保存的是匹配的子表达式\nlocal m = ngx.re.match(\"abcd-123\", \"(.*)123$\", \"jo\")\n-- 参数 \"j\" 启用 JIT 编译，参数 \"o\" 是开启缓存必须的\n\n15. 单行注释：--\n多行注释：--[[...]]\n\n16. print(#'openresty') --计算字符串长度，输出 9\n\n17. 这些文件 I/O 操作，在 OpenResty 的上下文中对事件循环是会产生阻塞效应。OpenResty 比较擅长的是高并发网络处理，在这个环境中，任何文件的操作，都将阻塞其他并行执行的请求。实际中的应用，在 OpenResty 项目中应尽可能让网络处理部分、文件 I/0 操作部分相互独立，不要揉和在一起。\nhttps://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html\n\n18. 官方建议使用 openresty，不建议使用原生 nginx 自己集成 lua-nginx-module\n原文：https://github.com/openresty/lua-nginx-module#installation\n\n19. 任何重写规则的第一部分都是一个正则表达式\n可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。\n例：^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)$\n$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。\n参考：http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/\n\n20. nginx lua指令及其执行顺序\n![](/images/20180112173241641.png)\n其中上图中提到的各个指令的作用：\ninit_by_lua\\*:初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)\ninit_worker_by_lua\\*:每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，\n比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；\nssl_certificate_by_lua\\*:对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；\nset_by_lua\\*:设置 nginx 变量\nrewrite_by_lua\\*:重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；\naccess_by_lua\\*:处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）\ncontent_by_lua\\*:执行业务逻辑并产生响应，类似于 jsp 中的 servlet\nbalancer_by_lua\\*:负载均衡\nheader_filter_by_lua\\*:处理响应头\nbody_filter_by_lua\\*:处理响应体\nlog_by_lua\\*:记录访问日志\n参考：https://github.com/openresty/lua-nginx-module\nhttp://tengine.taobao.org/book/chapter_12.html#id8\nhttp://jinnianshilongnian.iteye.com/blog/2186448\n21. http请求报文\n![](/images/20180112173844671.png)\n22. HTTP响应报文\n![](/images/20180112173621526.png)\n23. 附openresty的Github地址：https://github.com/openresty","slug":"lua-notes","published":1,"updated":"2019-03-24T13:00:49.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpr003d05abe74fqwjx","content":"<ol>\n<li><p>Lua 用[[…]]括起来的字符不会被转义，在写正则表达式的时候很实用；<br>例：[[^\\d+.\\d+$]]</p>\n</li>\n<li><p>lua 中”~=”表示不等于</p>\n</li>\n<li><p>可以用 type(aa)查看变量 aa 的类型</p>\n</li>\n<li><p>lua 中 0 是真(true)</p>\n</li>\n<li><p>字符串连接符：..</p>\n</li>\n<li><p>lua 中的逻辑运算符比较特殊<br>例：local y = a and b or c 相当于 a?b:c<br>参考：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html</a></p>\n</li>\n<li><p>local m,n = “aaa” 表示 m 被赋值为字符串，n 没有被赋值，是 nil</p>\n</li>\n<li><p>lua function 可以返回多个值<br>参考：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html</a></p>\n</li>\n<li><p>lua 中当 table 作为一个函数的参数时，就和 java 中的集合和数组一样是传引用的方式，而不是传值的方式<br>注：java 中都是值传递，只不过集合和数组传的是对象的地址值</p>\n</li>\n<li><p>请求头参数修改方法：ngx.req.set_header(header_name, header_value)；<br>请求体是 table 类型的，所以要修改请求体，可以先 ngx.req.get_body_data，修改完再 ngx.req.set_body_data<br>table 修改方法：table.key = newvalue 或 table[key] = newvalue</p>\n</li>\n<li><p>Nginx Http 处理流程有：init/rewrite/access/content/filter/log 等<br>可参考：<a href=\"http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)</a></p>\n</li>\n<li><p>在 lua 里判断空字符串只能用检查长度的方式</p>\n</li>\n<li><p>正则匹配，ngx.re.match()返回的结果是一个表，里面存储了匹配的结果，如果匹配成功，<br>m[0]保存的是整个(匹配成功的)字符串，之后的 m[1],m[2]等保存的是匹配的子表达式<br>local m = ngx.re.match(“abcd-123”, “(.*)123$”, “jo”)<br>– 参数 “j” 启用 JIT 编译，参数 “o” 是开启缓存必须的</p>\n</li>\n<li><p>单行注释：–<br>多行注释：–[[…]]</p>\n</li>\n<li><p>print(#’openresty’) –计算字符串长度，输出 9</p>\n</li>\n<li><p>这些文件 I/O 操作，在 OpenResty 的上下文中对事件循环是会产生阻塞效应。OpenResty 比较擅长的是高并发网络处理，在这个环境中，任何文件的操作，都将阻塞其他并行执行的请求。实际中的应用，在 OpenResty 项目中应尽可能让网络处理部分、文件 I/0 操作部分相互独立，不要揉和在一起。<br><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html</a></p>\n</li>\n<li><p>官方建议使用 openresty，不建议使用原生 nginx 自己集成 lua-nginx-module<br>原文：<a href=\"https://github.com/openresty/lua-nginx-module#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module#installation</a></p>\n</li>\n<li><p>任何重写规则的第一部分都是一个正则表达式<br>可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。<br>例：^/images/([a-z]{2})/([a-z0-9]{5})/(.*).(png|jpg|gif)$<br>$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。<br>参考：<a href=\"http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/\" target=\"_blank\" rel=\"noopener\">http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/</a></p>\n</li>\n<li><p>nginx lua指令及其执行顺序</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173241641.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>其中上图中提到的各个指令的作用：<br>init_by_lua*:初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)<br>init_worker_by_lua*:每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，<br>比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；<br>ssl_certificate_by_lua*:对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；<br>set_by_lua*:设置 nginx 变量<br>rewrite_by_lua*:重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；<br>access_by_lua*:处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）<br>content_by_lua*:执行业务逻辑并产生响应，类似于 jsp 中的 servlet<br>balancer_by_lua*:负载均衡<br>header_filter_by_lua*:处理响应头<br>body_filter_by_lua*:处理响应体<br>log_by_lua*:记录访问日志<br>参考：<a href=\"https://github.com/openresty/lua-nginx-module\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module</a><br><a href=\"http://tengine.taobao.org/book/chapter_12.html#id8\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html#id8</a><br><a href=\"http://jinnianshilongnian.iteye.com/blog/2186448\" target=\"_blank\" rel=\"noopener\">http://jinnianshilongnian.iteye.com/blog/2186448</a></p>\n</li>\n<li>http请求报文<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173844671.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>HTTP响应报文<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173621526.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>附openresty的Github地址：<a href=\"https://github.com/openresty\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Lua 用[[…]]括起来的字符不会被转义，在写正则表达式的时候很实用；<br>例：[[^\\d+.\\d+$]]</p>\n</li>\n<li><p>lua 中”~=”表示不等于</p>\n</li>\n<li><p>可以用 type(aa)查看变量 aa 的类型</p>\n</li>\n<li><p>lua 中 0 是真(true)</p>\n</li>\n<li><p>字符串连接符：..</p>\n</li>\n<li><p>lua 中的逻辑运算符比较特殊<br>例：local y = a and b or c 相当于 a?b:c<br>参考：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/operator.html</a></p>\n</li>\n<li><p>local m,n = “aaa” 表示 m 被赋值为字符串，n 没有被赋值，是 nil</p>\n</li>\n<li><p>lua function 可以返回多个值<br>参考：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/function_result.html</a></p>\n</li>\n<li><p>lua 中当 table 作为一个函数的参数时，就和 java 中的集合和数组一样是传引用的方式，而不是传值的方式<br>注：java 中都是值传递，只不过集合和数组传的是对象的地址值</p>\n</li>\n<li><p>请求头参数修改方法：ngx.req.set_header(header_name, header_value)；<br>请求体是 table 类型的，所以要修改请求体，可以先 ngx.req.get_body_data，修改完再 ngx.req.set_body_data<br>table 修改方法：table.key = newvalue 或 table[key] = newvalue</p>\n</li>\n<li><p>Nginx Http 处理流程有：init/rewrite/access/content/filter/log 等<br>可参考：<a href=\"http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html(多阶段处理请求)</a></p>\n</li>\n<li><p>在 lua 里判断空字符串只能用检查长度的方式</p>\n</li>\n<li><p>正则匹配，ngx.re.match()返回的结果是一个表，里面存储了匹配的结果，如果匹配成功，<br>m[0]保存的是整个(匹配成功的)字符串，之后的 m[1],m[2]等保存的是匹配的子表达式<br>local m = ngx.re.match(“abcd-123”, “(.*)123$”, “jo”)<br>– 参数 “j” 启用 JIT 编译，参数 “o” 是开启缓存必须的</p>\n</li>\n<li><p>单行注释：–<br>多行注释：–[[…]]</p>\n</li>\n<li><p>print(#’openresty’) –计算字符串长度，输出 9</p>\n</li>\n<li><p>这些文件 I/O 操作，在 OpenResty 的上下文中对事件循环是会产生阻塞效应。OpenResty 比较擅长的是高并发网络处理，在这个环境中，任何文件的操作，都将阻塞其他并行执行的请求。实际中的应用，在 OpenResty 项目中应尽可能让网络处理部分、文件 I/0 操作部分相互独立，不要揉和在一起。<br><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html\" target=\"_blank\" rel=\"noopener\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/file.html</a></p>\n</li>\n<li><p>官方建议使用 openresty，不建议使用原生 nginx 自己集成 lua-nginx-module<br>原文：<a href=\"https://github.com/openresty/lua-nginx-module#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module#installation</a></p>\n</li>\n<li><p>任何重写规则的第一部分都是一个正则表达式<br>可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。<br>例：^/images/([a-z]{2})/([a-z0-9]{5})/(.*).(png|jpg|gif)$<br>$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。<br>参考：<a href=\"http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/\" target=\"_blank\" rel=\"noopener\">http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/</a></p>\n</li>\n<li><p>nginx lua指令及其执行顺序</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173241641.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>其中上图中提到的各个指令的作用：<br>init_by_lua*:初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)<br>init_worker_by_lua*:每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，<br>比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；<br>ssl_certificate_by_lua*:对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；<br>set_by_lua*:设置 nginx 变量<br>rewrite_by_lua*:重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；<br>access_by_lua*:处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）<br>content_by_lua*:执行业务逻辑并产生响应，类似于 jsp 中的 servlet<br>balancer_by_lua*:负载均衡<br>header_filter_by_lua*:处理响应头<br>body_filter_by_lua*:处理响应体<br>log_by_lua*:记录访问日志<br>参考：<a href=\"https://github.com/openresty/lua-nginx-module\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module</a><br><a href=\"http://tengine.taobao.org/book/chapter_12.html#id8\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html#id8</a><br><a href=\"http://jinnianshilongnian.iteye.com/blog/2186448\" target=\"_blank\" rel=\"noopener\">http://jinnianshilongnian.iteye.com/blog/2186448</a></p>\n</li>\n<li>http请求报文<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173844671.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>HTTP响应报文<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180112173621526.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>附openresty的Github地址：<a href=\"https://github.com/openresty\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty</a></li>\n</ol>\n"},{"post_url":"log-example","title":"Nginx Apache(httpd) Tomcat Resin IIS Jboss Wildfly Weblogic 等各种应用容器默认访问日志的格式及样例","date":"2018-11-14T02:55:07.000Z","_content":"## Nginx\n```\n格式 = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\"\n样例 = 10.10.10.12 - - [09/Nov/2018:09:48:42 +0800] \"POST /project/totalStatus HTTP/1.1\" 200 781 \"http://console.monitor.iaiot.com/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## Apache(httpd) 配置文件中有三种访问日志格式\n```\ncommon 格式 = %h %l %u %t \"%r\" %>s %b\ncommon 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209\ncombined 格式 = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"\ncombined 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209 \"http://localhost/x1.html\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36\"\ncombinedio 格式 = \"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O\ncombinedio 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209 \"http://localhost/x1.html\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36\" 127 217\n```\n\n## Tomcat\n```\n格式 = \"%h %l %u %t \"%r\" %s %b\"\n样例 = 127.0.0.1 - - [09/Nov/2018:11:36:01 +0800] \"POST /project/getProjects HTTP/1.1\" 200 83\n```\n\n## Resin\n```\n格式 = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"\n样例 = 127.0.0.1 - - [09/Nov/2018:15:31:39 +0800] \"GET /resin-doc/ HTTP/1.1\" 200 16417 \"http://127.0.0.1:8080/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## IIS 有三种访问日志格式\n```\nW3C 样例 = 2018-11-09 08:12:41 172.22.255.255 GET /images/picture.jpg - 8080 - 172.30.255.255 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/70.0.3538.77+Safari/537.36 http://localhost/ 404 0 2 1\nIIS 样例 = 192.168.114.201, -, 03/20/2018, 7:55:20, W3SVC2, SERVER, 172.21.13.45, 4502, 163, 3223, 200, 0, GET, /DeptLogo.gif, -,\nNCSA 样例 = 172.21.13.45 - Microsoft\\JohnDoe [07/Apr/2004:17:39:04 -0800] \"GET /scripts/iisadmin/ism.dll?http/serv HTTP/1.0\" 200 3401\n```\n\n## Jboss\n```\n样例 = 127.0.0.1 - - [13/Nov/2018:10:58:27 +0800] \"GET /site_test HTTP/1.1\" 404 986\n```\n\n## Wildfly 有两种访问日志格式\n```\ncommon 样例 = 127.0.0.1 - - [13/Nov/2018:10:08:39 +0800] \"GET /site_test/ HTTP/1.1\" 200 52\ncombined 样例 = 127.0.0.1 - - [13/Nov/2018:10:13:25 +0800] \"GET /favicon.ico HTTP/1.1\" 200 1150 \"http://localhost:8080/site_test/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## Weblogic(注意 Weblogic access 日志最后会有一个空格)\n```\n样例 = 127.0.0.1 - - [13/十一月/2018:17:44:01 +0800] \"GET /testweb/index.jsp HTTP/1.1\" 200 52 \n```","source":"_posts/log-example.md","raw":"---\npost_url: log-example\ntitle: Nginx Apache(httpd) Tomcat Resin IIS Jboss Wildfly Weblogic 等各种应用容器默认访问日志的格式及样例\ndate: 2018-11-14 10:55:07\ntags: [nginx, apache, tomcat, resin, IIS, jboss, wildfly, weblogic]\n---\n## Nginx\n```\n格式 = $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\"\n样例 = 10.10.10.12 - - [09/Nov/2018:09:48:42 +0800] \"POST /project/totalStatus HTTP/1.1\" 200 781 \"http://console.monitor.iaiot.com/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## Apache(httpd) 配置文件中有三种访问日志格式\n```\ncommon 格式 = %h %l %u %t \"%r\" %>s %b\ncommon 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209\ncombined 格式 = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"\ncombined 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209 \"http://localhost/x1.html\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36\"\ncombinedio 格式 = \"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O\ncombinedio 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] \"GET /favicon.ico HTTP/1.1\" 404 209 \"http://localhost/x1.html\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36\" 127 217\n```\n\n## Tomcat\n```\n格式 = \"%h %l %u %t \"%r\" %s %b\"\n样例 = 127.0.0.1 - - [09/Nov/2018:11:36:01 +0800] \"POST /project/getProjects HTTP/1.1\" 200 83\n```\n\n## Resin\n```\n格式 = %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"\n样例 = 127.0.0.1 - - [09/Nov/2018:15:31:39 +0800] \"GET /resin-doc/ HTTP/1.1\" 200 16417 \"http://127.0.0.1:8080/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## IIS 有三种访问日志格式\n```\nW3C 样例 = 2018-11-09 08:12:41 172.22.255.255 GET /images/picture.jpg - 8080 - 172.30.255.255 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/70.0.3538.77+Safari/537.36 http://localhost/ 404 0 2 1\nIIS 样例 = 192.168.114.201, -, 03/20/2018, 7:55:20, W3SVC2, SERVER, 172.21.13.45, 4502, 163, 3223, 200, 0, GET, /DeptLogo.gif, -,\nNCSA 样例 = 172.21.13.45 - Microsoft\\JohnDoe [07/Apr/2004:17:39:04 -0800] \"GET /scripts/iisadmin/ism.dll?http/serv HTTP/1.0\" 200 3401\n```\n\n## Jboss\n```\n样例 = 127.0.0.1 - - [13/Nov/2018:10:58:27 +0800] \"GET /site_test HTTP/1.1\" 404 986\n```\n\n## Wildfly 有两种访问日志格式\n```\ncommon 样例 = 127.0.0.1 - - [13/Nov/2018:10:08:39 +0800] \"GET /site_test/ HTTP/1.1\" 200 52\ncombined 样例 = 127.0.0.1 - - [13/Nov/2018:10:13:25 +0800] \"GET /favicon.ico HTTP/1.1\" 200 1150 \"http://localhost:8080/site_test/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n```\n\n## Weblogic(注意 Weblogic access 日志最后会有一个空格)\n```\n样例 = 127.0.0.1 - - [13/十一月/2018:17:44:01 +0800] \"GET /testweb/index.jsp HTTP/1.1\" 200 52 \n```","slug":"log-example","published":1,"updated":"2019-03-25T13:59:47.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtps003e05aba6dpg6a8","content":"<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = $remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;</span><br><span class=\"line\">样例 = 10.10.10.12 - - [09/Nov/2018:09:48:42 +0800] &quot;POST /project/totalStatus HTTP/1.1&quot; 200 781 &quot;http://console.monitor.iaiot.com/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Apache-httpd-配置文件中有三种访问日志格式\"><a href=\"#Apache-httpd-配置文件中有三种访问日志格式\" class=\"headerlink\" title=\"Apache(httpd) 配置文件中有三种访问日志格式\"></a>Apache(httpd) 配置文件中有三种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common 格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b</span><br><span class=\"line\">common 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209</span><br><span class=\"line\">combined 格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class=\"line\">combined 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209 &quot;http://localhost/x1.html&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36&quot;</span><br><span class=\"line\">combinedio 格式 = &quot;%h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot; %I %O</span><br><span class=\"line\">combinedio 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209 &quot;http://localhost/x1.html&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36&quot; 127 217</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = &quot;%h %l %u %t &quot;%r&quot; %s %b&quot;</span><br><span class=\"line\">样例 = 127.0.0.1 - - [09/Nov/2018:11:36:01 +0800] &quot;POST /project/getProjects HTTP/1.1&quot; 200 83</span><br></pre></td></tr></table></figure>\n<h2 id=\"Resin\"><a href=\"#Resin\" class=\"headerlink\" title=\"Resin\"></a>Resin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class=\"line\">样例 = 127.0.0.1 - - [09/Nov/2018:15:31:39 +0800] &quot;GET /resin-doc/ HTTP/1.1&quot; 200 16417 &quot;http://127.0.0.1:8080/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IIS-有三种访问日志格式\"><a href=\"#IIS-有三种访问日志格式\" class=\"headerlink\" title=\"IIS 有三种访问日志格式\"></a>IIS 有三种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W3C 样例 = 2018-11-09 08:12:41 172.22.255.255 GET /images/picture.jpg - 8080 - 172.30.255.255 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/70.0.3538.77+Safari/537.36 http://localhost/ 404 0 2 1</span><br><span class=\"line\">IIS 样例 = 192.168.114.201, -, 03/20/2018, 7:55:20, W3SVC2, SERVER, 172.21.13.45, 4502, 163, 3223, 200, 0, GET, /DeptLogo.gif, -,</span><br><span class=\"line\">NCSA 样例 = 172.21.13.45 - Microsoft\\JohnDoe [07/Apr/2004:17:39:04 -0800] &quot;GET /scripts/iisadmin/ism.dll?http/serv HTTP/1.0&quot; 200 3401</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例 = 127.0.0.1 - - [13/Nov/2018:10:58:27 +0800] &quot;GET /site_test HTTP/1.1&quot; 404 986</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wildfly-有两种访问日志格式\"><a href=\"#Wildfly-有两种访问日志格式\" class=\"headerlink\" title=\"Wildfly 有两种访问日志格式\"></a>Wildfly 有两种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common 样例 = 127.0.0.1 - - [13/Nov/2018:10:08:39 +0800] &quot;GET /site_test/ HTTP/1.1&quot; 200 52</span><br><span class=\"line\">combined 样例 = 127.0.0.1 - - [13/Nov/2018:10:13:25 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 200 1150 &quot;http://localhost:8080/site_test/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Weblogic-注意-Weblogic-access-日志最后会有一个空格\"><a href=\"#Weblogic-注意-Weblogic-access-日志最后会有一个空格\" class=\"headerlink\" title=\"Weblogic(注意 Weblogic access 日志最后会有一个空格)\"></a>Weblogic(注意 Weblogic access 日志最后会有一个空格)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例 = 127.0.0.1 - - [13/十一月/2018:17:44:01 +0800] &quot;GET /testweb/index.jsp HTTP/1.1&quot; 200 52</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = $remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;</span><br><span class=\"line\">样例 = 10.10.10.12 - - [09/Nov/2018:09:48:42 +0800] &quot;POST /project/totalStatus HTTP/1.1&quot; 200 781 &quot;http://console.monitor.iaiot.com/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Apache-httpd-配置文件中有三种访问日志格式\"><a href=\"#Apache-httpd-配置文件中有三种访问日志格式\" class=\"headerlink\" title=\"Apache(httpd) 配置文件中有三种访问日志格式\"></a>Apache(httpd) 配置文件中有三种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common 格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b</span><br><span class=\"line\">common 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209</span><br><span class=\"line\">combined 格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class=\"line\">combined 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209 &quot;http://localhost/x1.html&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36&quot;</span><br><span class=\"line\">combinedio 格式 = &quot;%h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot; %I %O</span><br><span class=\"line\">combinedio 样例 = 192.168.1.2 - - [02/Feb/2016:17:44:13 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 209 &quot;http://localhost/x1.html&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36&quot; 127 217</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = &quot;%h %l %u %t &quot;%r&quot; %s %b&quot;</span><br><span class=\"line\">样例 = 127.0.0.1 - - [09/Nov/2018:11:36:01 +0800] &quot;POST /project/getProjects HTTP/1.1&quot; 200 83</span><br></pre></td></tr></table></figure>\n<h2 id=\"Resin\"><a href=\"#Resin\" class=\"headerlink\" title=\"Resin\"></a>Resin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 = %h %l %u %t &quot;%r&quot; %&gt;s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class=\"line\">样例 = 127.0.0.1 - - [09/Nov/2018:15:31:39 +0800] &quot;GET /resin-doc/ HTTP/1.1&quot; 200 16417 &quot;http://127.0.0.1:8080/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IIS-有三种访问日志格式\"><a href=\"#IIS-有三种访问日志格式\" class=\"headerlink\" title=\"IIS 有三种访问日志格式\"></a>IIS 有三种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W3C 样例 = 2018-11-09 08:12:41 172.22.255.255 GET /images/picture.jpg - 8080 - 172.30.255.255 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/70.0.3538.77+Safari/537.36 http://localhost/ 404 0 2 1</span><br><span class=\"line\">IIS 样例 = 192.168.114.201, -, 03/20/2018, 7:55:20, W3SVC2, SERVER, 172.21.13.45, 4502, 163, 3223, 200, 0, GET, /DeptLogo.gif, -,</span><br><span class=\"line\">NCSA 样例 = 172.21.13.45 - Microsoft\\JohnDoe [07/Apr/2004:17:39:04 -0800] &quot;GET /scripts/iisadmin/ism.dll?http/serv HTTP/1.0&quot; 200 3401</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例 = 127.0.0.1 - - [13/Nov/2018:10:58:27 +0800] &quot;GET /site_test HTTP/1.1&quot; 404 986</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wildfly-有两种访问日志格式\"><a href=\"#Wildfly-有两种访问日志格式\" class=\"headerlink\" title=\"Wildfly 有两种访问日志格式\"></a>Wildfly 有两种访问日志格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common 样例 = 127.0.0.1 - - [13/Nov/2018:10:08:39 +0800] &quot;GET /site_test/ HTTP/1.1&quot; 200 52</span><br><span class=\"line\">combined 样例 = 127.0.0.1 - - [13/Nov/2018:10:13:25 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 200 1150 &quot;http://localhost:8080/site_test/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Weblogic-注意-Weblogic-access-日志最后会有一个空格\"><a href=\"#Weblogic-注意-Weblogic-access-日志最后会有一个空格\" class=\"headerlink\" title=\"Weblogic(注意 Weblogic access 日志最后会有一个空格)\"></a>Weblogic(注意 Weblogic access 日志最后会有一个空格)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例 = 127.0.0.1 - - [13/十一月/2018:17:44:01 +0800] &quot;GET /testweb/index.jsp HTTP/1.1&quot; 200 52</span><br></pre></td></tr></table></figure>"},{"title":"Maven项目引用本地jar包，编译后出现java.lang.NoClassDefFoundError","post_url":"maven-jar-NoClassDefFoundError","date":"2017-03-08T02:40:22.000Z","_content":"解决办法如下：\n\n1. 首先在src目录下创建libs目录并把jar包复制进去，然后加到build path里面，确定加到build path里面后\n\n2. 项目右键→Properties→Deployment Assembly→Add→Java Build Path Entries→Next→选择jar包→Finish→Apply→OK.\n\n \n\n不需要再在pom.xml文件里面配置。\n\n \n\n我遇到的问题：\n\n我在使用支付宝的支付jar包，编译运行后出现java.lang.NoClassDefFoundError错误。我的项目中已经有commons-logging.jar包了，就没再重复导入。\n\n \n\n如果提示缺少的是依赖工程中的类，就项目右键→Properties→Deployment Assembly→Add→Project→Next→选择工程→Finish→Apply→OK.\n","source":"_posts/maven-jar-NoClassDefFoundError.md","raw":"---\ntitle: Maven项目引用本地jar包，编译后出现java.lang.NoClassDefFoundError\npost_url: maven-jar-NoClassDefFoundError\ndate: 2017-03-08 10:40:22\ntags: maven\n---\n解决办法如下：\n\n1. 首先在src目录下创建libs目录并把jar包复制进去，然后加到build path里面，确定加到build path里面后\n\n2. 项目右键→Properties→Deployment Assembly→Add→Java Build Path Entries→Next→选择jar包→Finish→Apply→OK.\n\n \n\n不需要再在pom.xml文件里面配置。\n\n \n\n我遇到的问题：\n\n我在使用支付宝的支付jar包，编译运行后出现java.lang.NoClassDefFoundError错误。我的项目中已经有commons-logging.jar包了，就没再重复导入。\n\n \n\n如果提示缺少的是依赖工程中的类，就项目右键→Properties→Deployment Assembly→Add→Project→Next→选择工程→Finish→Apply→OK.\n","slug":"maven-jar-NoClassDefFoundError","published":1,"updated":"2019-03-24T12:05:52.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpu003h05abwhz5lfhh","content":"<p>解决办法如下：</p>\n<ol>\n<li><p>首先在src目录下创建libs目录并把jar包复制进去，然后加到build path里面，确定加到build path里面后</p>\n</li>\n<li><p>项目右键→Properties→Deployment Assembly→Add→Java Build Path Entries→Next→选择jar包→Finish→Apply→OK.</p>\n</li>\n</ol>\n<p>不需要再在pom.xml文件里面配置。</p>\n<p>我遇到的问题：</p>\n<p>我在使用支付宝的支付jar包，编译运行后出现java.lang.NoClassDefFoundError错误。我的项目中已经有commons-logging.jar包了，就没再重复导入。</p>\n<p>如果提示缺少的是依赖工程中的类，就项目右键→Properties→Deployment Assembly→Add→Project→Next→选择工程→Finish→Apply→OK.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>解决办法如下：</p>\n<ol>\n<li><p>首先在src目录下创建libs目录并把jar包复制进去，然后加到build path里面，确定加到build path里面后</p>\n</li>\n<li><p>项目右键→Properties→Deployment Assembly→Add→Java Build Path Entries→Next→选择jar包→Finish→Apply→OK.</p>\n</li>\n</ol>\n<p>不需要再在pom.xml文件里面配置。</p>\n<p>我遇到的问题：</p>\n<p>我在使用支付宝的支付jar包，编译运行后出现java.lang.NoClassDefFoundError错误。我的项目中已经有commons-logging.jar包了，就没再重复导入。</p>\n<p>如果提示缺少的是依赖工程中的类，就项目右键→Properties→Deployment Assembly→Add→Project→Next→选择工程→Finish→Apply→OK.</p>\n"},{"post_url":"mysql-python-redis","title":"使用 python 查询 MySQL 数据并写入 redis","date":"2018-02-06T02:40:09.000Z","_content":"```python\nimport json\nimport os\nimport sys\nimport MySQLdb\nimport redis\nimport hashlib\n \nreload(sys)\nsys.setdefaultencoding('utf-8')\n \nclass mysql2redis():\n\tdef __init__(self, mysqlip, mysqluser, mysqlpwd, redisip, redisauth):\n\t\tself.mysqlip = mysqlip\n\t\tself.mysqluser = mysqluser\n\t\tself.mysqlpwd = mysqlpwd\n\t\tself.redisip = redisip\n\t\tself.redisauth = redisauth\n \n\tdef domain2md5(self, domains):\n\t\tfor domain in domains:\n\t\t\tm = hashlib.md5()\n\t\t\tm.update(domain)\n\t\t\tself.domain = domain\n\t\t\tself.read4mysql(m.hexdigest())\n \n\tdef read4mysql(self, site_uuid):\n\t\tprint(\"%s processing...\" % self.domain)\n\t\tdb = MySQLdb.connect(self.mysqlip, self.mysqluser, self.mysqlpwd, \"lxserver\")\n\t\tcursor = db.cursor()\n\t\tsql = \"\"\"SELECT a.reply_type,a.module,b.parent_key,a.user_id,a.type,a.site_uuid,b.connect_key,a.`mode`,a.has_get_file,\n\t\ta.city,a.ip,a.create_time,a.is_connect,a.area,a.root_path,a.`name`,a.connect_url,a.province,a.site_id,a.industry_id,a.harm_level,b.rc4_key \n\t\tFROM lx_site a,lx_user b WHERE a.site_uuid = '%s' AND a.user_id = b.user_id\"\"\" % site_uuid\n\t\tcursor.execute(sql)\n\t\tdata = cursor.fetchall()\n\t\tself.processData(data)\n\t\tdb.close()\n \n\tdef processData(self, data):\n\t\tfor row in data:\n\t\t\tsiteid = row[18]\n\t\t\tv = \"{'replyType':%s,'module':'%s','parentKey':'%s','userid':%s,'type':'%s','siteUuid':'%s','connectkey':'%s','mode':%s,'hasgetfile':%s,'city':'%s','ip':'%s','createtime':%s,'isconnect':%s,'area':'%s','rootpath':'%s','name':'%s','connecturl':'%s','province':'%s','siteid':'%s','industryid':%s,'harmlevel':%s,'rc4key':'%s'}\" % (row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],row[10],row[11],row[12],row[13],row[14],row[15],row[16],row[17],row[18],row[19],row[20],row[21])\n\t\t\tvalue = json.dumps(v, ensure_ascii=False)\n\t\t\tis_connect = row[12]\n\t\t\tself.write2redis(siteid, is_connect, value)\n\t\tprint(\"%s OK\" % self.domain)\n \n\tdef write2redis(self, siteid, score, value):\n\t\t#print(siteid)\n\t\t#print(score)\n\t\t#print(value)\n\t\tpool = redis.ConnectionPool(host = self.redisip, port = 6379, password = self.redisauth)\n\t\tr = redis.Redis(connection_pool = pool)\n\t\tdic = {siteid:value}\n\t\t#r.hmset(\"lxsitehashin\", dic)\n\t\t#r.zadd(\"lxsitesetin\", score, siteid)\n \nif __name__ == '__main__':\n\tdomains = ['http://aa.com','http://bb.com','http://cc.com','http://dd.com','http://ee.com','http://ff.com']\n\tmysqlip = \"mysql.*.iaiot.com\"\n\tmysqluser = \"root\"\n\tmysqlpwd = \"rootpwd\"\n\tredisip = \"127.0.0.1\"\n\tredisauth = \"redispwd\"\n\tmysql2redis(mysqlip, mysqluser, mysqlpwd, redisip, redisauth).domain2md5(domains)\n \nos.system(\"pause\")\n```","source":"_posts/mysql-python-redis.md","raw":"---\npost_url: mysql-python-redis\ntitle: 使用 python 查询 MySQL 数据并写入 redis\ndate: 2018-02-06 10:40:09\ntags: python\n---\n```python\nimport json\nimport os\nimport sys\nimport MySQLdb\nimport redis\nimport hashlib\n \nreload(sys)\nsys.setdefaultencoding('utf-8')\n \nclass mysql2redis():\n\tdef __init__(self, mysqlip, mysqluser, mysqlpwd, redisip, redisauth):\n\t\tself.mysqlip = mysqlip\n\t\tself.mysqluser = mysqluser\n\t\tself.mysqlpwd = mysqlpwd\n\t\tself.redisip = redisip\n\t\tself.redisauth = redisauth\n \n\tdef domain2md5(self, domains):\n\t\tfor domain in domains:\n\t\t\tm = hashlib.md5()\n\t\t\tm.update(domain)\n\t\t\tself.domain = domain\n\t\t\tself.read4mysql(m.hexdigest())\n \n\tdef read4mysql(self, site_uuid):\n\t\tprint(\"%s processing...\" % self.domain)\n\t\tdb = MySQLdb.connect(self.mysqlip, self.mysqluser, self.mysqlpwd, \"lxserver\")\n\t\tcursor = db.cursor()\n\t\tsql = \"\"\"SELECT a.reply_type,a.module,b.parent_key,a.user_id,a.type,a.site_uuid,b.connect_key,a.`mode`,a.has_get_file,\n\t\ta.city,a.ip,a.create_time,a.is_connect,a.area,a.root_path,a.`name`,a.connect_url,a.province,a.site_id,a.industry_id,a.harm_level,b.rc4_key \n\t\tFROM lx_site a,lx_user b WHERE a.site_uuid = '%s' AND a.user_id = b.user_id\"\"\" % site_uuid\n\t\tcursor.execute(sql)\n\t\tdata = cursor.fetchall()\n\t\tself.processData(data)\n\t\tdb.close()\n \n\tdef processData(self, data):\n\t\tfor row in data:\n\t\t\tsiteid = row[18]\n\t\t\tv = \"{'replyType':%s,'module':'%s','parentKey':'%s','userid':%s,'type':'%s','siteUuid':'%s','connectkey':'%s','mode':%s,'hasgetfile':%s,'city':'%s','ip':'%s','createtime':%s,'isconnect':%s,'area':'%s','rootpath':'%s','name':'%s','connecturl':'%s','province':'%s','siteid':'%s','industryid':%s,'harmlevel':%s,'rc4key':'%s'}\" % (row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],row[10],row[11],row[12],row[13],row[14],row[15],row[16],row[17],row[18],row[19],row[20],row[21])\n\t\t\tvalue = json.dumps(v, ensure_ascii=False)\n\t\t\tis_connect = row[12]\n\t\t\tself.write2redis(siteid, is_connect, value)\n\t\tprint(\"%s OK\" % self.domain)\n \n\tdef write2redis(self, siteid, score, value):\n\t\t#print(siteid)\n\t\t#print(score)\n\t\t#print(value)\n\t\tpool = redis.ConnectionPool(host = self.redisip, port = 6379, password = self.redisauth)\n\t\tr = redis.Redis(connection_pool = pool)\n\t\tdic = {siteid:value}\n\t\t#r.hmset(\"lxsitehashin\", dic)\n\t\t#r.zadd(\"lxsitesetin\", score, siteid)\n \nif __name__ == '__main__':\n\tdomains = ['http://aa.com','http://bb.com','http://cc.com','http://dd.com','http://ee.com','http://ff.com']\n\tmysqlip = \"mysql.*.iaiot.com\"\n\tmysqluser = \"root\"\n\tmysqlpwd = \"rootpwd\"\n\tredisip = \"127.0.0.1\"\n\tredisauth = \"redispwd\"\n\tmysql2redis(mysqlip, mysqluser, mysqlpwd, redisip, redisauth).domain2md5(domains)\n \nos.system(\"pause\")\n```","slug":"mysql-python-redis","published":1,"updated":"2019-03-24T13:12:26.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpw003j05abxcvye3o1","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"> </span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mysql2redis</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, mysqlip, mysqluser, mysqlpwd, redisip, redisauth)</span>:</span></span><br><span class=\"line\">\t\tself.mysqlip = mysqlip</span><br><span class=\"line\">\t\tself.mysqluser = mysqluser</span><br><span class=\"line\">\t\tself.mysqlpwd = mysqlpwd</span><br><span class=\"line\">\t\tself.redisip = redisip</span><br><span class=\"line\">\t\tself.redisauth = redisauth</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">domain2md5</span><span class=\"params\">(self, domains)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> domains:</span><br><span class=\"line\">\t\t\tm = hashlib.md5()</span><br><span class=\"line\">\t\t\tm.update(domain)</span><br><span class=\"line\">\t\t\tself.domain = domain</span><br><span class=\"line\">\t\t\tself.read4mysql(m.hexdigest())</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read4mysql</span><span class=\"params\">(self, site_uuid)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"%s processing...\"</span> % self.domain)</span><br><span class=\"line\">\t\tdb = MySQLdb.connect(self.mysqlip, self.mysqluser, self.mysqlpwd, <span class=\"string\">\"lxserver\"</span>)</span><br><span class=\"line\">\t\tcursor = db.cursor()</span><br><span class=\"line\">\t\tsql = <span class=\"string\">\"\"\"SELECT a.reply_type,a.module,b.parent_key,a.user_id,a.type,a.site_uuid,b.connect_key,a.`mode`,a.has_get_file,</span></span><br><span class=\"line\"><span class=\"string\">\t\ta.city,a.ip,a.create_time,a.is_connect,a.area,a.root_path,a.`name`,a.connect_url,a.province,a.site_id,a.industry_id,a.harm_level,b.rc4_key </span></span><br><span class=\"line\"><span class=\"string\">\t\tFROM lx_site a,lx_user b WHERE a.site_uuid = '%s' AND a.user_id = b.user_id\"\"\"</span> % site_uuid</span><br><span class=\"line\">\t\tcursor.execute(sql)</span><br><span class=\"line\">\t\tdata = cursor.fetchall()</span><br><span class=\"line\">\t\tself.processData(data)</span><br><span class=\"line\">\t\tdb.close()</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processData</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">\t\t\tsiteid = row[<span class=\"number\">18</span>]</span><br><span class=\"line\">\t\t\tv = <span class=\"string\">\"&#123;'replyType':%s,'module':'%s','parentKey':'%s','userid':%s,'type':'%s','siteUuid':'%s','connectkey':'%s','mode':%s,'hasgetfile':%s,'city':'%s','ip':'%s','createtime':%s,'isconnect':%s,'area':'%s','rootpath':'%s','name':'%s','connecturl':'%s','province':'%s','siteid':'%s','industryid':%s,'harmlevel':%s,'rc4key':'%s'&#125;\"</span> % (row[<span class=\"number\">0</span>],row[<span class=\"number\">1</span>],row[<span class=\"number\">2</span>],row[<span class=\"number\">3</span>],row[<span class=\"number\">4</span>],row[<span class=\"number\">5</span>],row[<span class=\"number\">6</span>],row[<span class=\"number\">7</span>],row[<span class=\"number\">8</span>],row[<span class=\"number\">9</span>],row[<span class=\"number\">10</span>],row[<span class=\"number\">11</span>],row[<span class=\"number\">12</span>],row[<span class=\"number\">13</span>],row[<span class=\"number\">14</span>],row[<span class=\"number\">15</span>],row[<span class=\"number\">16</span>],row[<span class=\"number\">17</span>],row[<span class=\"number\">18</span>],row[<span class=\"number\">19</span>],row[<span class=\"number\">20</span>],row[<span class=\"number\">21</span>])</span><br><span class=\"line\">\t\t\tvalue = json.dumps(v, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">\t\t\tis_connect = row[<span class=\"number\">12</span>]</span><br><span class=\"line\">\t\t\tself.write2redis(siteid, is_connect, value)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"%s OK\"</span> % self.domain)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write2redis</span><span class=\"params\">(self, siteid, score, value)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(siteid)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(score)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(value)</span></span><br><span class=\"line\">\t\tpool = redis.ConnectionPool(host = self.redisip, port = <span class=\"number\">6379</span>, password = self.redisauth)</span><br><span class=\"line\">\t\tr = redis.Redis(connection_pool = pool)</span><br><span class=\"line\">\t\tdic = &#123;siteid:value&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">#r.hmset(\"lxsitehashin\", dic)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#r.zadd(\"lxsitesetin\", score, siteid)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tdomains = [<span class=\"string\">'http://aa.com'</span>,<span class=\"string\">'http://bb.com'</span>,<span class=\"string\">'http://cc.com'</span>,<span class=\"string\">'http://dd.com'</span>,<span class=\"string\">'http://ee.com'</span>,<span class=\"string\">'http://ff.com'</span>]</span><br><span class=\"line\">\tmysqlip = <span class=\"string\">\"mysql.*.iaiot.com\"</span></span><br><span class=\"line\">\tmysqluser = <span class=\"string\">\"root\"</span></span><br><span class=\"line\">\tmysqlpwd = <span class=\"string\">\"rootpwd\"</span></span><br><span class=\"line\">\tredisip = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">\tredisauth = <span class=\"string\">\"redispwd\"</span></span><br><span class=\"line\">\tmysql2redis(mysqlip, mysqluser, mysqlpwd, redisip, redisauth).domain2md5(domains)</span><br><span class=\"line\"> </span><br><span class=\"line\">os.system(<span class=\"string\">\"pause\"</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"> </span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mysql2redis</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, mysqlip, mysqluser, mysqlpwd, redisip, redisauth)</span>:</span></span><br><span class=\"line\">\t\tself.mysqlip = mysqlip</span><br><span class=\"line\">\t\tself.mysqluser = mysqluser</span><br><span class=\"line\">\t\tself.mysqlpwd = mysqlpwd</span><br><span class=\"line\">\t\tself.redisip = redisip</span><br><span class=\"line\">\t\tself.redisauth = redisauth</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">domain2md5</span><span class=\"params\">(self, domains)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> domains:</span><br><span class=\"line\">\t\t\tm = hashlib.md5()</span><br><span class=\"line\">\t\t\tm.update(domain)</span><br><span class=\"line\">\t\t\tself.domain = domain</span><br><span class=\"line\">\t\t\tself.read4mysql(m.hexdigest())</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read4mysql</span><span class=\"params\">(self, site_uuid)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"%s processing...\"</span> % self.domain)</span><br><span class=\"line\">\t\tdb = MySQLdb.connect(self.mysqlip, self.mysqluser, self.mysqlpwd, <span class=\"string\">\"lxserver\"</span>)</span><br><span class=\"line\">\t\tcursor = db.cursor()</span><br><span class=\"line\">\t\tsql = <span class=\"string\">\"\"\"SELECT a.reply_type,a.module,b.parent_key,a.user_id,a.type,a.site_uuid,b.connect_key,a.`mode`,a.has_get_file,</span></span><br><span class=\"line\"><span class=\"string\">\t\ta.city,a.ip,a.create_time,a.is_connect,a.area,a.root_path,a.`name`,a.connect_url,a.province,a.site_id,a.industry_id,a.harm_level,b.rc4_key </span></span><br><span class=\"line\"><span class=\"string\">\t\tFROM lx_site a,lx_user b WHERE a.site_uuid = '%s' AND a.user_id = b.user_id\"\"\"</span> % site_uuid</span><br><span class=\"line\">\t\tcursor.execute(sql)</span><br><span class=\"line\">\t\tdata = cursor.fetchall()</span><br><span class=\"line\">\t\tself.processData(data)</span><br><span class=\"line\">\t\tdb.close()</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processData</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">\t\t\tsiteid = row[<span class=\"number\">18</span>]</span><br><span class=\"line\">\t\t\tv = <span class=\"string\">\"&#123;'replyType':%s,'module':'%s','parentKey':'%s','userid':%s,'type':'%s','siteUuid':'%s','connectkey':'%s','mode':%s,'hasgetfile':%s,'city':'%s','ip':'%s','createtime':%s,'isconnect':%s,'area':'%s','rootpath':'%s','name':'%s','connecturl':'%s','province':'%s','siteid':'%s','industryid':%s,'harmlevel':%s,'rc4key':'%s'&#125;\"</span> % (row[<span class=\"number\">0</span>],row[<span class=\"number\">1</span>],row[<span class=\"number\">2</span>],row[<span class=\"number\">3</span>],row[<span class=\"number\">4</span>],row[<span class=\"number\">5</span>],row[<span class=\"number\">6</span>],row[<span class=\"number\">7</span>],row[<span class=\"number\">8</span>],row[<span class=\"number\">9</span>],row[<span class=\"number\">10</span>],row[<span class=\"number\">11</span>],row[<span class=\"number\">12</span>],row[<span class=\"number\">13</span>],row[<span class=\"number\">14</span>],row[<span class=\"number\">15</span>],row[<span class=\"number\">16</span>],row[<span class=\"number\">17</span>],row[<span class=\"number\">18</span>],row[<span class=\"number\">19</span>],row[<span class=\"number\">20</span>],row[<span class=\"number\">21</span>])</span><br><span class=\"line\">\t\t\tvalue = json.dumps(v, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">\t\t\tis_connect = row[<span class=\"number\">12</span>]</span><br><span class=\"line\">\t\t\tself.write2redis(siteid, is_connect, value)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"%s OK\"</span> % self.domain)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write2redis</span><span class=\"params\">(self, siteid, score, value)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(siteid)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(score)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#print(value)</span></span><br><span class=\"line\">\t\tpool = redis.ConnectionPool(host = self.redisip, port = <span class=\"number\">6379</span>, password = self.redisauth)</span><br><span class=\"line\">\t\tr = redis.Redis(connection_pool = pool)</span><br><span class=\"line\">\t\tdic = &#123;siteid:value&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">#r.hmset(\"lxsitehashin\", dic)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#r.zadd(\"lxsitesetin\", score, siteid)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tdomains = [<span class=\"string\">'http://aa.com'</span>,<span class=\"string\">'http://bb.com'</span>,<span class=\"string\">'http://cc.com'</span>,<span class=\"string\">'http://dd.com'</span>,<span class=\"string\">'http://ee.com'</span>,<span class=\"string\">'http://ff.com'</span>]</span><br><span class=\"line\">\tmysqlip = <span class=\"string\">\"mysql.*.iaiot.com\"</span></span><br><span class=\"line\">\tmysqluser = <span class=\"string\">\"root\"</span></span><br><span class=\"line\">\tmysqlpwd = <span class=\"string\">\"rootpwd\"</span></span><br><span class=\"line\">\tredisip = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">\tredisauth = <span class=\"string\">\"redispwd\"</span></span><br><span class=\"line\">\tmysql2redis(mysqlip, mysqluser, mysqlpwd, redisip, redisauth).domain2md5(domains)</span><br><span class=\"line\"> </span><br><span class=\"line\">os.system(<span class=\"string\">\"pause\"</span>)</span><br></pre></td></tr></table></figure>"},{"title":"mysql笔记","post_url":"mysql-notes","date":"2018-06-19T10:57:48.000Z","_content":"1. centos下删除 卸载Mysql\n\nyum remove  mysql mysql-server mysql-libs mysql-server;\nfind / -name mysql 将找到的相关东西delete掉；\n\nrpm -qa|grep mysql(查询出来的东东yum remove掉)\n\n2. 安装MySQL用户相关操作(%:通配符，此处表示允许该用户通过任意IP连接到数据库)：\n\n设置 root 密码：SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n创建用户：CREATE USER 'username'@'localhost' IDENTIFIED BY 'password'; 例：CREATE USER 'admin'@'%' IDENTIFIED BY '123456';\n用户授权：GRANT privileges ON databasename.tablename TO 'username'@'host'; 例：GRANT ALL ON db1.* TO 'admin'@'%';\n删除用户：drop user 'username'@'localhost'; 例：drop user 'admin'@'%';\n查询用户：SELECT User, Host, Password FROM mysql.user;\n刷新权限：flush privileges;\n停止MySQL：/etc/init.d/mysqld stop\n重启MySQL：/etc/init.d/mysqld restart\n       或：service mysqld restart\n启动MySQL：service mysqld start\n查看是否有与MySQL相关的软件：rpm -qa | grep -i mysql\n卸载相关软件：yum remove mysql mysql-server mysql-libs mysql-server\n参考：https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html\n      https://zhidao.baidu.com/question/1603863845338636507.html\n      http://www.cnblogs.com/snake-hand/p/3157247.html\n      http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\n      http://www.jianshu.com/p/d7b9c468f20d\n      http://blog.csdn.net/dbanote/article/details/12911851\n\n\n3. 登录MySQL(注意无空格)：\n本地登录：mysql -uroot -p123456 -P3306\n远程登录：mysql -h192.168.1.2 -P3306 -uroot -p123456\n\n\n4. MySQL数据迁移(备份恢复)\n导出全部数据：mysqldump -uroot -p123456 db1 > db1.dump\n只导出表结构：mysqldump -uroot -p123456 --no-data --databases db1 > db1.dump\n导出远程MySQL数据：mysqldump -h192.168.1.2 -P3306 -uroot -p123456 db1 > db1.dump\n导入：先创建目标数据库(create database db1;)，然后mysql -uroot -p123456 db1 < db1.dump\n附：删除数据库：drop database db1;\n\n\n5. MySQL部分迁移\n选择某个数据库：use db1;\n导出指定数据到文件：select * into OUTFILE 't1' from table1 where id in(2,3,5);\n导入数据文件到数据库：LOAD DATA INFILE 't1' INTO TABLE t1;\n\n\n6. MySQL-Linux通用版安装\n该方法可以解决很多使用普通安装方式安装遇到的问题\n\nhttps://blog.csdn.net/iaiot/article/details/80737630\n\n \n\n7. 修改MySQL自增ID起始值:\n\nalter table users AUTO_INCREMENT=1;\n\n \n\n \n\n8. MySQL时间戳 时间查询转换\n\n时间转时间戳：select UNIX_TIMESTAMP(update_time) from table1;\n\n时间戳转时间：select FROM_UNIXTIME(create_time) from table1;\n\n \n\n9. MySQL一次查询统计多条数据\n```sql\nselect\ncount(case when u.audit_status = 1 AND u.isdeleted = 0 then u.audit_status end) AS verified,\ncount(case when u.audit_status = 2 AND u.isdeleted = 0 then u.audit_status end) AS disVerified,\ncount(case when u.audit_status = 0 AND u.isdeleted = 0 then u.audit_status end) AS unVerified,\ncount(1) total\nfrom sc_user u\n```\n\n10. Windows下安装MySQL5.6 zip版\n\n参考：https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html\n\n \n\n \n\n11. yum默认安装的那个MySQL版本时间字段不支持update_time和create_time同时自动设置时间，建议手动安装MySQL5.6以上版本；\n\n \n\n12. MyBatis中取值时，#和$的区别\n\n\\#{} 这种取值是编译好SQL语句再取值 \n\n${} 这种是取值以后再去编译SQL语句\n\n动态拼接sql要用${}，${}会有SQL注入的风险\n\n参考：https://www.jianshu.com/p/b3b4a4fb8a54\n","source":"_posts/mysql-notes.md","raw":"---\ntitle: mysql笔记\npost_url: mysql-notes\ndate: 2018-06-19 18:57:48\ntags: mysql\n---\n1. centos下删除 卸载Mysql\n\nyum remove  mysql mysql-server mysql-libs mysql-server;\nfind / -name mysql 将找到的相关东西delete掉；\n\nrpm -qa|grep mysql(查询出来的东东yum remove掉)\n\n2. 安装MySQL用户相关操作(%:通配符，此处表示允许该用户通过任意IP连接到数据库)：\n\n设置 root 密码：SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n创建用户：CREATE USER 'username'@'localhost' IDENTIFIED BY 'password'; 例：CREATE USER 'admin'@'%' IDENTIFIED BY '123456';\n用户授权：GRANT privileges ON databasename.tablename TO 'username'@'host'; 例：GRANT ALL ON db1.* TO 'admin'@'%';\n删除用户：drop user 'username'@'localhost'; 例：drop user 'admin'@'%';\n查询用户：SELECT User, Host, Password FROM mysql.user;\n刷新权限：flush privileges;\n停止MySQL：/etc/init.d/mysqld stop\n重启MySQL：/etc/init.d/mysqld restart\n       或：service mysqld restart\n启动MySQL：service mysqld start\n查看是否有与MySQL相关的软件：rpm -qa | grep -i mysql\n卸载相关软件：yum remove mysql mysql-server mysql-libs mysql-server\n参考：https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html\n      https://zhidao.baidu.com/question/1603863845338636507.html\n      http://www.cnblogs.com/snake-hand/p/3157247.html\n      http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\n      http://www.jianshu.com/p/d7b9c468f20d\n      http://blog.csdn.net/dbanote/article/details/12911851\n\n\n3. 登录MySQL(注意无空格)：\n本地登录：mysql -uroot -p123456 -P3306\n远程登录：mysql -h192.168.1.2 -P3306 -uroot -p123456\n\n\n4. MySQL数据迁移(备份恢复)\n导出全部数据：mysqldump -uroot -p123456 db1 > db1.dump\n只导出表结构：mysqldump -uroot -p123456 --no-data --databases db1 > db1.dump\n导出远程MySQL数据：mysqldump -h192.168.1.2 -P3306 -uroot -p123456 db1 > db1.dump\n导入：先创建目标数据库(create database db1;)，然后mysql -uroot -p123456 db1 < db1.dump\n附：删除数据库：drop database db1;\n\n\n5. MySQL部分迁移\n选择某个数据库：use db1;\n导出指定数据到文件：select * into OUTFILE 't1' from table1 where id in(2,3,5);\n导入数据文件到数据库：LOAD DATA INFILE 't1' INTO TABLE t1;\n\n\n6. MySQL-Linux通用版安装\n该方法可以解决很多使用普通安装方式安装遇到的问题\n\nhttps://blog.csdn.net/iaiot/article/details/80737630\n\n \n\n7. 修改MySQL自增ID起始值:\n\nalter table users AUTO_INCREMENT=1;\n\n \n\n \n\n8. MySQL时间戳 时间查询转换\n\n时间转时间戳：select UNIX_TIMESTAMP(update_time) from table1;\n\n时间戳转时间：select FROM_UNIXTIME(create_time) from table1;\n\n \n\n9. MySQL一次查询统计多条数据\n```sql\nselect\ncount(case when u.audit_status = 1 AND u.isdeleted = 0 then u.audit_status end) AS verified,\ncount(case when u.audit_status = 2 AND u.isdeleted = 0 then u.audit_status end) AS disVerified,\ncount(case when u.audit_status = 0 AND u.isdeleted = 0 then u.audit_status end) AS unVerified,\ncount(1) total\nfrom sc_user u\n```\n\n10. Windows下安装MySQL5.6 zip版\n\n参考：https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html\n\n \n\n \n\n11. yum默认安装的那个MySQL版本时间字段不支持update_time和create_time同时自动设置时间，建议手动安装MySQL5.6以上版本；\n\n \n\n12. MyBatis中取值时，#和$的区别\n\n\\#{} 这种取值是编译好SQL语句再取值 \n\n${} 这种是取值以后再去编译SQL语句\n\n动态拼接sql要用${}，${}会有SQL注入的风险\n\n参考：https://www.jianshu.com/p/b3b4a4fb8a54\n","slug":"mysql-notes","published":1,"updated":"2019-03-24T13:24:19.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpx003m05abbpb18350","content":"<ol>\n<li>centos下删除 卸载Mysql</li>\n</ol>\n<p>yum remove  mysql mysql-server mysql-libs mysql-server;<br>find / -name mysql 将找到的相关东西delete掉；</p>\n<p>rpm -qa|grep mysql(查询出来的东东yum remove掉)</p>\n<ol start=\"2\">\n<li>安装MySQL用户相关操作(%:通配符，此处表示允许该用户通过任意IP连接到数据库)：</li>\n</ol>\n<p>设置 root 密码：SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘newpass’);<br>创建用户：CREATE USER ‘username‘@’localhost’ IDENTIFIED BY ‘password’; 例：CREATE USER ‘admin‘@’%’ IDENTIFIED BY ‘123456’;<br>用户授权：GRANT privileges ON databasename.tablename TO ‘username‘@’host’; 例：GRANT ALL ON db1.* TO ‘admin‘@’%’;<br>删除用户：drop user ‘username‘@’localhost’; 例：drop user ‘admin‘@’%’;<br>查询用户：SELECT User, Host, Password FROM mysql.user;<br>刷新权限：flush privileges;<br>停止MySQL：/etc/init.d/mysqld stop<br>重启MySQL：/etc/init.d/mysqld restart<br>       或：service mysqld restart<br>启动MySQL：service mysqld start<br>查看是否有与MySQL相关的软件：rpm -qa | grep -i mysql<br>卸载相关软件：yum remove mysql mysql-server mysql-libs mysql-server<br>参考：<a href=\"https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html</a><br>      <a href=\"https://zhidao.baidu.com/question/1603863845338636507.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/1603863845338636507.html</a><br>      <a href=\"http://www.cnblogs.com/snake-hand/p/3157247.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snake-hand/p/3157247.html</a><br>      <a href=\"http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html</a><br>      <a href=\"http://www.jianshu.com/p/d7b9c468f20d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/d7b9c468f20d</a><br>      <a href=\"http://blog.csdn.net/dbanote/article/details/12911851\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dbanote/article/details/12911851</a></p>\n<ol start=\"3\">\n<li>登录MySQL(注意无空格)：<br>本地登录：mysql -uroot -p123456 -P3306<br>远程登录：mysql -h192.168.1.2 -P3306 -uroot -p123456</li>\n</ol>\n<ol start=\"4\">\n<li>MySQL数据迁移(备份恢复)<br>导出全部数据：mysqldump -uroot -p123456 db1 &gt; db1.dump<br>只导出表结构：mysqldump -uroot -p123456 –no-data –databases db1 &gt; db1.dump<br>导出远程MySQL数据：mysqldump -h192.168.1.2 -P3306 -uroot -p123456 db1 &gt; db1.dump<br>导入：先创建目标数据库(create database db1;)，然后mysql -uroot -p123456 db1 &lt; db1.dump<br>附：删除数据库：drop database db1;</li>\n</ol>\n<ol start=\"5\">\n<li>MySQL部分迁移<br>选择某个数据库：use db1;<br>导出指定数据到文件：select * into OUTFILE ‘t1’ from table1 where id in(2,3,5);<br>导入数据文件到数据库：LOAD DATA INFILE ‘t1’ INTO TABLE t1;</li>\n</ol>\n<ol start=\"6\">\n<li>MySQL-Linux通用版安装<br>该方法可以解决很多使用普通安装方式安装遇到的问题</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/iaiot/article/details/80737630\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/80737630</a></p>\n<ol start=\"7\">\n<li>修改MySQL自增ID起始值:</li>\n</ol>\n<p>alter table users AUTO_INCREMENT=1;</p>\n<ol start=\"8\">\n<li>MySQL时间戳 时间查询转换</li>\n</ol>\n<p>时间转时间戳：select UNIX_TIMESTAMP(update_time) from table1;</p>\n<p>时间戳转时间：select FROM_UNIXTIME(create_time) from table1;</p>\n<ol start=\"9\">\n<li><p>MySQL一次查询统计多条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">1</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> verified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">2</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> disVerified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">0</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> unVerified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"number\">1</span>) total</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc_user u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Windows下安装MySQL5.6 zip版</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html</a></p>\n<ol start=\"11\">\n<li>yum默认安装的那个MySQL版本时间字段不支持update_time和create_time同时自动设置时间，建议手动安装MySQL5.6以上版本；</li>\n</ol>\n<ol start=\"12\">\n<li>MyBatis中取值时，#和$的区别</li>\n</ol>\n<p>#{} 这种取值是编译好SQL语句再取值 </p>\n<p>${} 这种是取值以后再去编译SQL语句</p>\n<p>动态拼接sql要用${}，${}会有SQL注入的风险</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/b3b4a4fb8a54\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b3b4a4fb8a54</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>centos下删除 卸载Mysql</li>\n</ol>\n<p>yum remove  mysql mysql-server mysql-libs mysql-server;<br>find / -name mysql 将找到的相关东西delete掉；</p>\n<p>rpm -qa|grep mysql(查询出来的东东yum remove掉)</p>\n<ol start=\"2\">\n<li>安装MySQL用户相关操作(%:通配符，此处表示允许该用户通过任意IP连接到数据库)：</li>\n</ol>\n<p>设置 root 密码：SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘newpass’);<br>创建用户：CREATE USER ‘username‘@’localhost’ IDENTIFIED BY ‘password’; 例：CREATE USER ‘admin‘@’%’ IDENTIFIED BY ‘123456’;<br>用户授权：GRANT privileges ON databasename.tablename TO ‘username‘@’host’; 例：GRANT ALL ON db1.* TO ‘admin‘@’%’;<br>删除用户：drop user ‘username‘@’localhost’; 例：drop user ‘admin‘@’%’;<br>查询用户：SELECT User, Host, Password FROM mysql.user;<br>刷新权限：flush privileges;<br>停止MySQL：/etc/init.d/mysqld stop<br>重启MySQL：/etc/init.d/mysqld restart<br>       或：service mysqld restart<br>启动MySQL：service mysqld start<br>查看是否有与MySQL相关的软件：rpm -qa | grep -i mysql<br>卸载相关软件：yum remove mysql mysql-server mysql-libs mysql-server<br>参考：<a href=\"https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html</a><br>      <a href=\"https://zhidao.baidu.com/question/1603863845338636507.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/1603863845338636507.html</a><br>      <a href=\"http://www.cnblogs.com/snake-hand/p/3157247.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snake-hand/p/3157247.html</a><br>      <a href=\"http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html</a><br>      <a href=\"http://www.jianshu.com/p/d7b9c468f20d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/d7b9c468f20d</a><br>      <a href=\"http://blog.csdn.net/dbanote/article/details/12911851\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dbanote/article/details/12911851</a></p>\n<ol start=\"3\">\n<li>登录MySQL(注意无空格)：<br>本地登录：mysql -uroot -p123456 -P3306<br>远程登录：mysql -h192.168.1.2 -P3306 -uroot -p123456</li>\n</ol>\n<ol start=\"4\">\n<li>MySQL数据迁移(备份恢复)<br>导出全部数据：mysqldump -uroot -p123456 db1 &gt; db1.dump<br>只导出表结构：mysqldump -uroot -p123456 –no-data –databases db1 &gt; db1.dump<br>导出远程MySQL数据：mysqldump -h192.168.1.2 -P3306 -uroot -p123456 db1 &gt; db1.dump<br>导入：先创建目标数据库(create database db1;)，然后mysql -uroot -p123456 db1 &lt; db1.dump<br>附：删除数据库：drop database db1;</li>\n</ol>\n<ol start=\"5\">\n<li>MySQL部分迁移<br>选择某个数据库：use db1;<br>导出指定数据到文件：select * into OUTFILE ‘t1’ from table1 where id in(2,3,5);<br>导入数据文件到数据库：LOAD DATA INFILE ‘t1’ INTO TABLE t1;</li>\n</ol>\n<ol start=\"6\">\n<li>MySQL-Linux通用版安装<br>该方法可以解决很多使用普通安装方式安装遇到的问题</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/iaiot/article/details/80737630\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/80737630</a></p>\n<ol start=\"7\">\n<li>修改MySQL自增ID起始值:</li>\n</ol>\n<p>alter table users AUTO_INCREMENT=1;</p>\n<ol start=\"8\">\n<li>MySQL时间戳 时间查询转换</li>\n</ol>\n<p>时间转时间戳：select UNIX_TIMESTAMP(update_time) from table1;</p>\n<p>时间戳转时间：select FROM_UNIXTIME(create_time) from table1;</p>\n<ol start=\"9\">\n<li><p>MySQL一次查询统计多条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">1</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> verified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">2</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> disVerified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> u.audit_status = <span class=\"number\">0</span> <span class=\"keyword\">AND</span> u.isdeleted = <span class=\"number\">0</span> <span class=\"keyword\">then</span> u.audit_status <span class=\"keyword\">end</span>) <span class=\"keyword\">AS</span> unVerified,</span><br><span class=\"line\"><span class=\"keyword\">count</span>(<span class=\"number\">1</span>) total</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc_user u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Windows下安装MySQL5.6 zip版</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html</a></p>\n<ol start=\"11\">\n<li>yum默认安装的那个MySQL版本时间字段不支持update_time和create_time同时自动设置时间，建议手动安装MySQL5.6以上版本；</li>\n</ol>\n<ol start=\"12\">\n<li>MyBatis中取值时，#和$的区别</li>\n</ol>\n<p>#{} 这种取值是编译好SQL语句再取值 </p>\n<p>${} 这种是取值以后再去编译SQL语句</p>\n<p>动态拼接sql要用${}，${}会有SQL注入的风险</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/b3b4a4fb8a54\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b3b4a4fb8a54</a></p>\n"},{"post_url":"nginx-agent","title":"用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1","date":"2018-08-01T09:11:10.000Z","_content":"用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1，而不是在域名解析里解析域名。\n\n原因：1.请求会白转一大圈再回去，浪费时间和资源。\n\n2.如果有恶意攻击，攻击请求先到了nginx，然后nginx再把这个攻击请求往外转，如果是用的百度云服务器，他会认为这台机器是攻击源，严重的会被他关停服务器ip。。。\n\n亲身经历的攻击内容如下：\n```\nu'180.76.*.*'\nu'124.128.*.*'\nu'Mon, 23 Jul 2017 20:39:34 GMT'\nu'Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1 LVS inf-ssl-duty-scan'\nu'http://message.api.iaiot.com/login?next=-9422%22%20UNION%20ALL%20SELECT%208239%2C%208239%2C%208239%2C%208239%23'\nu''\nu'GET'\nu'sqli_sandbox'\n```","source":"_posts/nginx-agent.md","raw":"---\npost_url: nginx-agent\ntitle: 用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1\ndate: 2018-08-01 17:11:10\ntags: nginx\n---\n用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1，而不是在域名解析里解析域名。\n\n原因：1.请求会白转一大圈再回去，浪费时间和资源。\n\n2.如果有恶意攻击，攻击请求先到了nginx，然后nginx再把这个攻击请求往外转，如果是用的百度云服务器，他会认为这台机器是攻击源，严重的会被他关停服务器ip。。。\n\n亲身经历的攻击内容如下：\n```\nu'180.76.*.*'\nu'124.128.*.*'\nu'Mon, 23 Jul 2017 20:39:34 GMT'\nu'Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1 LVS inf-ssl-duty-scan'\nu'http://message.api.iaiot.com/login?next=-9422%22%20UNION%20ALL%20SELECT%208239%2C%208239%2C%208239%2C%208239%23'\nu''\nu'GET'\nu'sqli_sandbox'\n```","slug":"nginx-agent","published":1,"updated":"2019-03-24T13:43:47.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtpy003o05ab77augpjz","content":"<p>用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1，而不是在域名解析里解析域名。</p>\n<p>原因：1.请求会白转一大圈再回去，浪费时间和资源。</p>\n<p>2.如果有恶意攻击，攻击请求先到了nginx，然后nginx再把这个攻击请求往外转，如果是用的百度云服务器，他会认为这台机器是攻击源，严重的会被他关停服务器ip。。。</p>\n<p>亲身经历的攻击内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u&apos;180.76.*.*&apos;</span><br><span class=\"line\">u&apos;124.128.*.*&apos;</span><br><span class=\"line\">u&apos;Mon, 23 Jul 2017 20:39:34 GMT&apos;</span><br><span class=\"line\">u&apos;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1 LVS inf-ssl-duty-scan&apos;</span><br><span class=\"line\">u&apos;http://message.api.iaiot.com/login?next=-9422%22%20UNION%20ALL%20SELECT%208239%2C%208239%2C%208239%2C%208239%23&apos;</span><br><span class=\"line\">u&apos;&apos;</span><br><span class=\"line\">u&apos;GET&apos;</span><br><span class=\"line\">u&apos;sqli_sandbox&apos;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>用nginx等做代理转发到本机时最好通过host配置目的地址为127.0.0.1，而不是在域名解析里解析域名。</p>\n<p>原因：1.请求会白转一大圈再回去，浪费时间和资源。</p>\n<p>2.如果有恶意攻击，攻击请求先到了nginx，然后nginx再把这个攻击请求往外转，如果是用的百度云服务器，他会认为这台机器是攻击源，严重的会被他关停服务器ip。。。</p>\n<p>亲身经历的攻击内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u&apos;180.76.*.*&apos;</span><br><span class=\"line\">u&apos;124.128.*.*&apos;</span><br><span class=\"line\">u&apos;Mon, 23 Jul 2017 20:39:34 GMT&apos;</span><br><span class=\"line\">u&apos;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1 LVS inf-ssl-duty-scan&apos;</span><br><span class=\"line\">u&apos;http://message.api.iaiot.com/login?next=-9422%22%20UNION%20ALL%20SELECT%208239%2C%208239%2C%208239%2C%208239%23&apos;</span><br><span class=\"line\">u&apos;&apos;</span><br><span class=\"line\">u&apos;GET&apos;</span><br><span class=\"line\">u&apos;sqli_sandbox&apos;</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"mybaits-int","title":"mybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\"> Java 移除 JSONObject 空值字段","date":"2018-12-13T11:15:54.000Z","_content":"\nmybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\">\n\n只能 <if test=\"sub_name != null\">\n\n如果 <if '' != field_name\"> ，值为 0 时 if 条件为 false\n\n可以直接在代码中移除空值字段\n```java\n    /**\n     * 移除空值字段\n     *\n     * @param json json\n     */\n    public static void rmEmptyField(JSONObject json) {\n        if (json != null) {\n            // 遍历 json 副本，修改原 json，防止 ConcurrentModificationException\n            JSONObject jsonCopy = (JSONObject) json.clone();\n            Set<String> jsonKeys = jsonCopy.keySet();\n            for (String jsonKey : jsonKeys) {\n                // 移除空值字段\n                if (json.getString(jsonKey) == null || \"\".equals(json.getString(jsonKey).trim())) {\n                    json.remove(jsonKey);\n                    continue;\n                }\n            }\n        }\n    }\n```","source":"_posts/mybaits-int.md","raw":"---\npost_url: mybaits-int\ntitle: mybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\"> Java 移除 JSONObject 空值字段\ndate: 2018-12-13 19:15:54\ntags: mybaits\n---\n\nmybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\">\n\n只能 <if test=\"sub_name != null\">\n\n如果 <if '' != field_name\"> ，值为 0 时 if 条件为 false\n\n可以直接在代码中移除空值字段\n```java\n    /**\n     * 移除空值字段\n     *\n     * @param json json\n     */\n    public static void rmEmptyField(JSONObject json) {\n        if (json != null) {\n            // 遍历 json 副本，修改原 json，防止 ConcurrentModificationException\n            JSONObject jsonCopy = (JSONObject) json.clone();\n            Set<String> jsonKeys = jsonCopy.keySet();\n            for (String jsonKey : jsonKeys) {\n                // 移除空值字段\n                if (json.getString(jsonKey) == null || \"\".equals(json.getString(jsonKey).trim())) {\n                    json.remove(jsonKey);\n                    continue;\n                }\n            }\n        }\n    }\n```","slug":"mybaits-int","published":1,"updated":"2019-03-24T09:37:30.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtq0003r05abolejx6qm","content":"<p>mybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\"></if></p>\n<p>只能 <if test=\"sub_name != null\"></if></p>\n<p>如果 &lt;if ‘’ != field_name”&gt; ，值为 0 时 if 条件为 false</p>\n<p>可以直接在代码中移除空值字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除空值字段</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> json json</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rmEmptyField</span><span class=\"params\">(JSONObject json)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (json != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历 json 副本，修改原 json，防止 ConcurrentModificationException</span></span><br><span class=\"line\">        JSONObject jsonCopy = (JSONObject) json.clone();</span><br><span class=\"line\">        Set&lt;String&gt; jsonKeys = jsonCopy.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String jsonKey : jsonKeys) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除空值字段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (json.getString(jsonKey) == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(json.getString(jsonKey).trim())) &#123;</span><br><span class=\"line\">                json.remove(jsonKey);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>mybaits int 类型的字段不能 <if test=\"sub_name != null and '' != field_name\"></if></p>\n<p>只能 <if test=\"sub_name != null\"></if></p>\n<p>如果 &lt;if ‘’ != field_name”&gt; ，值为 0 时 if 条件为 false</p>\n<p>可以直接在代码中移除空值字段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除空值字段</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> json json</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rmEmptyField</span><span class=\"params\">(JSONObject json)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (json != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历 json 副本，修改原 json，防止 ConcurrentModificationException</span></span><br><span class=\"line\">        JSONObject jsonCopy = (JSONObject) json.clone();</span><br><span class=\"line\">        Set&lt;String&gt; jsonKeys = jsonCopy.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String jsonKey : jsonKeys) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除空值字段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (json.getString(jsonKey) == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(json.getString(jsonKey).trim())) &#123;</span><br><span class=\"line\">                json.remove(jsonKey);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"post_url":"nginx-notes","title":"Nginx 笔记","date":"2018-11-20T13:34:01.000Z","_content":"安装：http://blog.csdn.net/gaojinshan/article/details/37603157\n\n其中安装时如果需要ssl：./configure --with-http_ssl_module\n\n卸载：直接rm -rf find出来的nginx目录即可\n启动：/usr/local/nginx/sbin/下./nginx\n验证配置文件是否正确：./nginx -t\n重启：./nginx -s reload\n停止：./nginx -s stop\n参考：http://www.cnblogs.com/codingcloud/p/5095066.html\n根据域名访问系统指定目录下的静态文件：nginx.conf中配置root和server_name\n例：root /data/wwwroot/html001; server_name www.aaa.com;\n查看nginx编译安装信息：nginx -V\n已装nginx添加新模块：nginx -V得到的编译参数加上需要新加的模块./configure...  make(切勿make install)  替换sbin/nginx文件\n参考：http://www.cnblogs.com/lixigang/articles/5130052.html\nNginx编译选项及常用指令：http://www.runoob.com/w3cnote/nginx-install-and-config.html\n","source":"_posts/nginx-notes.md","raw":"---\npost_url: nginx-notes\ntitle: Nginx 笔记\ndate: 2018-11-20 21:34:01\ntags: nginx\n---\n安装：http://blog.csdn.net/gaojinshan/article/details/37603157\n\n其中安装时如果需要ssl：./configure --with-http_ssl_module\n\n卸载：直接rm -rf find出来的nginx目录即可\n启动：/usr/local/nginx/sbin/下./nginx\n验证配置文件是否正确：./nginx -t\n重启：./nginx -s reload\n停止：./nginx -s stop\n参考：http://www.cnblogs.com/codingcloud/p/5095066.html\n根据域名访问系统指定目录下的静态文件：nginx.conf中配置root和server_name\n例：root /data/wwwroot/html001; server_name www.aaa.com;\n查看nginx编译安装信息：nginx -V\n已装nginx添加新模块：nginx -V得到的编译参数加上需要新加的模块./configure...  make(切勿make install)  替换sbin/nginx文件\n参考：http://www.cnblogs.com/lixigang/articles/5130052.html\nNginx编译选项及常用指令：http://www.runoob.com/w3cnote/nginx-install-and-config.html\n","slug":"nginx-notes","published":1,"updated":"2019-03-24T10:06:14.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtq1003t05abbd5aemt2","content":"<p>安装：<a href=\"http://blog.csdn.net/gaojinshan/article/details/37603157\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gaojinshan/article/details/37603157</a></p>\n<p>其中安装时如果需要ssl：./configure –with-http_ssl_module</p>\n<p>卸载：直接rm -rf find出来的nginx目录即可<br>启动：/usr/local/nginx/sbin/下./nginx<br>验证配置文件是否正确：./nginx -t<br>重启：./nginx -s reload<br>停止：./nginx -s stop<br>参考：<a href=\"http://www.cnblogs.com/codingcloud/p/5095066.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/codingcloud/p/5095066.html</a><br>根据域名访问系统指定目录下的静态文件：nginx.conf中配置root和server_name<br>例：root /data/wwwroot/html001; server_name <a href=\"http://www.aaa.com\" target=\"_blank\" rel=\"noopener\">www.aaa.com</a>;<br>查看nginx编译安装信息：nginx -V<br>已装nginx添加新模块：nginx -V得到的编译参数加上需要新加的模块./configure…  make(切勿make install)  替换sbin/nginx文件<br>参考：<a href=\"http://www.cnblogs.com/lixigang/articles/5130052.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lixigang/articles/5130052.html</a><br>Nginx编译选项及常用指令：<a href=\"http://www.runoob.com/w3cnote/nginx-install-and-config.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/w3cnote/nginx-install-and-config.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装：<a href=\"http://blog.csdn.net/gaojinshan/article/details/37603157\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gaojinshan/article/details/37603157</a></p>\n<p>其中安装时如果需要ssl：./configure –with-http_ssl_module</p>\n<p>卸载：直接rm -rf find出来的nginx目录即可<br>启动：/usr/local/nginx/sbin/下./nginx<br>验证配置文件是否正确：./nginx -t<br>重启：./nginx -s reload<br>停止：./nginx -s stop<br>参考：<a href=\"http://www.cnblogs.com/codingcloud/p/5095066.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/codingcloud/p/5095066.html</a><br>根据域名访问系统指定目录下的静态文件：nginx.conf中配置root和server_name<br>例：root /data/wwwroot/html001; server_name <a href=\"http://www.aaa.com\" target=\"_blank\" rel=\"noopener\">www.aaa.com</a>;<br>查看nginx编译安装信息：nginx -V<br>已装nginx添加新模块：nginx -V得到的编译参数加上需要新加的模块./configure…  make(切勿make install)  替换sbin/nginx文件<br>参考：<a href=\"http://www.cnblogs.com/lixigang/articles/5130052.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lixigang/articles/5130052.html</a><br>Nginx编译选项及常用指令：<a href=\"http://www.runoob.com/w3cnote/nginx-install-and-config.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/w3cnote/nginx-install-and-config.html</a></p>\n"},{"title":"webstorm 下 angular 英雄指南 报 Tslint Error:Could not find custom rule directory:node_modules/codelyzer","post_url":"node_modules-codelyzer","date":"2018-11-22T06:11:36.000Z","_content":"package.json 中 devDependencies 下添加 \"codelyzer\": \"~4.5.0\" \n\n然后 npm install 即可","source":"_posts/node-modules-codelyzer.md","raw":"---\ntitle: webstorm 下 angular 英雄指南 报 Tslint Error:Could not find custom rule directory:node_modules/codelyzer\npost_url: node_modules-codelyzer\ndate: 2018-11-22 14:11:36\ntags: angular\n---\npackage.json 中 devDependencies 下添加 \"codelyzer\": \"~4.5.0\" \n\n然后 npm install 即可","slug":"node-modules-codelyzer","published":1,"updated":"2019-03-24T10:00:23.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqr005y05abkxkfg9cr","content":"<p>package.json 中 devDependencies 下添加 “codelyzer”: “~4.5.0” </p>\n<p>然后 npm install 即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>package.json 中 devDependencies 下添加 “codelyzer”: “~4.5.0” </p>\n<p>然后 npm install 即可</p>\n"},{"post_url":"IntelliJ-IDEA-For-Mac","title":"『转载』IntelliJ IDEA For Mac 快捷键","date":"2018-10-12T12:50:47.000Z","_content":"原文地址：https://www.cnblogs.com/exmyth/p/5949192.html\n\nhttp://www.cnblogs.com/wxd0108/p/5295017.html\n\nMac键盘符号和修饰键说明\n\n⌘ Command\n⇧ Shift\n⌥ Option\n⌃ Control\n↩︎ Return/Enter\n⌫ Delete\n⌦ 向前删除键（Fn+Delete）\n↑ 上箭头\n↓ 下箭头\n← 左箭头\n→ 右箭头\n⇞ Page Up（Fn+↑）\n⇟ Page Down（Fn+↓）\nHome Fn + ←\nEnd Fn + →\n⇥ 右制表符（Tab键）\n⇤ 左制表符（Shift+Tab）\n⎋ Escape (Esc)\n## Editing（编辑）\n\n⌃Space 基本的代码补全（补全任何类、方法、变量）\n⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）\n⌘⇧↩ 自动结束代码，行末自动添加分号\n⌘P 显示方法的参数信息\n⌃J, Mid. button click 快速查看文档\n⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n⌘+鼠标放在代码上 显示代码简要信息\n⌘F1 在错误或警告处显示具体描述信息\n⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n⌃O 覆盖方法（重写父类方法）\n⌃I 实现方法（实现接口中的方法）\n⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n⌘/ 注释/取消注释与行注释\n⌘⌥/ 注释/取消注释与块注释\n⌥↑ 连续选中代码块\n⌥↓ 减少当前选中的代码块\n⌃⇧Q 显示上下文信息\n⌥↩ 显示意向动作和快速修复代码\n⌘⌥L 格式化代码\n⌃⌥O 优化import\n⌃⌥I 自动缩进线\n⇥ / ⇧⇥ 缩进代码 / 反缩进代码\n⌘X 剪切当前行或选定的块到剪贴板\n⌘C 复制当前行或选定的块到剪贴板\n⌘V 从剪贴板粘贴\n⌘⇧V 从最近的缓冲区粘贴\n⌘D 复制当前行或选定的块\n⌘⌫ 删除当前行或选定的块的行\n⌃⇧J 智能的将代码拼接成一行\n⌘↩ 智能的拆分拼接的行\n⇧↩ 开始新的一行\n⌘⇧U 大小写切换\n⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始\n⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n⌥⌫ 删除到单词的开头\n⌘+ / ⌘- 展开 / 折叠代码块\n⌘⇧+ 展开所以代码块\n⌘⇧- 折叠所有代码块\n⌘W 关闭活动的编辑器选项卡\n## Search/Replace（查询/替换）\n\nDouble ⇧ 查询任何东西\n⌘F 文件内查找\n⌘G 查找模式下，向下查找\n⌘⇧G 查找模式下，向上查找\n⌘R 文件内替换\n⌘⇧F 全局查找（根据路径）\n⌘⇧R 全局替换（根据路径）\n⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n## Usage Search（使用查询）\n\n⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法\n⌘⇧F7 在文件中突出显示的用法\n⌘⌥F7 显示用法\n## Compile and Run（编译和运行）\n\n⌘F9 编译Project\n⌘⇧F9 编译选择的文件、包或模块\n⌃⌥R 弹出 Run 的可选择菜单\n⌃⌥D 弹出 Debug 的可选择菜单\n⌃R 运行\n⌃D 调试\n⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置\n## Debugging（调试）\n\nF8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\nF7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n⇧F8 跳出\n⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点\n⌥F8 计算表达式（可以更改变量值使其生效）\n⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n⌘⇧F8 查看断点信息\n## Navigation（导航）\n\n⌘O 查找类文件\n⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n⌘⌥O 前往指定的变量 / 方法\n⌃← / ⌃→ 左右切换打开的编辑tab页\nF12 返回到前一个工具窗口\n⎋ 从工具窗口进入代码文件窗口\n⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n⌘⇧F4 关闭活动run/messages/find/... tab\n⌘L 在当前文件跳转到某一行的指定处\n⌘E 显示最近打开的文件记录列表\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n⌘⇧⌫ 跳转到最后一个编辑的地方\n⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n⌃⇧B 跳转到类型声明处\n⌘U 前往当前光标所在方法的父类的方法 / 接口定义\n⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置\n⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置\n⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n⌃H 显示当前类的层次结构\n⌘⇧H 显示方法层次结构\n⌃⌥H 显示调用层次结构\nF2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置\nF4 / ⌘↓ 编辑/查看代码源\n⌥ Home 显示到当前文件的导航条\nF3选中文件/文件夹/代码行，添加/取消书签\n⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n⌃0...⌃9 定位到对应数值的书签位置\n⌘F3 显示所有书签\n## Refactoring（重构）\n\nF5 复制文件到指定目录\nF6 移动文件到指定目录\n⌘⌫ 在文件上为安全删除文件，弹出确认框\n⇧F6 重命名文件\n⌘F6 更改签名\n⌘⌥N 一致性\n⌘⌥M 将选中的代码提取为方法\n⌘⌥V 提取变量\n⌘⌥F 提取字段\n⌘⌥C 提取常量\n⌘⌥P 提取参数\n## VCS/Local History（版本控制/本地历史记录）\n\n⌘K 提交代码到版本控制器\n⌘T 从版本控制器更新代码\n⌥⇧C 查看最近的变更记录\n⌃C 快速弹出版本控制器操作面板\n## Live Templates（动态代码模板）\n\n⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住\n⌘J 插入自定义动态代码模板\n## General（通用）\n\n⌘1...⌘9 打开相应编号的工具窗口\n⌘S 保存所有\n⌘⌥Y 同步、刷新\n⌃⌘F 切换全屏模式\n⌘⇧F12 切换最大化编辑器\n⌥⇧F 添加到收藏夹\n⌥⇧I 检查当前文件与当前的配置文件\n§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）\n⌘, 打开IDEA系统设置\n⌘; 打开项目结构对话框\n⇧⌘A 查找动作（可设置相关选项）\n⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n## Other（一些官方文档上没有体现的快捷键）\n\n⌘⇧8 竖编辑模式\n \n\n## 导航\n⌘O 查找类文件 Ctrl + N\n\n⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N\n\n⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→\n\n⎋ 从工具窗口进入代码文件窗口 ESC\n\n⌘L 在当前文件跳转到某一行的指定处 Ctrl + G\n\n⌘E 显示最近打开的文件记录列表 Ctrl + E\n\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →\n\n⌘⇧⌫ 跳转到最后一个编辑的地方\n\n⌃H 显示当前类的层次结构 Ctrl + H\n\n⌘⇧H 显示方法层次结构\n\n⌃⌥H 显示调用层次结构\n\nF4 / ⌘↓ 编辑/查看代码源\n\n⌘⌥U 显示类UML图\n\n⌃J 查看注释\n\n## 编辑\n⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n⌥⌫ 删除到单词的开头\n⌘+ / ⌘- 展开 / 折叠代码块\n⌘F1 在错误或警告处显示具体描述信息\n⌘⌥L 格式化代码\n⌃⌥O 优化import\n⇧↩ 开始新的一行\n⌘⇧↩ 自动结束代码，行末自动添加分号\n⌃I 实现方法（实现接口中的方法）\n⇧F6 重命名文件或者变量\n⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n⌘P 显示方法的参数信息\n\n## 查找\nDouble⇧ 查找任何东西\n⌘⇧F 全局查找（根据路径）\n⌘F 文件内查找\n⌘G 查找模式下，向下查找\n⌘⇧G 查找模式下，向上查找\n\n## 导航\n⌘⌥B 跳转到接口的实现\n⌘U 查看接口定义\n\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n\n⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n⌃⇧B 跳转到类型声明处\n\n⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n\n⌘O 查找类文件\n⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n\nF12 返回到前一个工具窗口\n⎋ 从工具窗口进入代码文件窗口\n⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n\nF3选中文件/文件夹/代码行，添加/取消书签\n⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n⌃0…⌃9 定位到对应数值的书签位置\n⌘F3 显示所有书签\n\n⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n\n⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n## 通用\n⌃⌘F 切换全屏模式","source":"_posts/IntelliJ-IDEA-For-Mac.md","raw":"---\npost_url: IntelliJ-IDEA-For-Mac\ntitle: 『转载』IntelliJ IDEA For Mac 快捷键\ndate: 2018-10-12 20:50:47\ntags: [idea, mac]\n---\n原文地址：https://www.cnblogs.com/exmyth/p/5949192.html\n\nhttp://www.cnblogs.com/wxd0108/p/5295017.html\n\nMac键盘符号和修饰键说明\n\n⌘ Command\n⇧ Shift\n⌥ Option\n⌃ Control\n↩︎ Return/Enter\n⌫ Delete\n⌦ 向前删除键（Fn+Delete）\n↑ 上箭头\n↓ 下箭头\n← 左箭头\n→ 右箭头\n⇞ Page Up（Fn+↑）\n⇟ Page Down（Fn+↓）\nHome Fn + ←\nEnd Fn + →\n⇥ 右制表符（Tab键）\n⇤ 左制表符（Shift+Tab）\n⎋ Escape (Esc)\n## Editing（编辑）\n\n⌃Space 基本的代码补全（补全任何类、方法、变量）\n⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）\n⌘⇧↩ 自动结束代码，行末自动添加分号\n⌘P 显示方法的参数信息\n⌃J, Mid. button click 快速查看文档\n⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n⌘+鼠标放在代码上 显示代码简要信息\n⌘F1 在错误或警告处显示具体描述信息\n⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n⌃O 覆盖方法（重写父类方法）\n⌃I 实现方法（实现接口中的方法）\n⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n⌘/ 注释/取消注释与行注释\n⌘⌥/ 注释/取消注释与块注释\n⌥↑ 连续选中代码块\n⌥↓ 减少当前选中的代码块\n⌃⇧Q 显示上下文信息\n⌥↩ 显示意向动作和快速修复代码\n⌘⌥L 格式化代码\n⌃⌥O 优化import\n⌃⌥I 自动缩进线\n⇥ / ⇧⇥ 缩进代码 / 反缩进代码\n⌘X 剪切当前行或选定的块到剪贴板\n⌘C 复制当前行或选定的块到剪贴板\n⌘V 从剪贴板粘贴\n⌘⇧V 从最近的缓冲区粘贴\n⌘D 复制当前行或选定的块\n⌘⌫ 删除当前行或选定的块的行\n⌃⇧J 智能的将代码拼接成一行\n⌘↩ 智能的拆分拼接的行\n⇧↩ 开始新的一行\n⌘⇧U 大小写切换\n⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始\n⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n⌥⌫ 删除到单词的开头\n⌘+ / ⌘- 展开 / 折叠代码块\n⌘⇧+ 展开所以代码块\n⌘⇧- 折叠所有代码块\n⌘W 关闭活动的编辑器选项卡\n## Search/Replace（查询/替换）\n\nDouble ⇧ 查询任何东西\n⌘F 文件内查找\n⌘G 查找模式下，向下查找\n⌘⇧G 查找模式下，向上查找\n⌘R 文件内替换\n⌘⇧F 全局查找（根据路径）\n⌘⇧R 全局替换（根据路径）\n⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n## Usage Search（使用查询）\n\n⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法\n⌘⇧F7 在文件中突出显示的用法\n⌘⌥F7 显示用法\n## Compile and Run（编译和运行）\n\n⌘F9 编译Project\n⌘⇧F9 编译选择的文件、包或模块\n⌃⌥R 弹出 Run 的可选择菜单\n⌃⌥D 弹出 Debug 的可选择菜单\n⌃R 运行\n⌃D 调试\n⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置\n## Debugging（调试）\n\nF8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\nF7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n⇧F8 跳出\n⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点\n⌥F8 计算表达式（可以更改变量值使其生效）\n⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n⌘⇧F8 查看断点信息\n## Navigation（导航）\n\n⌘O 查找类文件\n⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n⌘⌥O 前往指定的变量 / 方法\n⌃← / ⌃→ 左右切换打开的编辑tab页\nF12 返回到前一个工具窗口\n⎋ 从工具窗口进入代码文件窗口\n⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n⌘⇧F4 关闭活动run/messages/find/... tab\n⌘L 在当前文件跳转到某一行的指定处\n⌘E 显示最近打开的文件记录列表\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n⌘⇧⌫ 跳转到最后一个编辑的地方\n⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n⌃⇧B 跳转到类型声明处\n⌘U 前往当前光标所在方法的父类的方法 / 接口定义\n⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置\n⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置\n⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n⌃H 显示当前类的层次结构\n⌘⇧H 显示方法层次结构\n⌃⌥H 显示调用层次结构\nF2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置\nF4 / ⌘↓ 编辑/查看代码源\n⌥ Home 显示到当前文件的导航条\nF3选中文件/文件夹/代码行，添加/取消书签\n⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n⌃0...⌃9 定位到对应数值的书签位置\n⌘F3 显示所有书签\n## Refactoring（重构）\n\nF5 复制文件到指定目录\nF6 移动文件到指定目录\n⌘⌫ 在文件上为安全删除文件，弹出确认框\n⇧F6 重命名文件\n⌘F6 更改签名\n⌘⌥N 一致性\n⌘⌥M 将选中的代码提取为方法\n⌘⌥V 提取变量\n⌘⌥F 提取字段\n⌘⌥C 提取常量\n⌘⌥P 提取参数\n## VCS/Local History（版本控制/本地历史记录）\n\n⌘K 提交代码到版本控制器\n⌘T 从版本控制器更新代码\n⌥⇧C 查看最近的变更记录\n⌃C 快速弹出版本控制器操作面板\n## Live Templates（动态代码模板）\n\n⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住\n⌘J 插入自定义动态代码模板\n## General（通用）\n\n⌘1...⌘9 打开相应编号的工具窗口\n⌘S 保存所有\n⌘⌥Y 同步、刷新\n⌃⌘F 切换全屏模式\n⌘⇧F12 切换最大化编辑器\n⌥⇧F 添加到收藏夹\n⌥⇧I 检查当前文件与当前的配置文件\n§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）\n⌘, 打开IDEA系统设置\n⌘; 打开项目结构对话框\n⇧⌘A 查找动作（可设置相关选项）\n⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n## Other（一些官方文档上没有体现的快捷键）\n\n⌘⇧8 竖编辑模式\n \n\n## 导航\n⌘O 查找类文件 Ctrl + N\n\n⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N\n\n⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→\n\n⎋ 从工具窗口进入代码文件窗口 ESC\n\n⌘L 在当前文件跳转到某一行的指定处 Ctrl + G\n\n⌘E 显示最近打开的文件记录列表 Ctrl + E\n\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →\n\n⌘⇧⌫ 跳转到最后一个编辑的地方\n\n⌃H 显示当前类的层次结构 Ctrl + H\n\n⌘⇧H 显示方法层次结构\n\n⌃⌥H 显示调用层次结构\n\nF4 / ⌘↓ 编辑/查看代码源\n\n⌘⌥U 显示类UML图\n\n⌃J 查看注释\n\n## 编辑\n⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）\n⌥⌫ 删除到单词的开头\n⌘+ / ⌘- 展开 / 折叠代码块\n⌘F1 在错误或警告处显示具体描述信息\n⌘⌥L 格式化代码\n⌃⌥O 优化import\n⇧↩ 开始新的一行\n⌘⇧↩ 自动结束代码，行末自动添加分号\n⌃I 实现方法（实现接口中的方法）\n⇧F6 重命名文件或者变量\n⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n⌘P 显示方法的参数信息\n\n## 查找\nDouble⇧ 查找任何东西\n⌘⇧F 全局查找（根据路径）\n⌘F 文件内查找\n⌘G 查找模式下，向下查找\n⌘⇧G 查找模式下，向上查找\n\n## 导航\n⌘⌥B 跳转到接口的实现\n⌘U 查看接口定义\n\n⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方\n\n⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处\n⌃⇧B 跳转到类型声明处\n\n⌥ Space, ⌘Y 快速打开光标所在方法、类的定义\n\n⌘O 查找类文件\n⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n\nF12 返回到前一个工具窗口\n⎋ 从工具窗口进入代码文件窗口\n⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n\nF3选中文件/文件夹/代码行，添加/取消书签\n⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签\n⌃0…⌃9 定位到对应数值的书签位置\n⌘F3 显示所有书签\n\n⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n\n⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n## 通用\n⌃⌘F 切换全屏模式","slug":"IntelliJ-IDEA-For-Mac","published":1,"updated":"2019-03-25T13:56:20.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqs005z05ab9lqycjkh","content":"<p>原文地址：<a href=\"https://www.cnblogs.com/exmyth/p/5949192.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/exmyth/p/5949192.html</a></p>\n<p><a href=\"http://www.cnblogs.com/wxd0108/p/5295017.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wxd0108/p/5295017.html</a></p>\n<p>Mac键盘符号和修饰键说明</p>\n<p>⌘ Command<br>⇧ Shift<br>⌥ Option<br>⌃ Control<br>↩︎ Return/Enter<br>⌫ Delete<br>⌦ 向前删除键（Fn+Delete）<br>↑ 上箭头<br>↓ 下箭头<br>← 左箭头<br>→ 右箭头<br>⇞ Page Up（Fn+↑）<br>⇟ Page Down（Fn+↓）<br>Home Fn + ←<br>End Fn + →<br>⇥ 右制表符（Tab键）<br>⇤ 左制表符（Shift+Tab）<br>⎋ Escape (Esc)</p>\n<h2 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h2><p>⌃Space 基本的代码补全（补全任何类、方法、变量）<br>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）<br>⌘⇧↩ 自动结束代码，行末自动添加分号<br>⌘P 显示方法的参数信息<br>⌃J, Mid. button click 快速查看文档<br>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）<br>⌘+鼠标放在代码上 显示代码简要信息<br>⌘F1 在错误或警告处显示具体描述信息<br>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）<br>⌃O 覆盖方法（重写父类方法）<br>⌃I 实现方法（实现接口中的方法）<br>⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）<br>⌘/ 注释/取消注释与行注释<br>⌘⌥/ 注释/取消注释与块注释<br>⌥↑ 连续选中代码块<br>⌥↓ 减少当前选中的代码块<br>⌃⇧Q 显示上下文信息<br>⌥↩ 显示意向动作和快速修复代码<br>⌘⌥L 格式化代码<br>⌃⌥O 优化import<br>⌃⌥I 自动缩进线<br>⇥ / ⇧⇥ 缩进代码 / 反缩进代码<br>⌘X 剪切当前行或选定的块到剪贴板<br>⌘C 复制当前行或选定的块到剪贴板<br>⌘V 从剪贴板粘贴<br>⌘⇧V 从最近的缓冲区粘贴<br>⌘D 复制当前行或选定的块<br>⌘⌫ 删除当前行或选定的块的行<br>⌃⇧J 智能的将代码拼接成一行<br>⌘↩ 智能的拆分拼接的行<br>⇧↩ 开始新的一行<br>⌘⇧U 大小写切换<br>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始<br>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）<br>⌥⌫ 删除到单词的开头<br>⌘+ / ⌘- 展开 / 折叠代码块<br>⌘⇧+ 展开所以代码块<br>⌘⇧- 折叠所有代码块<br>⌘W 关闭活动的编辑器选项卡</p>\n<h2 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h2><p>Double ⇧ 查询任何东西<br>⌘F 文件内查找<br>⌘G 查找模式下，向下查找<br>⌘⇧G 查找模式下，向上查找<br>⌘R 文件内替换<br>⌘⇧F 全局查找（根据路径）<br>⌘⇧R 全局替换（根据路径）<br>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）<br>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</p>\n<h2 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h2><p>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法<br>⌘⇧F7 在文件中突出显示的用法<br>⌘⌥F7 显示用法</p>\n<h2 id=\"Compile-and-Run（编译和运行）\"><a href=\"#Compile-and-Run（编译和运行）\" class=\"headerlink\" title=\"Compile and Run（编译和运行）\"></a>Compile and Run（编译和运行）</h2><p>⌘F9 编译Project<br>⌘⇧F9 编译选择的文件、包或模块<br>⌃⌥R 弹出 Run 的可选择菜单<br>⌃⌥D 弹出 Debug 的可选择菜单<br>⌃R 运行<br>⌃D 调试<br>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</p>\n<h2 id=\"Debugging（调试）\"><a href=\"#Debugging（调试）\" class=\"headerlink\" title=\"Debugging（调试）\"></a>Debugging（调试）</h2><p>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法<br>⇧F8 跳出<br>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点<br>⌥F8 计算表达式（可以更改变量值使其生效）<br>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上<br>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）<br>⌘⇧F8 查看断点信息</p>\n<h2 id=\"Navigation（导航）\"><a href=\"#Navigation（导航）\" class=\"headerlink\" title=\"Navigation（导航）\"></a>Navigation（导航）</h2><p>⌘O 查找类文件<br>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/<br>⌘⌥O 前往指定的变量 / 方法<br>⌃← / ⌃→ 左右切换打开的编辑tab页<br>F12 返回到前一个工具窗口<br>⎋ 从工具窗口进入代码文件窗口<br>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口<br>⌘⇧F4 关闭活动run/messages/find/… tab<br>⌘L 在当前文件跳转到某一行的指定处<br>⌘E 显示最近打开的文件记录列表<br>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方<br>⌘⇧⌫ 跳转到最后一个编辑的地方<br>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)<br>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处<br>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义<br>⌃⇧B 跳转到类型声明处<br>⌘U 前往当前光标所在方法的父类的方法 / 接口定义<br>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置<br>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置<br>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）<br>⌃H 显示当前类的层次结构<br>⌘⇧H 显示方法层次结构<br>⌃⌥H 显示调用层次结构<br>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置<br>F4 / ⌘↓ 编辑/查看代码源<br>⌥ Home 显示到当前文件的导航条<br>F3选中文件/文件夹/代码行，添加/取消书签<br>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签<br>⌃0…⌃9 定位到对应数值的书签位置<br>⌘F3 显示所有书签</p>\n<h2 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h2><p>F5 复制文件到指定目录<br>F6 移动文件到指定目录<br>⌘⌫ 在文件上为安全删除文件，弹出确认框<br>⇧F6 重命名文件<br>⌘F6 更改签名<br>⌘⌥N 一致性<br>⌘⌥M 将选中的代码提取为方法<br>⌘⌥V 提取变量<br>⌘⌥F 提取字段<br>⌘⌥C 提取常量<br>⌘⌥P 提取参数</p>\n<h2 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h2><p>⌘K 提交代码到版本控制器<br>⌘T 从版本控制器更新代码<br>⌥⇧C 查看最近的变更记录<br>⌃C 快速弹出版本控制器操作面板</p>\n<h2 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h2><p>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住<br>⌘J 插入自定义动态代码模板</p>\n<h2 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h2><p>⌘1…⌘9 打开相应编号的工具窗口<br>⌘S 保存所有<br>⌘⌥Y 同步、刷新<br>⌃⌘F 切换全屏模式<br>⌘⇧F12 切换最大化编辑器<br>⌥⇧F 添加到收藏夹<br>⌥⇧I 检查当前文件与当前的配置文件<br>§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）<br>⌘, 打开IDEA系统设置<br>⌘; 打开项目结构对话框<br>⇧⌘A 查找动作（可设置相关选项）<br>⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</p>\n<h2 id=\"Other（一些官方文档上没有体现的快捷键）\"><a href=\"#Other（一些官方文档上没有体现的快捷键）\" class=\"headerlink\" title=\"Other（一些官方文档上没有体现的快捷键）\"></a>Other（一些官方文档上没有体现的快捷键）</h2><p>⌘⇧8 竖编辑模式</p>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>⌘O 查找类文件 Ctrl + N</p>\n<p>⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N</p>\n<p>⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→</p>\n<p>⎋ 从工具窗口进入代码文件窗口 ESC</p>\n<p>⌘L 在当前文件跳转到某一行的指定处 Ctrl + G</p>\n<p>⌘E 显示最近打开的文件记录列表 Ctrl + E</p>\n<p>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</p>\n<p>⌘⇧⌫ 跳转到最后一个编辑的地方</p>\n<p>⌃H 显示当前类的层次结构 Ctrl + H</p>\n<p>⌘⇧H 显示方法层次结构</p>\n<p>⌃⌥H 显示调用层次结构</p>\n<p>F4 / ⌘↓ 编辑/查看代码源</p>\n<p>⌘⌥U 显示类UML图</p>\n<p>⌃J 查看注释</p>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><p>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）<br>⌥⌫ 删除到单词的开头<br>⌘+ / ⌘- 展开 / 折叠代码块<br>⌘F1 在错误或警告处显示具体描述信息<br>⌘⌥L 格式化代码<br>⌃⌥O 优化import<br>⇧↩ 开始新的一行<br>⌘⇧↩ 自动结束代码，行末自动添加分号<br>⌃I 实现方法（实现接口中的方法）<br>⇧F6 重命名文件或者变量<br>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）<br>⌘P 显示方法的参数信息</p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>Double⇧ 查找任何东西<br>⌘⇧F 全局查找（根据路径）<br>⌘F 文件内查找<br>⌘G 查找模式下，向下查找<br>⌘⇧G 查找模式下，向上查找</p>\n<h2 id=\"导航-1\"><a href=\"#导航-1\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>⌘⌥B 跳转到接口的实现<br>⌘U 查看接口定义</p>\n<p>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</p>\n<p>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处<br>⌃⇧B 跳转到类型声明处</p>\n<p>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</p>\n<p>⌘O 查找类文件<br>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</p>\n<p>F12 返回到前一个工具窗口<br>⎋ 从工具窗口进入代码文件窗口<br>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</p>\n<p>F3选中文件/文件夹/代码行，添加/取消书签<br>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签<br>⌃0…⌃9 定位到对应数值的书签位置<br>⌘F3 显示所有书签</p>\n<p>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</p>\n<p>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>⌃⌘F 切换全屏模式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://www.cnblogs.com/exmyth/p/5949192.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/exmyth/p/5949192.html</a></p>\n<p><a href=\"http://www.cnblogs.com/wxd0108/p/5295017.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wxd0108/p/5295017.html</a></p>\n<p>Mac键盘符号和修饰键说明</p>\n<p>⌘ Command<br>⇧ Shift<br>⌥ Option<br>⌃ Control<br>↩︎ Return/Enter<br>⌫ Delete<br>⌦ 向前删除键（Fn+Delete）<br>↑ 上箭头<br>↓ 下箭头<br>← 左箭头<br>→ 右箭头<br>⇞ Page Up（Fn+↑）<br>⇟ Page Down（Fn+↓）<br>Home Fn + ←<br>End Fn + →<br>⇥ 右制表符（Tab键）<br>⇤ 左制表符（Shift+Tab）<br>⎋ Escape (Esc)</p>\n<h2 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h2><p>⌃Space 基本的代码补全（补全任何类、方法、变量）<br>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）<br>⌘⇧↩ 自动结束代码，行末自动添加分号<br>⌘P 显示方法的参数信息<br>⌃J, Mid. button click 快速查看文档<br>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）<br>⌘+鼠标放在代码上 显示代码简要信息<br>⌘F1 在错误或警告处显示具体描述信息<br>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）<br>⌃O 覆盖方法（重写父类方法）<br>⌃I 实现方法（实现接口中的方法）<br>⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）<br>⌘/ 注释/取消注释与行注释<br>⌘⌥/ 注释/取消注释与块注释<br>⌥↑ 连续选中代码块<br>⌥↓ 减少当前选中的代码块<br>⌃⇧Q 显示上下文信息<br>⌥↩ 显示意向动作和快速修复代码<br>⌘⌥L 格式化代码<br>⌃⌥O 优化import<br>⌃⌥I 自动缩进线<br>⇥ / ⇧⇥ 缩进代码 / 反缩进代码<br>⌘X 剪切当前行或选定的块到剪贴板<br>⌘C 复制当前行或选定的块到剪贴板<br>⌘V 从剪贴板粘贴<br>⌘⇧V 从最近的缓冲区粘贴<br>⌘D 复制当前行或选定的块<br>⌘⌫ 删除当前行或选定的块的行<br>⌃⇧J 智能的将代码拼接成一行<br>⌘↩ 智能的拆分拼接的行<br>⇧↩ 开始新的一行<br>⌘⇧U 大小写切换<br>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始<br>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）<br>⌥⌫ 删除到单词的开头<br>⌘+ / ⌘- 展开 / 折叠代码块<br>⌘⇧+ 展开所以代码块<br>⌘⇧- 折叠所有代码块<br>⌘W 关闭活动的编辑器选项卡</p>\n<h2 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h2><p>Double ⇧ 查询任何东西<br>⌘F 文件内查找<br>⌘G 查找模式下，向下查找<br>⌘⇧G 查找模式下，向上查找<br>⌘R 文件内替换<br>⌘⇧F 全局查找（根据路径）<br>⌘⇧R 全局替换（根据路径）<br>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）<br>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</p>\n<h2 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h2><p>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法<br>⌘⇧F7 在文件中突出显示的用法<br>⌘⌥F7 显示用法</p>\n<h2 id=\"Compile-and-Run（编译和运行）\"><a href=\"#Compile-and-Run（编译和运行）\" class=\"headerlink\" title=\"Compile and Run（编译和运行）\"></a>Compile and Run（编译和运行）</h2><p>⌘F9 编译Project<br>⌘⇧F9 编译选择的文件、包或模块<br>⌃⌥R 弹出 Run 的可选择菜单<br>⌃⌥D 弹出 Debug 的可选择菜单<br>⌃R 运行<br>⌃D 调试<br>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</p>\n<h2 id=\"Debugging（调试）\"><a href=\"#Debugging（调试）\" class=\"headerlink\" title=\"Debugging（调试）\"></a>Debugging（调试）</h2><p>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法<br>⇧F8 跳出<br>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点<br>⌥F8 计算表达式（可以更改变量值使其生效）<br>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上<br>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）<br>⌘⇧F8 查看断点信息</p>\n<h2 id=\"Navigation（导航）\"><a href=\"#Navigation（导航）\" class=\"headerlink\" title=\"Navigation（导航）\"></a>Navigation（导航）</h2><p>⌘O 查找类文件<br>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/<br>⌘⌥O 前往指定的变量 / 方法<br>⌃← / ⌃→ 左右切换打开的编辑tab页<br>F12 返回到前一个工具窗口<br>⎋ 从工具窗口进入代码文件窗口<br>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口<br>⌘⇧F4 关闭活动run/messages/find/… tab<br>⌘L 在当前文件跳转到某一行的指定处<br>⌘E 显示最近打开的文件记录列表<br>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方<br>⌘⇧⌫ 跳转到最后一个编辑的地方<br>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)<br>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处<br>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义<br>⌃⇧B 跳转到类型声明处<br>⌘U 前往当前光标所在方法的父类的方法 / 接口定义<br>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置<br>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置<br>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）<br>⌃H 显示当前类的层次结构<br>⌘⇧H 显示方法层次结构<br>⌃⌥H 显示调用层次结构<br>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置<br>F4 / ⌘↓ 编辑/查看代码源<br>⌥ Home 显示到当前文件的导航条<br>F3选中文件/文件夹/代码行，添加/取消书签<br>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签<br>⌃0…⌃9 定位到对应数值的书签位置<br>⌘F3 显示所有书签</p>\n<h2 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h2><p>F5 复制文件到指定目录<br>F6 移动文件到指定目录<br>⌘⌫ 在文件上为安全删除文件，弹出确认框<br>⇧F6 重命名文件<br>⌘F6 更改签名<br>⌘⌥N 一致性<br>⌘⌥M 将选中的代码提取为方法<br>⌘⌥V 提取变量<br>⌘⌥F 提取字段<br>⌘⌥C 提取常量<br>⌘⌥P 提取参数</p>\n<h2 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h2><p>⌘K 提交代码到版本控制器<br>⌘T 从版本控制器更新代码<br>⌥⇧C 查看最近的变更记录<br>⌃C 快速弹出版本控制器操作面板</p>\n<h2 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h2><p>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住<br>⌘J 插入自定义动态代码模板</p>\n<h2 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h2><p>⌘1…⌘9 打开相应编号的工具窗口<br>⌘S 保存所有<br>⌘⌥Y 同步、刷新<br>⌃⌘F 切换全屏模式<br>⌘⇧F12 切换最大化编辑器<br>⌥⇧F 添加到收藏夹<br>⌥⇧I 检查当前文件与当前的配置文件<br>§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）<br>⌘, 打开IDEA系统设置<br>⌘; 打开项目结构对话框<br>⇧⌘A 查找动作（可设置相关选项）<br>⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</p>\n<h2 id=\"Other（一些官方文档上没有体现的快捷键）\"><a href=\"#Other（一些官方文档上没有体现的快捷键）\" class=\"headerlink\" title=\"Other（一些官方文档上没有体现的快捷键）\"></a>Other（一些官方文档上没有体现的快捷键）</h2><p>⌘⇧8 竖编辑模式</p>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>⌘O 查找类文件 Ctrl + N</p>\n<p>⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N</p>\n<p>⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→</p>\n<p>⎋ 从工具窗口进入代码文件窗口 ESC</p>\n<p>⌘L 在当前文件跳转到某一行的指定处 Ctrl + G</p>\n<p>⌘E 显示最近打开的文件记录列表 Ctrl + E</p>\n<p>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</p>\n<p>⌘⇧⌫ 跳转到最后一个编辑的地方</p>\n<p>⌃H 显示当前类的层次结构 Ctrl + H</p>\n<p>⌘⇧H 显示方法层次结构</p>\n<p>⌃⌥H 显示调用层次结构</p>\n<p>F4 / ⌘↓ 编辑/查看代码源</p>\n<p>⌘⌥U 显示类UML图</p>\n<p>⌃J 查看注释</p>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><p>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）<br>⌥⌫ 删除到单词的开头<br>⌘+ / ⌘- 展开 / 折叠代码块<br>⌘F1 在错误或警告处显示具体描述信息<br>⌘⌥L 格式化代码<br>⌃⌥O 优化import<br>⇧↩ 开始新的一行<br>⌘⇧↩ 自动结束代码，行末自动添加分号<br>⌃I 实现方法（实现接口中的方法）<br>⇧F6 重命名文件或者变量<br>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）<br>⌘P 显示方法的参数信息</p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>Double⇧ 查找任何东西<br>⌘⇧F 全局查找（根据路径）<br>⌘F 文件内查找<br>⌘G 查找模式下，向下查找<br>⌘⇧G 查找模式下，向上查找</p>\n<h2 id=\"导航-1\"><a href=\"#导航-1\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>⌘⌥B 跳转到接口的实现<br>⌘U 查看接口定义</p>\n<p>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</p>\n<p>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处<br>⌃⇧B 跳转到类型声明处</p>\n<p>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</p>\n<p>⌘O 查找类文件<br>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</p>\n<p>F12 返回到前一个工具窗口<br>⎋ 从工具窗口进入代码文件窗口<br>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</p>\n<p>F3选中文件/文件夹/代码行，添加/取消书签<br>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签<br>⌃0…⌃9 定位到对应数值的书签位置<br>⌘F3 显示所有书签</p>\n<p>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</p>\n<p>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>⌃⌘F 切换全屏模式</p>\n"},{"post_url":"docker-daemon","title":"docker daemon（dockerd） 配置文件 daemon.json","date":"2018-12-01T15:26:55.000Z","_content":"原文：https://docs.docker.com/engine/reference/commandline/dockerd/\n```\nUsage:\tdockerd COMMAND\n \nA self-sufficient runtime for containers.\n \nOptions:\n      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])\n      --allow-nondistributable-artifacts list Push nondistributable artifacts to specified registries (default [])\n      --api-cors-header string                Set CORS headers in the Engine API\n      --authorization-plugin list             Authorization plugins to load (default [])\n      --bip string                            Specify network bridge IP\n  -b, --bridge string                         Attach containers to a network bridge\n      --cgroup-parent string                  Set parent cgroup for all containers\n      --cluster-advertise string              Address or interface name to advertise\n      --cluster-store string                  URL of the distributed storage backend\n      --cluster-store-opt map                 Set cluster store options (default map[])\n      --config-file string                    Daemon configuration file (default \"/etc/docker/daemon.json\")\n      --containerd string                     Path to containerd socket\n      --cpu-rt-period int                     Limit the CPU real-time period in microseconds\n      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds\n      --data-root string                      Root directory of persistent Docker state (default \"/var/lib/docker\")\n  -D, --debug                                 Enable debug mode\n      --default-gateway ip                    Container default gateway IPv4 address\n      --default-gateway-v6 ip                 Container default gateway IPv6 address\n      --default-address-pool                  Set the default address pool for local node networks\n      --default-runtime string                Default OCI runtime for containers (default \"runc\")\n      --default-ulimit ulimit                 Default ulimits for containers (default [])\n      --dns list                              DNS server to use (default [])\n      --dns-opt list                          DNS options to use (default [])\n      --dns-search list                       DNS search domains to use (default [])\n      --exec-opt list                         Runtime execution options (default [])\n      --exec-root string                      Root directory for execution state files (default \"/var/run/docker\")\n      --experimental                          Enable experimental features\n      --fixed-cidr string                     IPv4 subnet for fixed IPs\n      --fixed-cidr-v6 string                  IPv6 subnet for fixed IPs\n  -G, --group string                          Group for the unix socket (default \"docker\")\n      --help                                  Print usage\n  -H, --host list                             Daemon socket(s) to connect to (default [])\n      --icc                                   Enable inter-container communication (default true)\n      --init                                  Run an init in the container to forward signals and reap processes\n      --init-path string                      Path to the docker-init binary\n      --insecure-registry list                Enable insecure registry communication (default [])\n      --ip ip                                 Default IP when binding container ports (default 0.0.0.0)\n      --ip-forward                            Enable net.ipv4.ip_forward (default true)\n      --ip-masq                               Enable IP masquerading (default true)\n      --iptables                              Enable addition of iptables rules (default true)\n      --ipv6                                  Enable IPv6 networking\n      --label list                            Set key=value labels to the daemon (default [])\n      --live-restore                          Enable live restore of docker when containers are still running\n      --log-driver string                     Default driver for container logs (default \"json-file\")\n  -l, --log-level string                      Set the logging level (\"debug\", \"info\", \"warn\", \"error\", \"fatal\") (default \"info\")\n      --log-opt map                           Default log driver options for containers (default map[])\n      --max-concurrent-downloads int          Set the max concurrent downloads for each pull (default 3)\n      --max-concurrent-uploads int            Set the max concurrent uploads for each push (default 5)\n      --metrics-addr string                   Set default address and port to serve the metrics api on\n      --mtu int                               Set the containers network MTU\n      --node-generic-resources list           Advertise user-defined resource\n      --no-new-privileges                     Set no-new-privileges by default for new containers\n      --oom-score-adjust int                  Set the oom_score_adj for the daemon (default -500)\n  -p, --pidfile string                        Path to use for daemon PID file (default \"/var/run/docker.pid\")\n      --raw-logs                              Full timestamps without ANSI coloring\n      --registry-mirror list                  Preferred Docker registry mirror (default [])\n      --seccomp-profile string                Path to seccomp profile\n      --selinux-enabled                       Enable selinux support\n      --shutdown-timeout int                  Set the default shutdown timeout (default 15)\n  -s, --storage-driver string                 Storage driver to use\n      --storage-opt list                      Storage driver options (default [])\n      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address\n      --tls                                   Use TLS; implied by --tlsverify\n      --tlscacert string                      Trust certs signed only by this CA (default \"~/.docker/ca.pem\")\n      --tlscert string                        Path to TLS certificate file (default \"~/.docker/cert.pem\")\n      --tlskey string                         Path to TLS key file (default ~/.docker/key.pem\")\n      --tlsverify                             Use TLS and verify the remote\n      --userland-proxy                        Use userland proxy for loopback traffic (default true)\n      --userland-proxy-path string            Path to the userland proxy binary\n      --userns-remap string                   User/Group setting for user namespaces\n  -v, --version                               Print version information and quit\n```\n\nLinux 上配置文件的默认位置是 /etc/docker/daemon.json。 --config-file 可用于指定非默认位置。\n\n这是 Linux 上允许的配置选项示例： \n```\n{\n\t\"authorization-plugins\": [],\n\t\"data-root\": \"\",\n\t\"dns\": [],\n\t\"dns-opts\": [],\n\t\"dns-search\": [],\n\t\"exec-opts\": [],\n\t\"exec-root\": \"\",\n\t\"experimental\": false,\n\t\"features\": {},\n\t\"storage-driver\": \"\",\n\t\"storage-opts\": [],\n\t\"labels\": [],\n\t\"live-restore\": true,\n\t\"log-driver\": \"\",\n\t\"log-opts\": {},\n\t\"mtu\": 0,\n\t\"pidfile\": \"\",\n\t\"cluster-store\": \"\",\n\t\"cluster-store-opts\": {},\n\t\"cluster-advertise\": \"\",\n\t\"max-concurrent-downloads\": 3,\n\t\"max-concurrent-uploads\": 5,\n\t\"default-shm-size\": \"64M\",\n\t\"shutdown-timeout\": 15,\n\t\"debug\": true,\n\t\"hosts\": [],\n\t\"log-level\": \"\",\n\t\"tls\": true,\n\t\"tlsverify\": true,\n\t\"tlscacert\": \"\",\n\t\"tlscert\": \"\",\n\t\"tlskey\": \"\",\n\t\"swarm-default-advertise-addr\": \"\",\n\t\"api-cors-header\": \"\",\n\t\"selinux-enabled\": false,\n\t\"userns-remap\": \"\",\n\t\"group\": \"\",\n\t\"cgroup-parent\": \"\",\n\t\"default-ulimits\": {\n\t\t\"nofile\": {\n\t\t\t\"Name\": \"nofile\",\n\t\t\t\"Hard\": 64000,\n\t\t\t\"Soft\": 64000\n\t\t}\n\t},\n\t\"init\": false,\n\t\"init-path\": \"/usr/libexec/docker-init\",\n\t\"ipv6\": false,\n\t\"iptables\": false,\n\t\"ip-forward\": false,\n\t\"ip-masq\": false,\n\t\"userland-proxy\": false,\n\t\"userland-proxy-path\": \"/usr/libexec/docker-proxy\",\n\t\"ip\": \"0.0.0.0\",\n\t\"bridge\": \"\",\n\t\"bip\": \"\",\n\t\"fixed-cidr\": \"\",\n\t\"fixed-cidr-v6\": \"\",\n\t\"default-gateway\": \"\",\n\t\"default-gateway-v6\": \"\",\n\t\"icc\": false,\n\t\"raw-logs\": false,\n\t\"allow-nondistributable-artifacts\": [],\n\t\"registry-mirrors\": [],\n\t\"seccomp-profile\": \"\",\n\t\"insecure-registries\": [],\n\t\"no-new-privileges\": false,\n\t\"default-runtime\": \"runc\",\n\t\"oom-score-adjust\": -500,\n\t\"node-generic-resources\": [\"NVIDIA-GPU=UUID1\", \"NVIDIA-GPU=UUID2\"],\n\t\"runtimes\": {\n\t\t\"cc-runtime\": {\n\t\t\t\"path\": \"/usr/bin/cc-runtime\"\n\t\t},\n\t\t\"custom\": {\n\t\t\t\"path\": \"/usr/local/bin/my-runc-replacement\",\n\t\t\t\"runtimeArgs\": [\n\t\t\t\t\"--debug\"\n\t\t\t]\n\t\t}\n\t},\n\t\"default-address-pools\":[{\"base\":\"172.80.0.0/16\",\"size\":24},\n\t{\"base\":\"172.90.0.0/16\",\"size\":24}]\n}\n```\n修改后重新启动服务使之生效。\n\n$ sudo systemctl daemon-reload\n\n$ sudo systemctl restart docker","source":"_posts/docker-daemon.md","raw":"---\npost_url: docker-daemon\ntitle: docker daemon（dockerd） 配置文件 daemon.json\ndate: 2018-12-01 23:26:55\ntags: docker\n---\n原文：https://docs.docker.com/engine/reference/commandline/dockerd/\n```\nUsage:\tdockerd COMMAND\n \nA self-sufficient runtime for containers.\n \nOptions:\n      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])\n      --allow-nondistributable-artifacts list Push nondistributable artifacts to specified registries (default [])\n      --api-cors-header string                Set CORS headers in the Engine API\n      --authorization-plugin list             Authorization plugins to load (default [])\n      --bip string                            Specify network bridge IP\n  -b, --bridge string                         Attach containers to a network bridge\n      --cgroup-parent string                  Set parent cgroup for all containers\n      --cluster-advertise string              Address or interface name to advertise\n      --cluster-store string                  URL of the distributed storage backend\n      --cluster-store-opt map                 Set cluster store options (default map[])\n      --config-file string                    Daemon configuration file (default \"/etc/docker/daemon.json\")\n      --containerd string                     Path to containerd socket\n      --cpu-rt-period int                     Limit the CPU real-time period in microseconds\n      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds\n      --data-root string                      Root directory of persistent Docker state (default \"/var/lib/docker\")\n  -D, --debug                                 Enable debug mode\n      --default-gateway ip                    Container default gateway IPv4 address\n      --default-gateway-v6 ip                 Container default gateway IPv6 address\n      --default-address-pool                  Set the default address pool for local node networks\n      --default-runtime string                Default OCI runtime for containers (default \"runc\")\n      --default-ulimit ulimit                 Default ulimits for containers (default [])\n      --dns list                              DNS server to use (default [])\n      --dns-opt list                          DNS options to use (default [])\n      --dns-search list                       DNS search domains to use (default [])\n      --exec-opt list                         Runtime execution options (default [])\n      --exec-root string                      Root directory for execution state files (default \"/var/run/docker\")\n      --experimental                          Enable experimental features\n      --fixed-cidr string                     IPv4 subnet for fixed IPs\n      --fixed-cidr-v6 string                  IPv6 subnet for fixed IPs\n  -G, --group string                          Group for the unix socket (default \"docker\")\n      --help                                  Print usage\n  -H, --host list                             Daemon socket(s) to connect to (default [])\n      --icc                                   Enable inter-container communication (default true)\n      --init                                  Run an init in the container to forward signals and reap processes\n      --init-path string                      Path to the docker-init binary\n      --insecure-registry list                Enable insecure registry communication (default [])\n      --ip ip                                 Default IP when binding container ports (default 0.0.0.0)\n      --ip-forward                            Enable net.ipv4.ip_forward (default true)\n      --ip-masq                               Enable IP masquerading (default true)\n      --iptables                              Enable addition of iptables rules (default true)\n      --ipv6                                  Enable IPv6 networking\n      --label list                            Set key=value labels to the daemon (default [])\n      --live-restore                          Enable live restore of docker when containers are still running\n      --log-driver string                     Default driver for container logs (default \"json-file\")\n  -l, --log-level string                      Set the logging level (\"debug\", \"info\", \"warn\", \"error\", \"fatal\") (default \"info\")\n      --log-opt map                           Default log driver options for containers (default map[])\n      --max-concurrent-downloads int          Set the max concurrent downloads for each pull (default 3)\n      --max-concurrent-uploads int            Set the max concurrent uploads for each push (default 5)\n      --metrics-addr string                   Set default address and port to serve the metrics api on\n      --mtu int                               Set the containers network MTU\n      --node-generic-resources list           Advertise user-defined resource\n      --no-new-privileges                     Set no-new-privileges by default for new containers\n      --oom-score-adjust int                  Set the oom_score_adj for the daemon (default -500)\n  -p, --pidfile string                        Path to use for daemon PID file (default \"/var/run/docker.pid\")\n      --raw-logs                              Full timestamps without ANSI coloring\n      --registry-mirror list                  Preferred Docker registry mirror (default [])\n      --seccomp-profile string                Path to seccomp profile\n      --selinux-enabled                       Enable selinux support\n      --shutdown-timeout int                  Set the default shutdown timeout (default 15)\n  -s, --storage-driver string                 Storage driver to use\n      --storage-opt list                      Storage driver options (default [])\n      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address\n      --tls                                   Use TLS; implied by --tlsverify\n      --tlscacert string                      Trust certs signed only by this CA (default \"~/.docker/ca.pem\")\n      --tlscert string                        Path to TLS certificate file (default \"~/.docker/cert.pem\")\n      --tlskey string                         Path to TLS key file (default ~/.docker/key.pem\")\n      --tlsverify                             Use TLS and verify the remote\n      --userland-proxy                        Use userland proxy for loopback traffic (default true)\n      --userland-proxy-path string            Path to the userland proxy binary\n      --userns-remap string                   User/Group setting for user namespaces\n  -v, --version                               Print version information and quit\n```\n\nLinux 上配置文件的默认位置是 /etc/docker/daemon.json。 --config-file 可用于指定非默认位置。\n\n这是 Linux 上允许的配置选项示例： \n```\n{\n\t\"authorization-plugins\": [],\n\t\"data-root\": \"\",\n\t\"dns\": [],\n\t\"dns-opts\": [],\n\t\"dns-search\": [],\n\t\"exec-opts\": [],\n\t\"exec-root\": \"\",\n\t\"experimental\": false,\n\t\"features\": {},\n\t\"storage-driver\": \"\",\n\t\"storage-opts\": [],\n\t\"labels\": [],\n\t\"live-restore\": true,\n\t\"log-driver\": \"\",\n\t\"log-opts\": {},\n\t\"mtu\": 0,\n\t\"pidfile\": \"\",\n\t\"cluster-store\": \"\",\n\t\"cluster-store-opts\": {},\n\t\"cluster-advertise\": \"\",\n\t\"max-concurrent-downloads\": 3,\n\t\"max-concurrent-uploads\": 5,\n\t\"default-shm-size\": \"64M\",\n\t\"shutdown-timeout\": 15,\n\t\"debug\": true,\n\t\"hosts\": [],\n\t\"log-level\": \"\",\n\t\"tls\": true,\n\t\"tlsverify\": true,\n\t\"tlscacert\": \"\",\n\t\"tlscert\": \"\",\n\t\"tlskey\": \"\",\n\t\"swarm-default-advertise-addr\": \"\",\n\t\"api-cors-header\": \"\",\n\t\"selinux-enabled\": false,\n\t\"userns-remap\": \"\",\n\t\"group\": \"\",\n\t\"cgroup-parent\": \"\",\n\t\"default-ulimits\": {\n\t\t\"nofile\": {\n\t\t\t\"Name\": \"nofile\",\n\t\t\t\"Hard\": 64000,\n\t\t\t\"Soft\": 64000\n\t\t}\n\t},\n\t\"init\": false,\n\t\"init-path\": \"/usr/libexec/docker-init\",\n\t\"ipv6\": false,\n\t\"iptables\": false,\n\t\"ip-forward\": false,\n\t\"ip-masq\": false,\n\t\"userland-proxy\": false,\n\t\"userland-proxy-path\": \"/usr/libexec/docker-proxy\",\n\t\"ip\": \"0.0.0.0\",\n\t\"bridge\": \"\",\n\t\"bip\": \"\",\n\t\"fixed-cidr\": \"\",\n\t\"fixed-cidr-v6\": \"\",\n\t\"default-gateway\": \"\",\n\t\"default-gateway-v6\": \"\",\n\t\"icc\": false,\n\t\"raw-logs\": false,\n\t\"allow-nondistributable-artifacts\": [],\n\t\"registry-mirrors\": [],\n\t\"seccomp-profile\": \"\",\n\t\"insecure-registries\": [],\n\t\"no-new-privileges\": false,\n\t\"default-runtime\": \"runc\",\n\t\"oom-score-adjust\": -500,\n\t\"node-generic-resources\": [\"NVIDIA-GPU=UUID1\", \"NVIDIA-GPU=UUID2\"],\n\t\"runtimes\": {\n\t\t\"cc-runtime\": {\n\t\t\t\"path\": \"/usr/bin/cc-runtime\"\n\t\t},\n\t\t\"custom\": {\n\t\t\t\"path\": \"/usr/local/bin/my-runc-replacement\",\n\t\t\t\"runtimeArgs\": [\n\t\t\t\t\"--debug\"\n\t\t\t]\n\t\t}\n\t},\n\t\"default-address-pools\":[{\"base\":\"172.80.0.0/16\",\"size\":24},\n\t{\"base\":\"172.90.0.0/16\",\"size\":24}]\n}\n```\n修改后重新启动服务使之生效。\n\n$ sudo systemctl daemon-reload\n\n$ sudo systemctl restart docker","slug":"docker-daemon","published":1,"updated":"2019-03-25T13:53:57.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqt006105abxwkdln9q","content":"<p>原文：<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/dockerd/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdockerd COMMAND</span><br><span class=\"line\"> </span><br><span class=\"line\">A self-sufficient runtime for containers.</span><br><span class=\"line\"> </span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])</span><br><span class=\"line\">      --allow-nondistributable-artifacts list Push nondistributable artifacts to specified registries (default [])</span><br><span class=\"line\">      --api-cors-header string                Set CORS headers in the Engine API</span><br><span class=\"line\">      --authorization-plugin list             Authorization plugins to load (default [])</span><br><span class=\"line\">      --bip string                            Specify network bridge IP</span><br><span class=\"line\">  -b, --bridge string                         Attach containers to a network bridge</span><br><span class=\"line\">      --cgroup-parent string                  Set parent cgroup for all containers</span><br><span class=\"line\">      --cluster-advertise string              Address or interface name to advertise</span><br><span class=\"line\">      --cluster-store string                  URL of the distributed storage backend</span><br><span class=\"line\">      --cluster-store-opt map                 Set cluster store options (default map[])</span><br><span class=\"line\">      --config-file string                    Daemon configuration file (default &quot;/etc/docker/daemon.json&quot;)</span><br><span class=\"line\">      --containerd string                     Path to containerd socket</span><br><span class=\"line\">      --cpu-rt-period int                     Limit the CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds</span><br><span class=\"line\">      --data-root string                      Root directory of persistent Docker state (default &quot;/var/lib/docker&quot;)</span><br><span class=\"line\">  -D, --debug                                 Enable debug mode</span><br><span class=\"line\">      --default-gateway ip                    Container default gateway IPv4 address</span><br><span class=\"line\">      --default-gateway-v6 ip                 Container default gateway IPv6 address</span><br><span class=\"line\">      --default-address-pool                  Set the default address pool for local node networks</span><br><span class=\"line\">      --default-runtime string                Default OCI runtime for containers (default &quot;runc&quot;)</span><br><span class=\"line\">      --default-ulimit ulimit                 Default ulimits for containers (default [])</span><br><span class=\"line\">      --dns list                              DNS server to use (default [])</span><br><span class=\"line\">      --dns-opt list                          DNS options to use (default [])</span><br><span class=\"line\">      --dns-search list                       DNS search domains to use (default [])</span><br><span class=\"line\">      --exec-opt list                         Runtime execution options (default [])</span><br><span class=\"line\">      --exec-root string                      Root directory for execution state files (default &quot;/var/run/docker&quot;)</span><br><span class=\"line\">      --experimental                          Enable experimental features</span><br><span class=\"line\">      --fixed-cidr string                     IPv4 subnet for fixed IPs</span><br><span class=\"line\">      --fixed-cidr-v6 string                  IPv6 subnet for fixed IPs</span><br><span class=\"line\">  -G, --group string                          Group for the unix socket (default &quot;docker&quot;)</span><br><span class=\"line\">      --help                                  Print usage</span><br><span class=\"line\">  -H, --host list                             Daemon socket(s) to connect to (default [])</span><br><span class=\"line\">      --icc                                   Enable inter-container communication (default true)</span><br><span class=\"line\">      --init                                  Run an init in the container to forward signals and reap processes</span><br><span class=\"line\">      --init-path string                      Path to the docker-init binary</span><br><span class=\"line\">      --insecure-registry list                Enable insecure registry communication (default [])</span><br><span class=\"line\">      --ip ip                                 Default IP when binding container ports (default 0.0.0.0)</span><br><span class=\"line\">      --ip-forward                            Enable net.ipv4.ip_forward (default true)</span><br><span class=\"line\">      --ip-masq                               Enable IP masquerading (default true)</span><br><span class=\"line\">      --iptables                              Enable addition of iptables rules (default true)</span><br><span class=\"line\">      --ipv6                                  Enable IPv6 networking</span><br><span class=\"line\">      --label list                            Set key=value labels to the daemon (default [])</span><br><span class=\"line\">      --live-restore                          Enable live restore of docker when containers are still running</span><br><span class=\"line\">      --log-driver string                     Default driver for container logs (default &quot;json-file&quot;)</span><br><span class=\"line\">  -l, --log-level string                      Set the logging level (&quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, &quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class=\"line\">      --log-opt map                           Default log driver options for containers (default map[])</span><br><span class=\"line\">      --max-concurrent-downloads int          Set the max concurrent downloads for each pull (default 3)</span><br><span class=\"line\">      --max-concurrent-uploads int            Set the max concurrent uploads for each push (default 5)</span><br><span class=\"line\">      --metrics-addr string                   Set default address and port to serve the metrics api on</span><br><span class=\"line\">      --mtu int                               Set the containers network MTU</span><br><span class=\"line\">      --node-generic-resources list           Advertise user-defined resource</span><br><span class=\"line\">      --no-new-privileges                     Set no-new-privileges by default for new containers</span><br><span class=\"line\">      --oom-score-adjust int                  Set the oom_score_adj for the daemon (default -500)</span><br><span class=\"line\">  -p, --pidfile string                        Path to use for daemon PID file (default &quot;/var/run/docker.pid&quot;)</span><br><span class=\"line\">      --raw-logs                              Full timestamps without ANSI coloring</span><br><span class=\"line\">      --registry-mirror list                  Preferred Docker registry mirror (default [])</span><br><span class=\"line\">      --seccomp-profile string                Path to seccomp profile</span><br><span class=\"line\">      --selinux-enabled                       Enable selinux support</span><br><span class=\"line\">      --shutdown-timeout int                  Set the default shutdown timeout (default 15)</span><br><span class=\"line\">  -s, --storage-driver string                 Storage driver to use</span><br><span class=\"line\">      --storage-opt list                      Storage driver options (default [])</span><br><span class=\"line\">      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address</span><br><span class=\"line\">      --tls                                   Use TLS; implied by --tlsverify</span><br><span class=\"line\">      --tlscacert string                      Trust certs signed only by this CA (default &quot;~/.docker/ca.pem&quot;)</span><br><span class=\"line\">      --tlscert string                        Path to TLS certificate file (default &quot;~/.docker/cert.pem&quot;)</span><br><span class=\"line\">      --tlskey string                         Path to TLS key file (default ~/.docker/key.pem&quot;)</span><br><span class=\"line\">      --tlsverify                             Use TLS and verify the remote</span><br><span class=\"line\">      --userland-proxy                        Use userland proxy for loopback traffic (default true)</span><br><span class=\"line\">      --userland-proxy-path string            Path to the userland proxy binary</span><br><span class=\"line\">      --userns-remap string                   User/Group setting for user namespaces</span><br><span class=\"line\">  -v, --version                               Print version information and quit</span><br></pre></td></tr></table></figure></p>\n<p>Linux 上配置文件的默认位置是 /etc/docker/daemon.json。 –config-file 可用于指定非默认位置。</p>\n<p>这是 Linux 上允许的配置选项示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;authorization-plugins&quot;: [],</span><br><span class=\"line\">\t&quot;data-root&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;dns&quot;: [],</span><br><span class=\"line\">\t&quot;dns-opts&quot;: [],</span><br><span class=\"line\">\t&quot;dns-search&quot;: [],</span><br><span class=\"line\">\t&quot;exec-opts&quot;: [],</span><br><span class=\"line\">\t&quot;exec-root&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;experimental&quot;: false,</span><br><span class=\"line\">\t&quot;features&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;storage-driver&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;storage-opts&quot;: [],</span><br><span class=\"line\">\t&quot;labels&quot;: [],</span><br><span class=\"line\">\t&quot;live-restore&quot;: true,</span><br><span class=\"line\">\t&quot;log-driver&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;log-opts&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;mtu&quot;: 0,</span><br><span class=\"line\">\t&quot;pidfile&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cluster-store&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cluster-store-opts&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;cluster-advertise&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;max-concurrent-downloads&quot;: 3,</span><br><span class=\"line\">\t&quot;max-concurrent-uploads&quot;: 5,</span><br><span class=\"line\">\t&quot;default-shm-size&quot;: &quot;64M&quot;,</span><br><span class=\"line\">\t&quot;shutdown-timeout&quot;: 15,</span><br><span class=\"line\">\t&quot;debug&quot;: true,</span><br><span class=\"line\">\t&quot;hosts&quot;: [],</span><br><span class=\"line\">\t&quot;log-level&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tls&quot;: true,</span><br><span class=\"line\">\t&quot;tlsverify&quot;: true,</span><br><span class=\"line\">\t&quot;tlscacert&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tlscert&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tlskey&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;swarm-default-advertise-addr&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;api-cors-header&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;selinux-enabled&quot;: false,</span><br><span class=\"line\">\t&quot;userns-remap&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;group&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cgroup-parent&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-ulimits&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;nofile&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;Name&quot;: &quot;nofile&quot;,</span><br><span class=\"line\">\t\t\t&quot;Hard&quot;: 64000,</span><br><span class=\"line\">\t\t\t&quot;Soft&quot;: 64000</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;init&quot;: false,</span><br><span class=\"line\">\t&quot;init-path&quot;: &quot;/usr/libexec/docker-init&quot;,</span><br><span class=\"line\">\t&quot;ipv6&quot;: false,</span><br><span class=\"line\">\t&quot;iptables&quot;: false,</span><br><span class=\"line\">\t&quot;ip-forward&quot;: false,</span><br><span class=\"line\">\t&quot;ip-masq&quot;: false,</span><br><span class=\"line\">\t&quot;userland-proxy&quot;: false,</span><br><span class=\"line\">\t&quot;userland-proxy-path&quot;: &quot;/usr/libexec/docker-proxy&quot;,</span><br><span class=\"line\">\t&quot;ip&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">\t&quot;bridge&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;bip&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;fixed-cidr&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;fixed-cidr-v6&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-gateway-v6&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;icc&quot;: false,</span><br><span class=\"line\">\t&quot;raw-logs&quot;: false,</span><br><span class=\"line\">\t&quot;allow-nondistributable-artifacts&quot;: [],</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [],</span><br><span class=\"line\">\t&quot;seccomp-profile&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;insecure-registries&quot;: [],</span><br><span class=\"line\">\t&quot;no-new-privileges&quot;: false,</span><br><span class=\"line\">\t&quot;default-runtime&quot;: &quot;runc&quot;,</span><br><span class=\"line\">\t&quot;oom-score-adjust&quot;: -500,</span><br><span class=\"line\">\t&quot;node-generic-resources&quot;: [&quot;NVIDIA-GPU=UUID1&quot;, &quot;NVIDIA-GPU=UUID2&quot;],</span><br><span class=\"line\">\t&quot;runtimes&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;cc-runtime&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;path&quot;: &quot;/usr/bin/cc-runtime&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;custom&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;path&quot;: &quot;/usr/local/bin/my-runc-replacement&quot;,</span><br><span class=\"line\">\t\t\t&quot;runtimeArgs&quot;: [</span><br><span class=\"line\">\t\t\t\t&quot;--debug&quot;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;default-address-pools&quot;:[&#123;&quot;base&quot;:&quot;172.80.0.0/16&quot;,&quot;size&quot;:24&#125;,</span><br><span class=\"line\">\t&#123;&quot;base&quot;:&quot;172.90.0.0/16&quot;,&quot;size&quot;:24&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改后重新启动服务使之生效。</p>\n<p>$ sudo systemctl daemon-reload</p>\n<p>$ sudo systemctl restart docker</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/dockerd/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdockerd COMMAND</span><br><span class=\"line\"> </span><br><span class=\"line\">A self-sufficient runtime for containers.</span><br><span class=\"line\"> </span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])</span><br><span class=\"line\">      --allow-nondistributable-artifacts list Push nondistributable artifacts to specified registries (default [])</span><br><span class=\"line\">      --api-cors-header string                Set CORS headers in the Engine API</span><br><span class=\"line\">      --authorization-plugin list             Authorization plugins to load (default [])</span><br><span class=\"line\">      --bip string                            Specify network bridge IP</span><br><span class=\"line\">  -b, --bridge string                         Attach containers to a network bridge</span><br><span class=\"line\">      --cgroup-parent string                  Set parent cgroup for all containers</span><br><span class=\"line\">      --cluster-advertise string              Address or interface name to advertise</span><br><span class=\"line\">      --cluster-store string                  URL of the distributed storage backend</span><br><span class=\"line\">      --cluster-store-opt map                 Set cluster store options (default map[])</span><br><span class=\"line\">      --config-file string                    Daemon configuration file (default &quot;/etc/docker/daemon.json&quot;)</span><br><span class=\"line\">      --containerd string                     Path to containerd socket</span><br><span class=\"line\">      --cpu-rt-period int                     Limit the CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds</span><br><span class=\"line\">      --data-root string                      Root directory of persistent Docker state (default &quot;/var/lib/docker&quot;)</span><br><span class=\"line\">  -D, --debug                                 Enable debug mode</span><br><span class=\"line\">      --default-gateway ip                    Container default gateway IPv4 address</span><br><span class=\"line\">      --default-gateway-v6 ip                 Container default gateway IPv6 address</span><br><span class=\"line\">      --default-address-pool                  Set the default address pool for local node networks</span><br><span class=\"line\">      --default-runtime string                Default OCI runtime for containers (default &quot;runc&quot;)</span><br><span class=\"line\">      --default-ulimit ulimit                 Default ulimits for containers (default [])</span><br><span class=\"line\">      --dns list                              DNS server to use (default [])</span><br><span class=\"line\">      --dns-opt list                          DNS options to use (default [])</span><br><span class=\"line\">      --dns-search list                       DNS search domains to use (default [])</span><br><span class=\"line\">      --exec-opt list                         Runtime execution options (default [])</span><br><span class=\"line\">      --exec-root string                      Root directory for execution state files (default &quot;/var/run/docker&quot;)</span><br><span class=\"line\">      --experimental                          Enable experimental features</span><br><span class=\"line\">      --fixed-cidr string                     IPv4 subnet for fixed IPs</span><br><span class=\"line\">      --fixed-cidr-v6 string                  IPv6 subnet for fixed IPs</span><br><span class=\"line\">  -G, --group string                          Group for the unix socket (default &quot;docker&quot;)</span><br><span class=\"line\">      --help                                  Print usage</span><br><span class=\"line\">  -H, --host list                             Daemon socket(s) to connect to (default [])</span><br><span class=\"line\">      --icc                                   Enable inter-container communication (default true)</span><br><span class=\"line\">      --init                                  Run an init in the container to forward signals and reap processes</span><br><span class=\"line\">      --init-path string                      Path to the docker-init binary</span><br><span class=\"line\">      --insecure-registry list                Enable insecure registry communication (default [])</span><br><span class=\"line\">      --ip ip                                 Default IP when binding container ports (default 0.0.0.0)</span><br><span class=\"line\">      --ip-forward                            Enable net.ipv4.ip_forward (default true)</span><br><span class=\"line\">      --ip-masq                               Enable IP masquerading (default true)</span><br><span class=\"line\">      --iptables                              Enable addition of iptables rules (default true)</span><br><span class=\"line\">      --ipv6                                  Enable IPv6 networking</span><br><span class=\"line\">      --label list                            Set key=value labels to the daemon (default [])</span><br><span class=\"line\">      --live-restore                          Enable live restore of docker when containers are still running</span><br><span class=\"line\">      --log-driver string                     Default driver for container logs (default &quot;json-file&quot;)</span><br><span class=\"line\">  -l, --log-level string                      Set the logging level (&quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, &quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class=\"line\">      --log-opt map                           Default log driver options for containers (default map[])</span><br><span class=\"line\">      --max-concurrent-downloads int          Set the max concurrent downloads for each pull (default 3)</span><br><span class=\"line\">      --max-concurrent-uploads int            Set the max concurrent uploads for each push (default 5)</span><br><span class=\"line\">      --metrics-addr string                   Set default address and port to serve the metrics api on</span><br><span class=\"line\">      --mtu int                               Set the containers network MTU</span><br><span class=\"line\">      --node-generic-resources list           Advertise user-defined resource</span><br><span class=\"line\">      --no-new-privileges                     Set no-new-privileges by default for new containers</span><br><span class=\"line\">      --oom-score-adjust int                  Set the oom_score_adj for the daemon (default -500)</span><br><span class=\"line\">  -p, --pidfile string                        Path to use for daemon PID file (default &quot;/var/run/docker.pid&quot;)</span><br><span class=\"line\">      --raw-logs                              Full timestamps without ANSI coloring</span><br><span class=\"line\">      --registry-mirror list                  Preferred Docker registry mirror (default [])</span><br><span class=\"line\">      --seccomp-profile string                Path to seccomp profile</span><br><span class=\"line\">      --selinux-enabled                       Enable selinux support</span><br><span class=\"line\">      --shutdown-timeout int                  Set the default shutdown timeout (default 15)</span><br><span class=\"line\">  -s, --storage-driver string                 Storage driver to use</span><br><span class=\"line\">      --storage-opt list                      Storage driver options (default [])</span><br><span class=\"line\">      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address</span><br><span class=\"line\">      --tls                                   Use TLS; implied by --tlsverify</span><br><span class=\"line\">      --tlscacert string                      Trust certs signed only by this CA (default &quot;~/.docker/ca.pem&quot;)</span><br><span class=\"line\">      --tlscert string                        Path to TLS certificate file (default &quot;~/.docker/cert.pem&quot;)</span><br><span class=\"line\">      --tlskey string                         Path to TLS key file (default ~/.docker/key.pem&quot;)</span><br><span class=\"line\">      --tlsverify                             Use TLS and verify the remote</span><br><span class=\"line\">      --userland-proxy                        Use userland proxy for loopback traffic (default true)</span><br><span class=\"line\">      --userland-proxy-path string            Path to the userland proxy binary</span><br><span class=\"line\">      --userns-remap string                   User/Group setting for user namespaces</span><br><span class=\"line\">  -v, --version                               Print version information and quit</span><br></pre></td></tr></table></figure></p>\n<p>Linux 上配置文件的默认位置是 /etc/docker/daemon.json。 –config-file 可用于指定非默认位置。</p>\n<p>这是 Linux 上允许的配置选项示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;authorization-plugins&quot;: [],</span><br><span class=\"line\">\t&quot;data-root&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;dns&quot;: [],</span><br><span class=\"line\">\t&quot;dns-opts&quot;: [],</span><br><span class=\"line\">\t&quot;dns-search&quot;: [],</span><br><span class=\"line\">\t&quot;exec-opts&quot;: [],</span><br><span class=\"line\">\t&quot;exec-root&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;experimental&quot;: false,</span><br><span class=\"line\">\t&quot;features&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;storage-driver&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;storage-opts&quot;: [],</span><br><span class=\"line\">\t&quot;labels&quot;: [],</span><br><span class=\"line\">\t&quot;live-restore&quot;: true,</span><br><span class=\"line\">\t&quot;log-driver&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;log-opts&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;mtu&quot;: 0,</span><br><span class=\"line\">\t&quot;pidfile&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cluster-store&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cluster-store-opts&quot;: &#123;&#125;,</span><br><span class=\"line\">\t&quot;cluster-advertise&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;max-concurrent-downloads&quot;: 3,</span><br><span class=\"line\">\t&quot;max-concurrent-uploads&quot;: 5,</span><br><span class=\"line\">\t&quot;default-shm-size&quot;: &quot;64M&quot;,</span><br><span class=\"line\">\t&quot;shutdown-timeout&quot;: 15,</span><br><span class=\"line\">\t&quot;debug&quot;: true,</span><br><span class=\"line\">\t&quot;hosts&quot;: [],</span><br><span class=\"line\">\t&quot;log-level&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tls&quot;: true,</span><br><span class=\"line\">\t&quot;tlsverify&quot;: true,</span><br><span class=\"line\">\t&quot;tlscacert&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tlscert&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;tlskey&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;swarm-default-advertise-addr&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;api-cors-header&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;selinux-enabled&quot;: false,</span><br><span class=\"line\">\t&quot;userns-remap&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;group&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;cgroup-parent&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-ulimits&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;nofile&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;Name&quot;: &quot;nofile&quot;,</span><br><span class=\"line\">\t\t\t&quot;Hard&quot;: 64000,</span><br><span class=\"line\">\t\t\t&quot;Soft&quot;: 64000</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;init&quot;: false,</span><br><span class=\"line\">\t&quot;init-path&quot;: &quot;/usr/libexec/docker-init&quot;,</span><br><span class=\"line\">\t&quot;ipv6&quot;: false,</span><br><span class=\"line\">\t&quot;iptables&quot;: false,</span><br><span class=\"line\">\t&quot;ip-forward&quot;: false,</span><br><span class=\"line\">\t&quot;ip-masq&quot;: false,</span><br><span class=\"line\">\t&quot;userland-proxy&quot;: false,</span><br><span class=\"line\">\t&quot;userland-proxy-path&quot;: &quot;/usr/libexec/docker-proxy&quot;,</span><br><span class=\"line\">\t&quot;ip&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">\t&quot;bridge&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;bip&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;fixed-cidr&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;fixed-cidr-v6&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;default-gateway-v6&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;icc&quot;: false,</span><br><span class=\"line\">\t&quot;raw-logs&quot;: false,</span><br><span class=\"line\">\t&quot;allow-nondistributable-artifacts&quot;: [],</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [],</span><br><span class=\"line\">\t&quot;seccomp-profile&quot;: &quot;&quot;,</span><br><span class=\"line\">\t&quot;insecure-registries&quot;: [],</span><br><span class=\"line\">\t&quot;no-new-privileges&quot;: false,</span><br><span class=\"line\">\t&quot;default-runtime&quot;: &quot;runc&quot;,</span><br><span class=\"line\">\t&quot;oom-score-adjust&quot;: -500,</span><br><span class=\"line\">\t&quot;node-generic-resources&quot;: [&quot;NVIDIA-GPU=UUID1&quot;, &quot;NVIDIA-GPU=UUID2&quot;],</span><br><span class=\"line\">\t&quot;runtimes&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;cc-runtime&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;path&quot;: &quot;/usr/bin/cc-runtime&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;custom&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;path&quot;: &quot;/usr/local/bin/my-runc-replacement&quot;,</span><br><span class=\"line\">\t\t\t&quot;runtimeArgs&quot;: [</span><br><span class=\"line\">\t\t\t\t&quot;--debug&quot;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;default-address-pools&quot;:[&#123;&quot;base&quot;:&quot;172.80.0.0/16&quot;,&quot;size&quot;:24&#125;,</span><br><span class=\"line\">\t&#123;&quot;base&quot;:&quot;172.90.0.0/16&quot;,&quot;size&quot;:24&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改后重新启动服务使之生效。</p>\n<p>$ sudo systemctl daemon-reload</p>\n<p>$ sudo systemctl restart docker</p>\n"},{"post_url":"es-nostop-up-mapping","title":"Elasticsearch Changing Mapping with Zero Downtime（ES 不停机更新 mapping）","date":"2018-10-08T14:18:04.000Z","_content":"官方地址：https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime\n## 官方原文\nEditor's Note (May 1, 2017): This blog was originally published several major versions of Elasticsearch ago.  Since then, new mappings have been made available, but more importantly, new features like the Reindex API have made tasks like this substantially easier.  The below post remains for archival purposes, but it's recommended you read over the linked reindex blog for a more modern approach to the reindex challenge.\n\nUpdate November 2, 2015: Make sure to check out the updates with Elasticsearch mappings introduced in the 2.0 release.\n\nA developer I know sent me a tweet saying:\n\nMy biggest problem with using Elastic Search as my model is that I have to reindex whenever I make a schema change. With the size of the data sets that takes a long ass time, and that results in a lot of down time for me. Too much for most applications.\n\nIt is quite possible to make schema/mapping changes with zero downtime, but there are too many options available to explain in a tweet, hence this blogpost.\n\n**The problem — Why you can't change mappings**\nYou can only find that which is stored in your index. In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed becomes useless. One way or another, you need to reindex that field.\n\nThis applies not just to Elasticsearch, but to any database that uses indices for searching. And if it isn't using indices then it is sacrificing speed for flexibility.\n\nElasticsearch (and Lucene) stores its indices in immutable segments — each segment is a “mini\" inverted index. These segments are never updated in place. Updating a document actually creates a new document and marks the old document as deleted. As you add more documents (or update existing documents), new segments are created. A merge process runs in the background merging several smaller segments into a new big segment, after which the old segments are removed entirely.\n\nTypically, an index in Elasticsearch will contain documents of different types. Each _type has its own schema or mapping. A single segment may contain documents of any type. So, if you want to change the field definition for a single field in a single type, you have little option but to reindex all of the documents in your index.\n\n**Adding fields is free**\nA segment only contains indices for fields that actually exist in the documents for that segment. This means that you can add new fields for free, using the put_mapping API. There is no need to reindex.\n\n**Reindexing your data**\nThe process for reindexing your data is quite simple. First, create a new index with the new mapping and settings:\n```\ncurl -XPUT localhost:9200/new_index -H 'Content-Type: application/json' -d '\n{\n    \"mappings\": {\n        \"my_type\": { ... new mapping definition ...}\n    }\n}\n'\n```\nThen, pull the documents in from your old index, using a scrolled search and index them into the new index using the bulk API. Many of the client APIs provide a reindex() method which will do all of this for you. Once you are done, you can delete the old index.\n\nNote: make sure that you include search_type=scan in your search request. This disables sorting and makes “deep paging\" efficient.\n\nThe problem with this approach is that the index name changes, which means that you need to change your application to use the new index name\n\n**Reindexing your data with zero downtime**\nIndex aliases give us the flexibility to reindex data in the background, making the change completely transparent to our application. An alias is like a symbolic link which can point to one or more real indices.\n\nThe typical workflow is as follows. First, create an index, appending a version or timestamp to the name:\n```\ncurl -XPUT localhost:9200/my_index_v1 -H 'Content-Type: application/json' -d '\n{ ... mappings ... }\n'\n```\nCreate an alias which points to the index:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v1\"\n        }}\n    ]\n}\n'\n```\nNow your application can speak to my_index as if it were a real index.\n\nWhen you need to reindex your data, you can create a new index, appending a new version number:\n```\ncurl -XPUT localhost:9200/my_index_v2 -H 'Content-Type: application/json' -d '\n{ ... mappings ... }\n'\n```\nReindex data from my_index_v1 to the new my_index_v2, then change the myindex alias to point to the new index, in a single atomic step:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"remove\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v2\"\n        }}\n    ]\n}\n'\n```\nAnd finally, delete the old index:\n```\ncurl -XDELETE localhost:9200/my_index_v1\n```\nYou have successfully reindexed all of your data in the background without any downtime. Your application is blissfully unaware that the index has changed.\n\nWhile this is the standard approach to managing schema changes, there are a number of other options available to you, which I will discuss below.\n\n**I don't care about old data**\nWhat if you want to change the datatype for a single field, and you don't care about the fact that the old data is not searchable? In this case, you have a few options:\n\n**Delete the mapping**\nUpdate November 2, 2015: Please note that delete mappings are not supported in Elasticsearch 2.0+.\n\nIf you delete the mapping for a specific type, then you can use the put_mapping API. to create a new mapping for that type in the existing index.\n\n```\nNote: when you delete a mapping for a type, you also delete all documents of that type in the index.\n```\nThis is particularly useful when you are wanting to change the mapping for a type which contains a small number of documents.\n\n**Rename the field**\nAdding new fields is free, so you could just add a new field with a different name and definition to use for all future documents. Of course, this means changing the fieldname used by your application.\n\n**Upgrade to a multi-field**\nMulti-fields allow a single field to be used for different purposes. A typical use case is to index e.g. a title field in two ways: as an analyzed string for querying, and as anot_analyzed string for sorting.\n\nAny scalar field (ie excluding fields of type object or nested) can be upgraded to a multi-field without reindexing, using the put_mapping API. For instance, if we have a field called created which is currently mapped as a string:\n```\n{\n    \"created\": { \"type\": \"string\"}\n}\n```\nWe can upgrade it to a multi-field, and add a date sub-field to it:\n```\ncurl -XPUT localhost:9200/my_index/my_type/_mapping -H 'Content-Type: application/json' -d '\n{\n    \"my_type\": {\n        \"properties\": {\n            \"created\": {\n                \"type\":   \"multi_field\",\n                \"fields\": {\n                    \"created\": { \"type\": \"string\" },\n                    \"date\":    { \"type\": \"date\"   }\n                }\n            }\n        }\n    }\n}\n'\n```\nThe original created field still exists as the “main\" sub-field, and can be queried as created or created.created. The new date variant can be queried as created.date, and will only be populated for new documents.\n\n**Using aliases for greater flexibility**\nSometimes the above approaches are not enough. Perhaps your application has 100,000 user documents and 10,000,000 blog documents. You want to change the mapping for theuser documents without having to reindex all of the blogs.\n\nThere is no reason that you can't store different types in different indices. Elasticsearch can search across multiple indices as easily as it can search across a single index. This way, you only need to reindex the index containing the type that you want to change. And with judicious use of aliases, the reindexing process can still be entirely transparent to your application.\n\nWith this approach, your application should use a separate alias for each type. For instance, instead of indexing to my_index, you would index user docs to my_index_user andblog docs to my_index_blog:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_v2\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_blog\",\n            \"index\": \"my_index_v2\"\n        }}\n    ]\n}\n'\n```\nTo search across user and blog documents, you can just specify both aliases:\n```\ncurl localhost:9200/my_index_blog,my_index_user/_search\n```\nWhen you want to change the user mapping, first create a new index just for users, and choose the right number of primary shards for just user docs:\n```\ncurl -XPUT localhost:9200/my_index_users_v1 -H 'Content-Type: application/json' -d '\n{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1\n        }\n    },\n    \"mappings\": {\n        \"user\": { ... new user mapping ... }\n    }\n}\n'\n```\nReindex just the user docs from the old index into the new:\n```\ncurl 'localhost:9200/my_index_user/user?scroll=1m&search_type=scan' -H 'Content-Type: application/json' -d '\n{\n    \"size\": 1000\n}\n'\n```\nAnd update the alias:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"remove\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_v2\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_user_v1\"\n        }}\n    ]\n}\n'\n```\nYou can use a delete-by-query request to remove the user docs from the old index:\n```\ncurl -XDELETE localhost:9200/my_index_v1/user\n```\nFrom now on, any time you want to change the mapping for user docs, you can use the standard reindexing approach that I described above.\n\n**Using aliases without reindexing**\nIf you want your changes to apply only to new documents, you can still use the aliases approach, without having to reindex. You would still create a new my_index_user_v1 index, but now you would create two aliases: my_index_user for indexing and my_index_users (plural) for searching:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_user_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_users\",\n            \"index\": \"my_index_user_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_users\",\n            \"index\": \"my_index_v1\"\n        }},\n    ]\n}\n'\n```\nThe my_index_user alias points just to the new index, and all new user documents would be indexed using this alias. The my_index_users alias points to both the new index AND the old index. So you can search across both indices at the same time. The old index will use the old mapping, and the new index will use the new mapping.\n\nAs you can see, Elasticsearch provides a wealth of options for managing your indices and, with a little forethought, changes can be managed with zero downtime.\n\n \n\nEditor’s Note (May 1, 2017): Starting with 6.0, any curl command to Elasticsearch containing content will require a valid content type header. As a result, this post has been updated to reflect this change and to set readers of this post up for success with future versions.\n\n \n\n## 总结\nes 修改 mapping，需要重建 index，之前的数据可以通过各种 api 进行 reindex。如果需要实现不停机更新 mapping，必须使用了索引别名 alias。此外，更新 mapping 必须重建索引的原因和具体实现参见上文。","source":"_posts/es-nostop-up-mapping.md","raw":"---\npost_url: es-nostop-up-mapping\ntitle: Elasticsearch Changing Mapping with Zero Downtime（ES 不停机更新 mapping）\ndate: 2018-10-08 22:18:04\ntags: elasticsearch\n---\n官方地址：https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime\n## 官方原文\nEditor's Note (May 1, 2017): This blog was originally published several major versions of Elasticsearch ago.  Since then, new mappings have been made available, but more importantly, new features like the Reindex API have made tasks like this substantially easier.  The below post remains for archival purposes, but it's recommended you read over the linked reindex blog for a more modern approach to the reindex challenge.\n\nUpdate November 2, 2015: Make sure to check out the updates with Elasticsearch mappings introduced in the 2.0 release.\n\nA developer I know sent me a tweet saying:\n\nMy biggest problem with using Elastic Search as my model is that I have to reindex whenever I make a schema change. With the size of the data sets that takes a long ass time, and that results in a lot of down time for me. Too much for most applications.\n\nIt is quite possible to make schema/mapping changes with zero downtime, but there are too many options available to explain in a tweet, hence this blogpost.\n\n**The problem — Why you can't change mappings**\nYou can only find that which is stored in your index. In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed becomes useless. One way or another, you need to reindex that field.\n\nThis applies not just to Elasticsearch, but to any database that uses indices for searching. And if it isn't using indices then it is sacrificing speed for flexibility.\n\nElasticsearch (and Lucene) stores its indices in immutable segments — each segment is a “mini\" inverted index. These segments are never updated in place. Updating a document actually creates a new document and marks the old document as deleted. As you add more documents (or update existing documents), new segments are created. A merge process runs in the background merging several smaller segments into a new big segment, after which the old segments are removed entirely.\n\nTypically, an index in Elasticsearch will contain documents of different types. Each _type has its own schema or mapping. A single segment may contain documents of any type. So, if you want to change the field definition for a single field in a single type, you have little option but to reindex all of the documents in your index.\n\n**Adding fields is free**\nA segment only contains indices for fields that actually exist in the documents for that segment. This means that you can add new fields for free, using the put_mapping API. There is no need to reindex.\n\n**Reindexing your data**\nThe process for reindexing your data is quite simple. First, create a new index with the new mapping and settings:\n```\ncurl -XPUT localhost:9200/new_index -H 'Content-Type: application/json' -d '\n{\n    \"mappings\": {\n        \"my_type\": { ... new mapping definition ...}\n    }\n}\n'\n```\nThen, pull the documents in from your old index, using a scrolled search and index them into the new index using the bulk API. Many of the client APIs provide a reindex() method which will do all of this for you. Once you are done, you can delete the old index.\n\nNote: make sure that you include search_type=scan in your search request. This disables sorting and makes “deep paging\" efficient.\n\nThe problem with this approach is that the index name changes, which means that you need to change your application to use the new index name\n\n**Reindexing your data with zero downtime**\nIndex aliases give us the flexibility to reindex data in the background, making the change completely transparent to our application. An alias is like a symbolic link which can point to one or more real indices.\n\nThe typical workflow is as follows. First, create an index, appending a version or timestamp to the name:\n```\ncurl -XPUT localhost:9200/my_index_v1 -H 'Content-Type: application/json' -d '\n{ ... mappings ... }\n'\n```\nCreate an alias which points to the index:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v1\"\n        }}\n    ]\n}\n'\n```\nNow your application can speak to my_index as if it were a real index.\n\nWhen you need to reindex your data, you can create a new index, appending a new version number:\n```\ncurl -XPUT localhost:9200/my_index_v2 -H 'Content-Type: application/json' -d '\n{ ... mappings ... }\n'\n```\nReindex data from my_index_v1 to the new my_index_v2, then change the myindex alias to point to the new index, in a single atomic step:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"remove\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index\",\n            \"index\": \"my_index_v2\"\n        }}\n    ]\n}\n'\n```\nAnd finally, delete the old index:\n```\ncurl -XDELETE localhost:9200/my_index_v1\n```\nYou have successfully reindexed all of your data in the background without any downtime. Your application is blissfully unaware that the index has changed.\n\nWhile this is the standard approach to managing schema changes, there are a number of other options available to you, which I will discuss below.\n\n**I don't care about old data**\nWhat if you want to change the datatype for a single field, and you don't care about the fact that the old data is not searchable? In this case, you have a few options:\n\n**Delete the mapping**\nUpdate November 2, 2015: Please note that delete mappings are not supported in Elasticsearch 2.0+.\n\nIf you delete the mapping for a specific type, then you can use the put_mapping API. to create a new mapping for that type in the existing index.\n\n```\nNote: when you delete a mapping for a type, you also delete all documents of that type in the index.\n```\nThis is particularly useful when you are wanting to change the mapping for a type which contains a small number of documents.\n\n**Rename the field**\nAdding new fields is free, so you could just add a new field with a different name and definition to use for all future documents. Of course, this means changing the fieldname used by your application.\n\n**Upgrade to a multi-field**\nMulti-fields allow a single field to be used for different purposes. A typical use case is to index e.g. a title field in two ways: as an analyzed string for querying, and as anot_analyzed string for sorting.\n\nAny scalar field (ie excluding fields of type object or nested) can be upgraded to a multi-field without reindexing, using the put_mapping API. For instance, if we have a field called created which is currently mapped as a string:\n```\n{\n    \"created\": { \"type\": \"string\"}\n}\n```\nWe can upgrade it to a multi-field, and add a date sub-field to it:\n```\ncurl -XPUT localhost:9200/my_index/my_type/_mapping -H 'Content-Type: application/json' -d '\n{\n    \"my_type\": {\n        \"properties\": {\n            \"created\": {\n                \"type\":   \"multi_field\",\n                \"fields\": {\n                    \"created\": { \"type\": \"string\" },\n                    \"date\":    { \"type\": \"date\"   }\n                }\n            }\n        }\n    }\n}\n'\n```\nThe original created field still exists as the “main\" sub-field, and can be queried as created or created.created. The new date variant can be queried as created.date, and will only be populated for new documents.\n\n**Using aliases for greater flexibility**\nSometimes the above approaches are not enough. Perhaps your application has 100,000 user documents and 10,000,000 blog documents. You want to change the mapping for theuser documents without having to reindex all of the blogs.\n\nThere is no reason that you can't store different types in different indices. Elasticsearch can search across multiple indices as easily as it can search across a single index. This way, you only need to reindex the index containing the type that you want to change. And with judicious use of aliases, the reindexing process can still be entirely transparent to your application.\n\nWith this approach, your application should use a separate alias for each type. For instance, instead of indexing to my_index, you would index user docs to my_index_user andblog docs to my_index_blog:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_v2\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_blog\",\n            \"index\": \"my_index_v2\"\n        }}\n    ]\n}\n'\n```\nTo search across user and blog documents, you can just specify both aliases:\n```\ncurl localhost:9200/my_index_blog,my_index_user/_search\n```\nWhen you want to change the user mapping, first create a new index just for users, and choose the right number of primary shards for just user docs:\n```\ncurl -XPUT localhost:9200/my_index_users_v1 -H 'Content-Type: application/json' -d '\n{\n    \"settings\": {\n        \"index\": {\n            \"number_of_shards\": 1\n        }\n    },\n    \"mappings\": {\n        \"user\": { ... new user mapping ... }\n    }\n}\n'\n```\nReindex just the user docs from the old index into the new:\n```\ncurl 'localhost:9200/my_index_user/user?scroll=1m&search_type=scan' -H 'Content-Type: application/json' -d '\n{\n    \"size\": 1000\n}\n'\n```\nAnd update the alias:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"remove\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_v2\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_user_v1\"\n        }}\n    ]\n}\n'\n```\nYou can use a delete-by-query request to remove the user docs from the old index:\n```\ncurl -XDELETE localhost:9200/my_index_v1/user\n```\nFrom now on, any time you want to change the mapping for user docs, you can use the standard reindexing approach that I described above.\n\n**Using aliases without reindexing**\nIf you want your changes to apply only to new documents, you can still use the aliases approach, without having to reindex. You would still create a new my_index_user_v1 index, but now you would create two aliases: my_index_user for indexing and my_index_users (plural) for searching:\n```\ncurl -XPOST localhost:9200/_aliases -H 'Content-Type: application/json' -d '\n{\n    \"actions\": [\n        { \"add\": {\n            \"alias\": \"my_index_user\",\n            \"index\": \"my_index_user_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_users\",\n            \"index\": \"my_index_user_v1\"\n        }},\n        { \"add\": {\n            \"alias\": \"my_index_users\",\n            \"index\": \"my_index_v1\"\n        }},\n    ]\n}\n'\n```\nThe my_index_user alias points just to the new index, and all new user documents would be indexed using this alias. The my_index_users alias points to both the new index AND the old index. So you can search across both indices at the same time. The old index will use the old mapping, and the new index will use the new mapping.\n\nAs you can see, Elasticsearch provides a wealth of options for managing your indices and, with a little forethought, changes can be managed with zero downtime.\n\n \n\nEditor’s Note (May 1, 2017): Starting with 6.0, any curl command to Elasticsearch containing content will require a valid content type header. As a result, this post has been updated to reflect this change and to set readers of this post up for success with future versions.\n\n \n\n## 总结\nes 修改 mapping，需要重建 index，之前的数据可以通过各种 api 进行 reindex。如果需要实现不停机更新 mapping，必须使用了索引别名 alias。此外，更新 mapping 必须重建索引的原因和具体实现参见上文。","slug":"es-nostop-up-mapping","published":1,"updated":"2019-03-25T13:29:54.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqu006305ablqimay9e","content":"<p>官方地址：<a href=\"https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime</a></p>\n<h2 id=\"官方原文\"><a href=\"#官方原文\" class=\"headerlink\" title=\"官方原文\"></a>官方原文</h2><p>Editor’s Note (May 1, 2017): This blog was originally published several major versions of Elasticsearch ago.  Since then, new mappings have been made available, but more importantly, new features like the Reindex API have made tasks like this substantially easier.  The below post remains for archival purposes, but it’s recommended you read over the linked reindex blog for a more modern approach to the reindex challenge.</p>\n<p>Update November 2, 2015: Make sure to check out the updates with Elasticsearch mappings introduced in the 2.0 release.</p>\n<p>A developer I know sent me a tweet saying:</p>\n<p>My biggest problem with using Elastic Search as my model is that I have to reindex whenever I make a schema change. With the size of the data sets that takes a long ass time, and that results in a lot of down time for me. Too much for most applications.</p>\n<p>It is quite possible to make schema/mapping changes with zero downtime, but there are too many options available to explain in a tweet, hence this blogpost.</p>\n<p><strong>The problem — Why you can’t change mappings</strong><br>You can only find that which is stored in your index. In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed becomes useless. One way or another, you need to reindex that field.</p>\n<p>This applies not just to Elasticsearch, but to any database that uses indices for searching. And if it isn’t using indices then it is sacrificing speed for flexibility.</p>\n<p>Elasticsearch (and Lucene) stores its indices in immutable segments — each segment is a “mini” inverted index. These segments are never updated in place. Updating a document actually creates a new document and marks the old document as deleted. As you add more documents (or update existing documents), new segments are created. A merge process runs in the background merging several smaller segments into a new big segment, after which the old segments are removed entirely.</p>\n<p>Typically, an index in Elasticsearch will contain documents of different types. Each _type has its own schema or mapping. A single segment may contain documents of any type. So, if you want to change the field definition for a single field in a single type, you have little option but to reindex all of the documents in your index.</p>\n<p><strong>Adding fields is free</strong><br>A segment only contains indices for fields that actually exist in the documents for that segment. This means that you can add new fields for free, using the put_mapping API. There is no need to reindex.</p>\n<p><strong>Reindexing your data</strong><br>The process for reindexing your data is quite simple. First, create a new index with the new mapping and settings:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/new_index -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;my_type&quot;: &#123; ... new mapping definition ...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Then, pull the documents in from your old index, using a scrolled search and index them into the new index using the bulk API. Many of the client APIs provide a reindex() method which will do all of this for you. Once you are done, you can delete the old index.</p>\n<p>Note: make sure that you include search_type=scan in your search request. This disables sorting and makes “deep paging” efficient.</p>\n<p>The problem with this approach is that the index name changes, which means that you need to change your application to use the new index name</p>\n<p><strong>Reindexing your data with zero downtime</strong><br>Index aliases give us the flexibility to reindex data in the background, making the change completely transparent to our application. An alias is like a symbolic link which can point to one or more real indices.</p>\n<p>The typical workflow is as follows. First, create an index, appending a version or timestamp to the name:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_v1 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123; ... mappings ... &#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Create an alias which points to the index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Now your application can speak to my_index as if it were a real index.</p>\n<p>When you need to reindex your data, you can create a new index, appending a new version number:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_v2 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123; ... mappings ... &#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Reindex data from my_index_v1 to the new my_index_v2, then change the myindex alias to point to the new index, in a single atomic step:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;remove&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>And finally, delete the old index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE localhost:9200/my_index_v1</span><br></pre></td></tr></table></figure></p>\n<p>You have successfully reindexed all of your data in the background without any downtime. Your application is blissfully unaware that the index has changed.</p>\n<p>While this is the standard approach to managing schema changes, there are a number of other options available to you, which I will discuss below.</p>\n<p><strong>I don’t care about old data</strong><br>What if you want to change the datatype for a single field, and you don’t care about the fact that the old data is not searchable? In this case, you have a few options:</p>\n<p><strong>Delete the mapping</strong><br>Update November 2, 2015: Please note that delete mappings are not supported in Elasticsearch 2.0+.</p>\n<p>If you delete the mapping for a specific type, then you can use the put_mapping API. to create a new mapping for that type in the existing index.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note: when you delete a mapping for a type, you also delete all documents of that type in the index.</span><br></pre></td></tr></table></figure>\n<p>This is particularly useful when you are wanting to change the mapping for a type which contains a small number of documents.</p>\n<p><strong>Rename the field</strong><br>Adding new fields is free, so you could just add a new field with a different name and definition to use for all future documents. Of course, this means changing the fieldname used by your application.</p>\n<p><strong>Upgrade to a multi-field</strong><br>Multi-fields allow a single field to be used for different purposes. A typical use case is to index e.g. a title field in two ways: as an analyzed string for querying, and as anot_analyzed string for sorting.</p>\n<p>Any scalar field (ie excluding fields of type object or nested) can be upgraded to a multi-field without reindexing, using the put_mapping API. For instance, if we have a field called created which is currently mapped as a string:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;created&quot;: &#123; &quot;type&quot;: &quot;string&quot;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We can upgrade it to a multi-field, and add a date sub-field to it:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index/my_type/_mapping -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;my_type&quot;: &#123;</span><br><span class=\"line\">        &quot;properties&quot;: &#123;</span><br><span class=\"line\">            &quot;created&quot;: &#123;</span><br><span class=\"line\">                &quot;type&quot;:   &quot;multi_field&quot;,</span><br><span class=\"line\">                &quot;fields&quot;: &#123;</span><br><span class=\"line\">                    &quot;created&quot;: &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class=\"line\">                    &quot;date&quot;:    &#123; &quot;type&quot;: &quot;date&quot;   &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The original created field still exists as the “main” sub-field, and can be queried as created or created.created. The new date variant can be queried as created.date, and will only be populated for new documents.</p>\n<p><strong>Using aliases for greater flexibility</strong><br>Sometimes the above approaches are not enough. Perhaps your application has 100,000 user documents and 10,000,000 blog documents. You want to change the mapping for theuser documents without having to reindex all of the blogs.</p>\n<p>There is no reason that you can’t store different types in different indices. Elasticsearch can search across multiple indices as easily as it can search across a single index. This way, you only need to reindex the index containing the type that you want to change. And with judicious use of aliases, the reindexing process can still be entirely transparent to your application.</p>\n<p>With this approach, your application should use a separate alias for each type. For instance, instead of indexing to my_index, you would index user docs to my_index_user andblog docs to my_index_blog:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_blog&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>To search across user and blog documents, you can just specify both aliases:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl localhost:9200/my_index_blog,my_index_user/_search</span><br></pre></td></tr></table></figure></p>\n<p>When you want to change the user mapping, first create a new index just for users, and choose the right number of primary shards for just user docs:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_users_v1 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;index&quot;: &#123;</span><br><span class=\"line\">            &quot;number_of_shards&quot;: 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123; ... new user mapping ... &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Reindex just the user docs from the old index into the new:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/my_index_user/user?scroll=1m&amp;search_type=scan&apos; -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;size&quot;: 1000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>And update the alias:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;remove&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>You can use a delete-by-query request to remove the user docs from the old index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE localhost:9200/my_index_v1/user</span><br></pre></td></tr></table></figure></p>\n<p>From now on, any time you want to change the mapping for user docs, you can use the standard reindexing approach that I described above.</p>\n<p><strong>Using aliases without reindexing</strong><br>If you want your changes to apply only to new documents, you can still use the aliases approach, without having to reindex. You would still create a new my_index_user_v1 index, but now you would create two aliases: my_index_user for indexing and my_index_users (plural) for searching:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_users&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_users&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The my_index_user alias points just to the new index, and all new user documents would be indexed using this alias. The my_index_users alias points to both the new index AND the old index. So you can search across both indices at the same time. The old index will use the old mapping, and the new index will use the new mapping.</p>\n<p>As you can see, Elasticsearch provides a wealth of options for managing your indices and, with a little forethought, changes can be managed with zero downtime.</p>\n<p>Editor’s Note (May 1, 2017): Starting with 6.0, any curl command to Elasticsearch containing content will require a valid content type header. As a result, this post has been updated to reflect this change and to set readers of this post up for success with future versions.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>es 修改 mapping，需要重建 index，之前的数据可以通过各种 api 进行 reindex。如果需要实现不停机更新 mapping，必须使用了索引别名 alias。此外，更新 mapping 必须重建索引的原因和具体实现参见上文。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方地址：<a href=\"https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/blog/changing-mapping-with-zero-downtime</a></p>\n<h2 id=\"官方原文\"><a href=\"#官方原文\" class=\"headerlink\" title=\"官方原文\"></a>官方原文</h2><p>Editor’s Note (May 1, 2017): This blog was originally published several major versions of Elasticsearch ago.  Since then, new mappings have been made available, but more importantly, new features like the Reindex API have made tasks like this substantially easier.  The below post remains for archival purposes, but it’s recommended you read over the linked reindex blog for a more modern approach to the reindex challenge.</p>\n<p>Update November 2, 2015: Make sure to check out the updates with Elasticsearch mappings introduced in the 2.0 release.</p>\n<p>A developer I know sent me a tweet saying:</p>\n<p>My biggest problem with using Elastic Search as my model is that I have to reindex whenever I make a schema change. With the size of the data sets that takes a long ass time, and that results in a lot of down time for me. Too much for most applications.</p>\n<p>It is quite possible to make schema/mapping changes with zero downtime, but there are too many options available to explain in a tweet, hence this blogpost.</p>\n<p><strong>The problem — Why you can’t change mappings</strong><br>You can only find that which is stored in your index. In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed becomes useless. One way or another, you need to reindex that field.</p>\n<p>This applies not just to Elasticsearch, but to any database that uses indices for searching. And if it isn’t using indices then it is sacrificing speed for flexibility.</p>\n<p>Elasticsearch (and Lucene) stores its indices in immutable segments — each segment is a “mini” inverted index. These segments are never updated in place. Updating a document actually creates a new document and marks the old document as deleted. As you add more documents (or update existing documents), new segments are created. A merge process runs in the background merging several smaller segments into a new big segment, after which the old segments are removed entirely.</p>\n<p>Typically, an index in Elasticsearch will contain documents of different types. Each _type has its own schema or mapping. A single segment may contain documents of any type. So, if you want to change the field definition for a single field in a single type, you have little option but to reindex all of the documents in your index.</p>\n<p><strong>Adding fields is free</strong><br>A segment only contains indices for fields that actually exist in the documents for that segment. This means that you can add new fields for free, using the put_mapping API. There is no need to reindex.</p>\n<p><strong>Reindexing your data</strong><br>The process for reindexing your data is quite simple. First, create a new index with the new mapping and settings:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/new_index -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;my_type&quot;: &#123; ... new mapping definition ...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Then, pull the documents in from your old index, using a scrolled search and index them into the new index using the bulk API. Many of the client APIs provide a reindex() method which will do all of this for you. Once you are done, you can delete the old index.</p>\n<p>Note: make sure that you include search_type=scan in your search request. This disables sorting and makes “deep paging” efficient.</p>\n<p>The problem with this approach is that the index name changes, which means that you need to change your application to use the new index name</p>\n<p><strong>Reindexing your data with zero downtime</strong><br>Index aliases give us the flexibility to reindex data in the background, making the change completely transparent to our application. An alias is like a symbolic link which can point to one or more real indices.</p>\n<p>The typical workflow is as follows. First, create an index, appending a version or timestamp to the name:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_v1 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123; ... mappings ... &#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Create an alias which points to the index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Now your application can speak to my_index as if it were a real index.</p>\n<p>When you need to reindex your data, you can create a new index, appending a new version number:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_v2 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123; ... mappings ... &#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Reindex data from my_index_v1 to the new my_index_v2, then change the myindex alias to point to the new index, in a single atomic step:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;remove&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>And finally, delete the old index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE localhost:9200/my_index_v1</span><br></pre></td></tr></table></figure></p>\n<p>You have successfully reindexed all of your data in the background without any downtime. Your application is blissfully unaware that the index has changed.</p>\n<p>While this is the standard approach to managing schema changes, there are a number of other options available to you, which I will discuss below.</p>\n<p><strong>I don’t care about old data</strong><br>What if you want to change the datatype for a single field, and you don’t care about the fact that the old data is not searchable? In this case, you have a few options:</p>\n<p><strong>Delete the mapping</strong><br>Update November 2, 2015: Please note that delete mappings are not supported in Elasticsearch 2.0+.</p>\n<p>If you delete the mapping for a specific type, then you can use the put_mapping API. to create a new mapping for that type in the existing index.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note: when you delete a mapping for a type, you also delete all documents of that type in the index.</span><br></pre></td></tr></table></figure>\n<p>This is particularly useful when you are wanting to change the mapping for a type which contains a small number of documents.</p>\n<p><strong>Rename the field</strong><br>Adding new fields is free, so you could just add a new field with a different name and definition to use for all future documents. Of course, this means changing the fieldname used by your application.</p>\n<p><strong>Upgrade to a multi-field</strong><br>Multi-fields allow a single field to be used for different purposes. A typical use case is to index e.g. a title field in two ways: as an analyzed string for querying, and as anot_analyzed string for sorting.</p>\n<p>Any scalar field (ie excluding fields of type object or nested) can be upgraded to a multi-field without reindexing, using the put_mapping API. For instance, if we have a field called created which is currently mapped as a string:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;created&quot;: &#123; &quot;type&quot;: &quot;string&quot;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We can upgrade it to a multi-field, and add a date sub-field to it:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index/my_type/_mapping -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;my_type&quot;: &#123;</span><br><span class=\"line\">        &quot;properties&quot;: &#123;</span><br><span class=\"line\">            &quot;created&quot;: &#123;</span><br><span class=\"line\">                &quot;type&quot;:   &quot;multi_field&quot;,</span><br><span class=\"line\">                &quot;fields&quot;: &#123;</span><br><span class=\"line\">                    &quot;created&quot;: &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class=\"line\">                    &quot;date&quot;:    &#123; &quot;type&quot;: &quot;date&quot;   &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The original created field still exists as the “main” sub-field, and can be queried as created or created.created. The new date variant can be queried as created.date, and will only be populated for new documents.</p>\n<p><strong>Using aliases for greater flexibility</strong><br>Sometimes the above approaches are not enough. Perhaps your application has 100,000 user documents and 10,000,000 blog documents. You want to change the mapping for theuser documents without having to reindex all of the blogs.</p>\n<p>There is no reason that you can’t store different types in different indices. Elasticsearch can search across multiple indices as easily as it can search across a single index. This way, you only need to reindex the index containing the type that you want to change. And with judicious use of aliases, the reindexing process can still be entirely transparent to your application.</p>\n<p>With this approach, your application should use a separate alias for each type. For instance, instead of indexing to my_index, you would index user docs to my_index_user andblog docs to my_index_blog:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_blog&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>To search across user and blog documents, you can just specify both aliases:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl localhost:9200/my_index_blog,my_index_user/_search</span><br></pre></td></tr></table></figure></p>\n<p>When you want to change the user mapping, first create a new index just for users, and choose the right number of primary shards for just user docs:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT localhost:9200/my_index_users_v1 -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;index&quot;: &#123;</span><br><span class=\"line\">            &quot;number_of_shards&quot;: 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;user&quot;: &#123; ... new user mapping ... &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Reindex just the user docs from the old index into the new:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;localhost:9200/my_index_user/user?scroll=1m&amp;search_type=scan&apos; -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;size&quot;: 1000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>And update the alias:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;remove&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v2&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>You can use a delete-by-query request to remove the user docs from the old index:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE localhost:9200/my_index_v1/user</span><br></pre></td></tr></table></figure></p>\n<p>From now on, any time you want to change the mapping for user docs, you can use the standard reindexing approach that I described above.</p>\n<p><strong>Using aliases without reindexing</strong><br>If you want your changes to apply only to new documents, you can still use the aliases approach, without having to reindex. You would still create a new my_index_user_v1 index, but now you would create two aliases: my_index_user for indexing and my_index_users (plural) for searching:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST localhost:9200/_aliases -H &apos;Content-Type: application/json&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;actions&quot;: [</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_user&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_users&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_user_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">        &#123; &quot;add&quot;: &#123;</span><br><span class=\"line\">            &quot;alias&quot;: &quot;my_index_users&quot;,</span><br><span class=\"line\">            &quot;index&quot;: &quot;my_index_v1&quot;</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure></p>\n<p>The my_index_user alias points just to the new index, and all new user documents would be indexed using this alias. The my_index_users alias points to both the new index AND the old index. So you can search across both indices at the same time. The old index will use the old mapping, and the new index will use the new mapping.</p>\n<p>As you can see, Elasticsearch provides a wealth of options for managing your indices and, with a little forethought, changes can be managed with zero downtime.</p>\n<p>Editor’s Note (May 1, 2017): Starting with 6.0, any curl command to Elasticsearch containing content will require a valid content type header. As a result, this post has been updated to reflect this change and to set readers of this post up for success with future versions.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>es 修改 mapping，需要重建 index，之前的数据可以通过各种 api 进行 reindex。如果需要实现不停机更新 mapping，必须使用了索引别名 alias。此外，更新 mapping 必须重建索引的原因和具体实现参见上文。</p>\n"},{"post_url":"nginx-php-fpm-alpine","title":"nginx-php 的 docker 镜像 nginx1.15.7 php7.0.33 php-fpm alpine3.7，测试 wordpress 完美运行","date":"2018-12-05T00:10:19.000Z","_content":"获取镜像：docker pull haojiliang/nginx-php-fpm-alpine:v1.15.7\n\nnginx 1.15.7\nphp 7.0.33\nphp-fpm\nalpine 3.7\n\n镜像大小：83.9MB\n\n文件路径及端口等配置都和 nginx 官方镜像一样，在 php 官方镜像基础上加了 php 扩展和 nginx\n\nDockerfile：https://github.com/haojiliang/nginx-php-fpm-alpine\n\nDocker Hub：https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/\n","source":"_posts/nginx-php-fpm-alpine.md","raw":"---\npost_url: nginx-php-fpm-alpine\ntitle: nginx-php 的 docker 镜像 nginx1.15.7 php7.0.33 php-fpm alpine3.7，测试 wordpress 完美运行\ndate: 2018-12-05 08:10:19\ntags: [nginx, php, docker, wordpress]\n---\n获取镜像：docker pull haojiliang/nginx-php-fpm-alpine:v1.15.7\n\nnginx 1.15.7\nphp 7.0.33\nphp-fpm\nalpine 3.7\n\n镜像大小：83.9MB\n\n文件路径及端口等配置都和 nginx 官方镜像一样，在 php 官方镜像基础上加了 php 扩展和 nginx\n\nDockerfile：https://github.com/haojiliang/nginx-php-fpm-alpine\n\nDocker Hub：https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/\n","slug":"nginx-php-fpm-alpine","published":1,"updated":"2019-03-25T14:01:40.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqu006505abb2mwkz2j","content":"<p>获取镜像：docker pull haojiliang/nginx-php-fpm-alpine:v1.15.7</p>\n<p>nginx 1.15.7<br>php 7.0.33<br>php-fpm<br>alpine 3.7</p>\n<p>镜像大小：83.9MB</p>\n<p>文件路径及端口等配置都和 nginx 官方镜像一样，在 php 官方镜像基础上加了 php 扩展和 nginx</p>\n<p>Dockerfile：<a href=\"https://github.com/haojiliang/nginx-php-fpm-alpine\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/nginx-php-fpm-alpine</a></p>\n<p>Docker Hub：<a href=\"https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>获取镜像：docker pull haojiliang/nginx-php-fpm-alpine:v1.15.7</p>\n<p>nginx 1.15.7<br>php 7.0.33<br>php-fpm<br>alpine 3.7</p>\n<p>镜像大小：83.9MB</p>\n<p>文件路径及端口等配置都和 nginx 官方镜像一样，在 php 官方镜像基础上加了 php 扩展和 nginx</p>\n<p>Dockerfile：<a href=\"https://github.com/haojiliang/nginx-php-fpm-alpine\" target=\"_blank\" rel=\"noopener\">https://github.com/haojiliang/nginx-php-fpm-alpine</a></p>\n<p>Docker Hub：<a href=\"https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/haojiliang/nginx-php-fpm-alpine/</a></p>\n"},{"post_url":"npm-angular-4058","title":"npm install -g @angular/cli 报 Missing write access to... -4058 ENOENT:no such file or directory","date":"2018-11-22T06:43:36.000Z","_content":"删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录重新运行 npm install -g @angular/cli 就可以了\n![](/images/20181122144236560.jpg)","source":"_posts/npm-angular-4058.md","raw":"---\npost_url: npm-angular-4058\ntitle: npm install -g @angular/cli 报 Missing write access to... -4058 ENOENT:no such file or directory\ndate: 2018-11-22 14:43:36\ntags: [angular, node]\n---\n删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录重新运行 npm install -g @angular/cli 就可以了\n![](/images/20181122144236560.jpg)","slug":"npm-angular-4058","published":1,"updated":"2019-03-24T09:58:39.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqv006705abmhhrnr62","content":"<p>删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录重新运行 npm install -g @angular/cli 就可以了<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181122144236560.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>删掉 C:\\Users\\adminstrator\\AppData\\Roaming\\npm\\node_modules\\@angular\\cli\\node_modules 目录重新运行 npm install -g @angular/cli 就可以了<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181122144236560.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"openresty","title":"CentOS安装openresty或者verynginx时:undefined reference to `pcre_free_study'","date":"2017-10-18T07:57:26.000Z","_content":"一、openresty问题复现：centos安装openresty-1.11.2.5，./configure后make时报错：\n\n \n```\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_regex_free_study_data':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2015: undefined reference to `pcre_free_study'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_destroy_regex':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2413: undefined reference to `pcre_free_study'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_compile_regex':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2268: undefined reference to `pcre_assign_jit_stack'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_gmatch':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:828: undefined reference to `pcre_assign_jit_stack'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_set_jit_stack_size':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1950: undefined reference to `pcre_jit_stack_free'\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1957: undefined reference to `pcre_jit_stack_alloc'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_match_helper':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:362: undefined reference to `pcre_assign_jit_stack'\ncollect2: ld returned 1 exit status\ngmake[2]: *** [objs/nginx] Error 1\ngmake[2]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2'\ngmake[1]: *** [build] Error 2\ngmake[1]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2'\ngmake: *** [all] Error 2\n```\n很明显是pcre的问题，Google说是pcre版本问题；\n\n解决办法：\n\n1.下载新版本pcre，我下载的是pcre-8.38，解压，不需要安装；我服务器原版本是pcre-7.8.7\n\n2.然后openresty目录下执行./configure时指定PCRE库的源码路径--with-pcre=/home/pcre-8.38\n\n例：./configure --with-pcre=/home/pcre-8.38 (已省略其他编译参数，需要自行添加)\n\n然后make，make install即可\n\n \n\n二、安装verynginx时报同样错误\n\n复现：python install.py install安装verynginx时,报同样错误;\n\n解决：VeryNginx目录下install.py中大约51行处找到exec_sys_cmd( './configure --prefix=/opt/verynginx/openresty --user=nginx --group=nginx --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-luajit ' )\n\n后面同样加上--with-pcre=/home/pcre-8.38\n\n即：exec_sys_cmd( './configure --prefix=/opt/verynginx/openresty --user=nginx --group=nginx --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-luajit --with-pcre=/home/pcre-8.38' )\n\n然后再执行python install.py install即可\n\n \n\n \n\n参考地址：https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ\n\n        https://github.com/openresty/lua-nginx-module/issues/781\n\n        http://www.runoob.com/w3cnote/nginx-install-and-config.html\n","source":"_posts/openresty.md","raw":"---\npost_url: openresty\ntitle: CentOS安装openresty或者verynginx时:undefined reference to `pcre_free_study'\ndate: 2017-10-18 15:57:26\ntags: openresty\n---\n一、openresty问题复现：centos安装openresty-1.11.2.5，./configure后make时报错：\n\n \n```\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_regex_free_study_data':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2015: undefined reference to `pcre_free_study'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_destroy_regex':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2413: undefined reference to `pcre_free_study'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_compile_regex':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2268: undefined reference to `pcre_assign_jit_stack'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_gmatch':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:828: undefined reference to `pcre_assign_jit_stack'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_set_jit_stack_size':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1950: undefined reference to `pcre_jit_stack_free'\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1957: undefined reference to `pcre_jit_stack_alloc'\nobjs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_match_helper':\n/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:362: undefined reference to `pcre_assign_jit_stack'\ncollect2: ld returned 1 exit status\ngmake[2]: *** [objs/nginx] Error 1\ngmake[2]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2'\ngmake[1]: *** [build] Error 2\ngmake[1]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2'\ngmake: *** [all] Error 2\n```\n很明显是pcre的问题，Google说是pcre版本问题；\n\n解决办法：\n\n1.下载新版本pcre，我下载的是pcre-8.38，解压，不需要安装；我服务器原版本是pcre-7.8.7\n\n2.然后openresty目录下执行./configure时指定PCRE库的源码路径--with-pcre=/home/pcre-8.38\n\n例：./configure --with-pcre=/home/pcre-8.38 (已省略其他编译参数，需要自行添加)\n\n然后make，make install即可\n\n \n\n二、安装verynginx时报同样错误\n\n复现：python install.py install安装verynginx时,报同样错误;\n\n解决：VeryNginx目录下install.py中大约51行处找到exec_sys_cmd( './configure --prefix=/opt/verynginx/openresty --user=nginx --group=nginx --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-luajit ' )\n\n后面同样加上--with-pcre=/home/pcre-8.38\n\n即：exec_sys_cmd( './configure --prefix=/opt/verynginx/openresty --user=nginx --group=nginx --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-luajit --with-pcre=/home/pcre-8.38' )\n\n然后再执行python install.py install即可\n\n \n\n \n\n参考地址：https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ\n\n        https://github.com/openresty/lua-nginx-module/issues/781\n\n        http://www.runoob.com/w3cnote/nginx-install-and-config.html\n","slug":"openresty","published":1,"updated":"2019-03-24T12:39:07.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqw006a05abd1hs8xwi","content":"<p>一、openresty问题复现：centos安装openresty-1.11.2.5，./configure后make时报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_regex_free_study_data&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2015: undefined reference to `pcre_free_study&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_destroy_regex&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2413: undefined reference to `pcre_free_study&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_compile_regex&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2268: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_gmatch&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:828: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_set_jit_stack_size&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1950: undefined reference to `pcre_jit_stack_free&apos;</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1957: undefined reference to `pcre_jit_stack_alloc&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_match_helper&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:362: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">collect2: ld returned 1 exit status</span><br><span class=\"line\">gmake[2]: *** [objs/nginx] Error 1</span><br><span class=\"line\">gmake[2]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2&apos;</span><br><span class=\"line\">gmake[1]: *** [build] Error 2</span><br><span class=\"line\">gmake[1]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2&apos;</span><br><span class=\"line\">gmake: *** [all] Error 2</span><br></pre></td></tr></table></figure>\n<p>很明显是pcre的问题，Google说是pcre版本问题；</p>\n<p>解决办法：</p>\n<p>1.下载新版本pcre，我下载的是pcre-8.38，解压，不需要安装；我服务器原版本是pcre-7.8.7</p>\n<p>2.然后openresty目录下执行./configure时指定PCRE库的源码路径–with-pcre=/home/pcre-8.38</p>\n<p>例：./configure –with-pcre=/home/pcre-8.38 (已省略其他编译参数，需要自行添加)</p>\n<p>然后make，make install即可</p>\n<p>二、安装verynginx时报同样错误</p>\n<p>复现：python install.py install安装verynginx时,报同样错误;</p>\n<p>解决：VeryNginx目录下install.py中大约51行处找到exec_sys_cmd( ‘./configure –prefix=/opt/verynginx/openresty –user=nginx –group=nginx –with-http_v2_module –with-http_sub_module –with-http_stub_status_module –with-luajit ‘ )</p>\n<p>后面同样加上–with-pcre=/home/pcre-8.38</p>\n<p>即：exec_sys_cmd( ‘./configure –prefix=/opt/verynginx/openresty –user=nginx –group=nginx –with-http_v2_module –with-http_sub_module –with-http_stub_status_module –with-luajit –with-pcre=/home/pcre-8.38’ )</p>\n<p>然后再执行python install.py install即可</p>\n<p>参考地址：<a href=\"https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ</a></p>\n<pre><code>https://github.com/openresty/lua-nginx-module/issues/781\n\nhttp://www.runoob.com/w3cnote/nginx-install-and-config.html\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>一、openresty问题复现：centos安装openresty-1.11.2.5，./configure后make时报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_regex_free_study_data&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2015: undefined reference to `pcre_free_study&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_destroy_regex&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2413: undefined reference to `pcre_free_study&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_compile_regex&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:2268: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_gmatch&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:828: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ffi_set_jit_stack_size&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1950: undefined reference to `pcre_jit_stack_free&apos;</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:1957: undefined reference to `pcre_jit_stack_alloc&apos;</span><br><span class=\"line\">objs/addon/src/ngx_http_lua_regex.o: In function `ngx_http_lua_ngx_re_match_helper&apos;:</span><br><span class=\"line\">/home/openresty-1.11.2.5/build/nginx-1.11.2/../ngx_lua-0.10.10/src/ngx_http_lua_regex.c:362: undefined reference to `pcre_assign_jit_stack&apos;</span><br><span class=\"line\">collect2: ld returned 1 exit status</span><br><span class=\"line\">gmake[2]: *** [objs/nginx] Error 1</span><br><span class=\"line\">gmake[2]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2&apos;</span><br><span class=\"line\">gmake[1]: *** [build] Error 2</span><br><span class=\"line\">gmake[1]: Leaving directory `/home/openresty-1.11.2.5/build/nginx-1.11.2&apos;</span><br><span class=\"line\">gmake: *** [all] Error 2</span><br></pre></td></tr></table></figure>\n<p>很明显是pcre的问题，Google说是pcre版本问题；</p>\n<p>解决办法：</p>\n<p>1.下载新版本pcre，我下载的是pcre-8.38，解压，不需要安装；我服务器原版本是pcre-7.8.7</p>\n<p>2.然后openresty目录下执行./configure时指定PCRE库的源码路径–with-pcre=/home/pcre-8.38</p>\n<p>例：./configure –with-pcre=/home/pcre-8.38 (已省略其他编译参数，需要自行添加)</p>\n<p>然后make，make install即可</p>\n<p>二、安装verynginx时报同样错误</p>\n<p>复现：python install.py install安装verynginx时,报同样错误;</p>\n<p>解决：VeryNginx目录下install.py中大约51行处找到exec_sys_cmd( ‘./configure –prefix=/opt/verynginx/openresty –user=nginx –group=nginx –with-http_v2_module –with-http_sub_module –with-http_stub_status_module –with-luajit ‘ )</p>\n<p>后面同样加上–with-pcre=/home/pcre-8.38</p>\n<p>即：exec_sys_cmd( ‘./configure –prefix=/opt/verynginx/openresty –user=nginx –group=nginx –with-http_v2_module –with-http_sub_module –with-http_stub_status_module –with-luajit –with-pcre=/home/pcre-8.38’ )</p>\n<p>然后再执行python install.py install即可</p>\n<p>参考地址：<a href=\"https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/forum/#!msg/openresty/o4CKvsp3Gio/9kiGJVSECgAJ</a></p>\n<pre><code>https://github.com/openresty/lua-nginx-module/issues/781\n\nhttp://www.runoob.com/w3cnote/nginx-install-and-config.html\n</code></pre>"},{"post_url":"npm-install-webpack-g","title":"npm install webpack -g 和 npm install --global vue-cli 失败报错 Unexpected end of JSON input while parsi","date":"2018-08-18T03:07:25.000Z","_content":"npm install webpack -g 和 npm install --global vue-cli 失败报错如下：\n\nUnexpected end of JSON input while parsing near '...s\":\"~1.0.0\",\"string_d'\n\nnpm ERR! A complete log of this run can be found in:\n\nnpm ERR!     /Users/haojiliang/.npm/_logs/2018-08-18T02_33_38_319Z-debug.log\n\n \n\n网上都是说 npm cache clean --force，但是清除缓存之后再执行还是同样的报错\n\n \n\n解决：用cnpm\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install webpack -g\n\ncnpm install --global vue-cli\n\n \n\n \n\n附：WebStorm 搭建 Vue 项目步骤 https://blog.csdn.net/weixin_40760196/article/details/79952652\n","source":"_posts/npm-install-webpack-g.md","raw":"---\npost_url: npm-install-webpack-g\ntitle: npm install webpack -g 和 npm install --global vue-cli 失败报错 Unexpected end of JSON input while parsi\ndate: 2018-08-18 11:07:25\ntags: [node, vue]\n---\nnpm install webpack -g 和 npm install --global vue-cli 失败报错如下：\n\nUnexpected end of JSON input while parsing near '...s\":\"~1.0.0\",\"string_d'\n\nnpm ERR! A complete log of this run can be found in:\n\nnpm ERR!     /Users/haojiliang/.npm/_logs/2018-08-18T02_33_38_319Z-debug.log\n\n \n\n网上都是说 npm cache clean --force，但是清除缓存之后再执行还是同样的报错\n\n \n\n解决：用cnpm\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install webpack -g\n\ncnpm install --global vue-cli\n\n \n\n \n\n附：WebStorm 搭建 Vue 项目步骤 https://blog.csdn.net/weixin_40760196/article/details/79952652\n","slug":"npm-install-webpack-g","published":1,"updated":"2019-03-25T14:02:14.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqx006b05abvz3o9zu4","content":"<p>npm install webpack -g 和 npm install –global vue-cli 失败报错如下：</p>\n<p>Unexpected end of JSON input while parsing near ‘…s”:”~1.0.0”,”string_d’</p>\n<p>npm ERR! A complete log of this run can be found in:</p>\n<p>npm ERR!     /Users/haojiliang/.npm/_logs/2018-08-18T02_33_38_319Z-debug.log</p>\n<p>网上都是说 npm cache clean –force，但是清除缓存之后再执行还是同样的报错</p>\n<p>解决：用cnpm</p>\n<p>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n<p>cnpm install webpack -g</p>\n<p>cnpm install –global vue-cli</p>\n<p>附：WebStorm 搭建 Vue 项目步骤 <a href=\"https://blog.csdn.net/weixin_40760196/article/details/79952652\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_40760196/article/details/79952652</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>npm install webpack -g 和 npm install –global vue-cli 失败报错如下：</p>\n<p>Unexpected end of JSON input while parsing near ‘…s”:”~1.0.0”,”string_d’</p>\n<p>npm ERR! A complete log of this run can be found in:</p>\n<p>npm ERR!     /Users/haojiliang/.npm/_logs/2018-08-18T02_33_38_319Z-debug.log</p>\n<p>网上都是说 npm cache clean –force，但是清除缓存之后再执行还是同样的报错</p>\n<p>解决：用cnpm</p>\n<p>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n<p>cnpm install webpack -g</p>\n<p>cnpm install –global vue-cli</p>\n<p>附：WebStorm 搭建 Vue 项目步骤 <a href=\"https://blog.csdn.net/weixin_40760196/article/details/79952652\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_40760196/article/details/79952652</a></p>\n"},{"title":"openresty（Nginx+lua-nginx-module）中各个阶段执行的指令解释及其执行顺序","post_url":"openresty-lua-nginx-module","date":"2019-01-12T07:36:34.000Z","_content":"\n## 执行顺序\n![](/images/20190112153020353.png)\n图片来源：https://github.com/openresty/lua-nginx-module#directives\n\n## 指令解释\n**init_by_lua\\***：初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)；\n**init_worker_by_lua\\***：每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，\n比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；\n**ssl_certificate_by_lua\\***：对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；\n**set_by_lua\\***：设置 nginx 变量；\n**rewrite_by_lua\\***：重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；\n**access_by_lua\\***：处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）；\n**content_by_lua\\***：执行业务逻辑并产生响应，类似于 jsp 中的 servlet；\n**balancer_by_lua\\***：负载均衡；\n**header_filter_by_lua\\***：处理响应头；\n**body_filter_by_lua\\***：处理响应体；\n**log_by_lua\\***：记录访问日志；\n\n\n## 参考\nhttps://github.com/openresty/lua-nginx-module\nhttp://tengine.taobao.org/book/chapter_12.html#id8\nhttp://jinnianshilongnian.iteye.com/blog/2186448\n","source":"_posts/openresty-lua-nginx-module.md","raw":"---\ntitle: openresty（Nginx+lua-nginx-module）中各个阶段执行的指令解释及其执行顺序\npost_url: openresty-lua-nginx-module\ndate: 2019-01-12 15:36:34\ntags: openresty\n---\n\n## 执行顺序\n![](/images/20190112153020353.png)\n图片来源：https://github.com/openresty/lua-nginx-module#directives\n\n## 指令解释\n**init_by_lua\\***：初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)；\n**init_worker_by_lua\\***：每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，\n比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；\n**ssl_certificate_by_lua\\***：对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；\n**set_by_lua\\***：设置 nginx 变量；\n**rewrite_by_lua\\***：重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；\n**access_by_lua\\***：处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）；\n**content_by_lua\\***：执行业务逻辑并产生响应，类似于 jsp 中的 servlet；\n**balancer_by_lua\\***：负载均衡；\n**header_filter_by_lua\\***：处理响应头；\n**body_filter_by_lua\\***：处理响应体；\n**log_by_lua\\***：记录访问日志；\n\n\n## 参考\nhttps://github.com/openresty/lua-nginx-module\nhttp://tengine.taobao.org/book/chapter_12.html#id8\nhttp://jinnianshilongnian.iteye.com/blog/2186448\n","slug":"openresty-lua-nginx-module","published":1,"updated":"2019-03-25T14:02:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqy006c05ab69pl590u","content":"<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190112153020353.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>图片来源：<a href=\"https://github.com/openresty/lua-nginx-module#directives\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module#directives</a></p>\n<h2 id=\"指令解释\"><a href=\"#指令解释\" class=\"headerlink\" title=\"指令解释\"></a>指令解释</h2><p><strong>init_by_lua*</strong>：初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)；<br><strong>init_worker_by_lua*</strong>：每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，<br>比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；<br><strong>ssl_certificate_by_lua*</strong>：对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；<br><strong>set_by_lua*</strong>：设置 nginx 变量；<br><strong>rewrite_by_lua*</strong>：重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；<br><strong>access_by_lua*</strong>：处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）；<br><strong>content_by_lua*</strong>：执行业务逻辑并产生响应，类似于 jsp 中的 servlet；<br><strong>balancer_by_lua*</strong>：负载均衡；<br><strong>header_filter_by_lua*</strong>：处理响应头；<br><strong>body_filter_by_lua*</strong>：处理响应体；<br><strong>log_by_lua*</strong>：记录访问日志；</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/openresty/lua-nginx-module\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module</a><br><a href=\"http://tengine.taobao.org/book/chapter_12.html#id8\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html#id8</a><br><a href=\"http://jinnianshilongnian.iteye.com/blog/2186448\" target=\"_blank\" rel=\"noopener\">http://jinnianshilongnian.iteye.com/blog/2186448</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190112153020353.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>图片来源：<a href=\"https://github.com/openresty/lua-nginx-module#directives\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module#directives</a></p>\n<h2 id=\"指令解释\"><a href=\"#指令解释\" class=\"headerlink\" title=\"指令解释\"></a>指令解释</h2><p><strong>init_by_lua*</strong>：初始化 nginx 和预加载 lua(nginx 启动和 reload 时执行)；<br><strong>init_worker_by_lua*</strong>：每个工作进程(worker_processes)被创建时执行，用于启动一些定时任务，<br>比如心跳检查，后端服务的健康检查，定时拉取服务器配置等；<br><strong>ssl_certificate_by_lua*</strong>：对 https 请求的处理，即将启动下游 SSL（https）连接的 SSL 握手时执行，用例：按照每个请求设置 SSL 证书链和相应的私钥，按照 SSL 协议有选择的拒绝请求等；<br><strong>set_by_lua*</strong>：设置 nginx 变量；<br><strong>rewrite_by_lua*</strong>：重写请求（从原生 nginx 的 rewrite 阶段进入），执行内部 URL 重写或者外部重定向，典型的如伪静态化的 URL 重写；<br><strong>access_by_lua*</strong>：处理请求（和 rewrite_by_lua 可以实现相同的功能，从原生 nginx 的 access阶段进入）；<br><strong>content_by_lua*</strong>：执行业务逻辑并产生响应，类似于 jsp 中的 servlet；<br><strong>balancer_by_lua*</strong>：负载均衡；<br><strong>header_filter_by_lua*</strong>：处理响应头；<br><strong>body_filter_by_lua*</strong>：处理响应体；<br><strong>log_by_lua*</strong>：记录访问日志；</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/openresty/lua-nginx-module\" target=\"_blank\" rel=\"noopener\">https://github.com/openresty/lua-nginx-module</a><br><a href=\"http://tengine.taobao.org/book/chapter_12.html#id8\" target=\"_blank\" rel=\"noopener\">http://tengine.taobao.org/book/chapter_12.html#id8</a><br><a href=\"http://jinnianshilongnian.iteye.com/blog/2186448\" target=\"_blank\" rel=\"noopener\">http://jinnianshilongnian.iteye.com/blog/2186448</a></p>\n"},{"post_url":"pip-install-tensorflow","title":"pip install tensorflow","date":"2018-10-23T03:27:45.000Z","_content":"Win10 安装 Tensorflow 时：pip install tensorflow\n\n报错：Could not find a version that satisfies the requirement tensorflow (from versions: ) No matching distribution found for tensorflow\n\n原因：python 版本不对\n\n解决：\n\n1.python 版本和位数都需要和安装的 Tensorflow 版本对应，最新版的 python 也不兼容，要对应版本的。\n\n2.https://pypi.org/project/tensorflow/ 左下角 Programming Language 可以查看安装的 Tensorflow 版本所需要的 python 版本。\n\n3.python 官网下载页默认下载的 python 是32位的，注意需要下载对应位数的版本。\n\n安装对应版本的 python 后就正常安装了。\n![](/images/20181023113000234.png)","source":"_posts/pip-install-tensorflow.md","raw":"---\npost_url: pip-install-tensorflow\ntitle: pip install tensorflow\ndate: 2018-10-23 11:27:45\ntags: [python, tensorflow]\n---\nWin10 安装 Tensorflow 时：pip install tensorflow\n\n报错：Could not find a version that satisfies the requirement tensorflow (from versions: ) No matching distribution found for tensorflow\n\n原因：python 版本不对\n\n解决：\n\n1.python 版本和位数都需要和安装的 Tensorflow 版本对应，最新版的 python 也不兼容，要对应版本的。\n\n2.https://pypi.org/project/tensorflow/ 左下角 Programming Language 可以查看安装的 Tensorflow 版本所需要的 python 版本。\n\n3.python 官网下载页默认下载的 python 是32位的，注意需要下载对应位数的版本。\n\n安装对应版本的 python 后就正常安装了。\n![](/images/20181023113000234.png)","slug":"pip-install-tensorflow","published":1,"updated":"2019-03-24T11:56:53.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqz006f05abevod2cgq","content":"<p>Win10 安装 Tensorflow 时：pip install tensorflow</p>\n<p>报错：Could not find a version that satisfies the requirement tensorflow (from versions: ) No matching distribution found for tensorflow</p>\n<p>原因：python 版本不对</p>\n<p>解决：</p>\n<p>1.python 版本和位数都需要和安装的 Tensorflow 版本对应，最新版的 python 也不兼容，要对应版本的。</p>\n<p>2.<a href=\"https://pypi.org/project/tensorflow/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/tensorflow/</a> 左下角 Programming Language 可以查看安装的 Tensorflow 版本所需要的 python 版本。</p>\n<p>3.python 官网下载页默认下载的 python 是32位的，注意需要下载对应位数的版本。</p>\n<p>安装对应版本的 python 后就正常安装了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181023113000234.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Win10 安装 Tensorflow 时：pip install tensorflow</p>\n<p>报错：Could not find a version that satisfies the requirement tensorflow (from versions: ) No matching distribution found for tensorflow</p>\n<p>原因：python 版本不对</p>\n<p>解决：</p>\n<p>1.python 版本和位数都需要和安装的 Tensorflow 版本对应，最新版的 python 也不兼容，要对应版本的。</p>\n<p>2.<a href=\"https://pypi.org/project/tensorflow/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/tensorflow/</a> 左下角 Programming Language 可以查看安装的 Tensorflow 版本所需要的 python 版本。</p>\n<p>3.python 官网下载页默认下载的 python 是32位的，注意需要下载对应位数的版本。</p>\n<p>安装对应版本的 python 后就正常安装了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181023113000234.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"title":"redis 消息的订阅发布 Java 实现 消息生产者 消息消费者","post_url":"redis-publish-subscribe","date":"2019-03-22T09:28:33.000Z","_content":"\n## 发布消息（消息生产者 MessageProducer）\n```Java\npublic static final String CHANNEL_KEY = \"channel:1\";\njedis.publish(CHANNEL_KEY, message);\n```\n\n## 订阅消息（消息消费者）\n```Java\n/**\n * 消息消费者\n *\n * @author hxx\n */\npublic class MessageConsumer implements Runnable {\n \n    /**\n     * 频道\n     */\n    public static final String CHANNEL_KEY = \"channel:1\";\n \n    /**\n     * 处理接收消息\n     */\n    private AlarmJedisPubSub alarmJedisPubSub = new AlarmJedisPubSub();\n \n    /**\n     * Logger\n     */\n    private static Logger LOG = LoggerFactory.getLogger(MessageConsumer.class);\n \n    @Override\n    public void run() {\n        Jedis jedis = null;\n        try {\n            jedis = JedisPoolUtils.getPublicJedis();\n            jedis.subscribe(alarmJedisPubSub, CHANNEL_KEY);\n        }\n        catch (Exception e) {\n            LOG.error(\"消费消息失败：\" + e.getMessage(), e);\n        }\n        finally {\n            JedisPoolUtils.returnRes(jedis);\n        }\n    }\n \n    /**\n     * 接收到消息后推给前端\n     *\n     * @author ab\n     */\n    class AlarmJedisPubSub extends JedisPubSub {\n        @Override\n        public void onMessage(String channel, String message) {\n            LOG.info(\"接收到来自频道\" + channel + \"的消息：\" + message);\n            ResinWebSocketListener.sendToOneUser(JSON.parseObject(message), message, \"msg\");\n        }\n    }\n \n    /**\n     * 测试\n     *\n     * @param args args\n     */\n    public static void main(String[] args) {\n        MessageConsumer messageConsumer = new MessageConsumer();\n        Thread t1 = new Thread(messageConsumer);\n        t1.start();\n    }\n}\n```\n\n参考：https://www.cnblogs.com/qlqwjy/p/9763754.html","source":"_posts/redis-publish-subscribe.md","raw":"---\ntitle: redis 消息的订阅发布 Java 实现 消息生产者 消息消费者\npost_url: redis-publish-subscribe\ndate: 2019-03-22 17:28:33\ntags: redis\n---\n\n## 发布消息（消息生产者 MessageProducer）\n```Java\npublic static final String CHANNEL_KEY = \"channel:1\";\njedis.publish(CHANNEL_KEY, message);\n```\n\n## 订阅消息（消息消费者）\n```Java\n/**\n * 消息消费者\n *\n * @author hxx\n */\npublic class MessageConsumer implements Runnable {\n \n    /**\n     * 频道\n     */\n    public static final String CHANNEL_KEY = \"channel:1\";\n \n    /**\n     * 处理接收消息\n     */\n    private AlarmJedisPubSub alarmJedisPubSub = new AlarmJedisPubSub();\n \n    /**\n     * Logger\n     */\n    private static Logger LOG = LoggerFactory.getLogger(MessageConsumer.class);\n \n    @Override\n    public void run() {\n        Jedis jedis = null;\n        try {\n            jedis = JedisPoolUtils.getPublicJedis();\n            jedis.subscribe(alarmJedisPubSub, CHANNEL_KEY);\n        }\n        catch (Exception e) {\n            LOG.error(\"消费消息失败：\" + e.getMessage(), e);\n        }\n        finally {\n            JedisPoolUtils.returnRes(jedis);\n        }\n    }\n \n    /**\n     * 接收到消息后推给前端\n     *\n     * @author ab\n     */\n    class AlarmJedisPubSub extends JedisPubSub {\n        @Override\n        public void onMessage(String channel, String message) {\n            LOG.info(\"接收到来自频道\" + channel + \"的消息：\" + message);\n            ResinWebSocketListener.sendToOneUser(JSON.parseObject(message), message, \"msg\");\n        }\n    }\n \n    /**\n     * 测试\n     *\n     * @param args args\n     */\n    public static void main(String[] args) {\n        MessageConsumer messageConsumer = new MessageConsumer();\n        Thread t1 = new Thread(messageConsumer);\n        t1.start();\n    }\n}\n```\n\n参考：https://www.cnblogs.com/qlqwjy/p/9763754.html","slug":"redis-publish-subscribe","published":1,"updated":"2019-03-25T14:03:15.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtqz006h05abbwyedpnq","content":"<h2 id=\"发布消息（消息生产者-MessageProducer）\"><a href=\"#发布消息（消息生产者-MessageProducer）\" class=\"headerlink\" title=\"发布消息（消息生产者 MessageProducer）\"></a>发布消息（消息生产者 MessageProducer）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHANNEL_KEY = <span class=\"string\">\"channel:1\"</span>;</span><br><span class=\"line\">jedis.publish(CHANNEL_KEY, message);</span><br></pre></td></tr></table></figure>\n<h2 id=\"订阅消息（消息消费者）\"><a href=\"#订阅消息（消息消费者）\" class=\"headerlink\" title=\"订阅消息（消息消费者）\"></a>订阅消息（消息消费者）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消息消费者</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hxx</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 频道</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHANNEL_KEY = <span class=\"string\">\"channel:1\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理接收消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AlarmJedisPubSub alarmJedisPubSub = <span class=\"keyword\">new</span> AlarmJedisPubSub();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Logger</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger LOG = LoggerFactory.getLogger(MessageConsumer.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Jedis jedis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            jedis = JedisPoolUtils.getPublicJedis();</span><br><span class=\"line\">            jedis.subscribe(alarmJedisPubSub, CHANNEL_KEY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"消费消息失败：\"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JedisPoolUtils.returnRes(jedis);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收到消息后推给前端</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> ab</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmJedisPubSub</span> <span class=\"keyword\">extends</span> <span class=\"title\">JedisPubSub</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String channel, String message)</span> </span>&#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"接收到来自频道\"</span> + channel + <span class=\"string\">\"的消息：\"</span> + message);</span><br><span class=\"line\">            ResinWebSocketListener.sendToOneUser(JSON.parseObject(message), message, <span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MessageConsumer messageConsumer = <span class=\"keyword\">new</span> MessageConsumer();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(messageConsumer);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/qlqwjy/p/9763754.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qlqwjy/p/9763754.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发布消息（消息生产者-MessageProducer）\"><a href=\"#发布消息（消息生产者-MessageProducer）\" class=\"headerlink\" title=\"发布消息（消息生产者 MessageProducer）\"></a>发布消息（消息生产者 MessageProducer）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHANNEL_KEY = <span class=\"string\">\"channel:1\"</span>;</span><br><span class=\"line\">jedis.publish(CHANNEL_KEY, message);</span><br></pre></td></tr></table></figure>\n<h2 id=\"订阅消息（消息消费者）\"><a href=\"#订阅消息（消息消费者）\" class=\"headerlink\" title=\"订阅消息（消息消费者）\"></a>订阅消息（消息消费者）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消息消费者</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hxx</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageConsumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 频道</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHANNEL_KEY = <span class=\"string\">\"channel:1\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理接收消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AlarmJedisPubSub alarmJedisPubSub = <span class=\"keyword\">new</span> AlarmJedisPubSub();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Logger</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger LOG = LoggerFactory.getLogger(MessageConsumer.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Jedis jedis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            jedis = JedisPoolUtils.getPublicJedis();</span><br><span class=\"line\">            jedis.subscribe(alarmJedisPubSub, CHANNEL_KEY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"消费消息失败：\"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JedisPoolUtils.returnRes(jedis);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收到消息后推给前端</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> ab</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmJedisPubSub</span> <span class=\"keyword\">extends</span> <span class=\"title\">JedisPubSub</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String channel, String message)</span> </span>&#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"接收到来自频道\"</span> + channel + <span class=\"string\">\"的消息：\"</span> + message);</span><br><span class=\"line\">            ResinWebSocketListener.sendToOneUser(JSON.parseObject(message), message, <span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MessageConsumer messageConsumer = <span class=\"keyword\">new</span> MessageConsumer();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(messageConsumer);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/qlqwjy/p/9763754.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qlqwjy/p/9763754.html</a></p>\n"},{"post_url":"pyspark-spark-shell-sparkDriver-failed","title":"pyspark spark-shell无法指定被请求的地址:Service 'sparkDriver' failed after 16 retries (on a random free port)","date":"2018-12-23T14:32:25.000Z","_content":"原文：https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast\n\nspark bin/pyspark 和 bin/spark-shell 报 无法指定被请求的地址: Service 'sparkDriver' failed after 16 retries (on a random free port)\n\npyspark -c spark.driver.bindAddress=127.0.0.1\n\n安装：下载解压\n\n配置：\n\nvim /conf/spark-env.sh\n\nexport  SPARK_MASTER_HOST=192.168.0.200\n\nexport  SPARK_LOCAL_IP=192.168.0.200\n\n启动：\n\n./sbin/start-master.sh\n\n![](/images/20181224205905268.png)","source":"_posts/pyspark-spark-shell-sparkDriver-failed.md","raw":"---\npost_url: pyspark-spark-shell-sparkDriver-failed\ntitle: pyspark spark-shell无法指定被请求的地址:Service 'sparkDriver' failed after 16 retries (on a random free port)\ndate: 2018-12-23 22:32:25\ntags: spark\n---\n原文：https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast\n\nspark bin/pyspark 和 bin/spark-shell 报 无法指定被请求的地址: Service 'sparkDriver' failed after 16 retries (on a random free port)\n\npyspark -c spark.driver.bindAddress=127.0.0.1\n\n安装：下载解压\n\n配置：\n\nvim /conf/spark-env.sh\n\nexport  SPARK_MASTER_HOST=192.168.0.200\n\nexport  SPARK_LOCAL_IP=192.168.0.200\n\n启动：\n\n./sbin/start-master.sh\n\n![](/images/20181224205905268.png)","slug":"pyspark-spark-shell-sparkDriver-failed","published":1,"updated":"2019-03-25T14:02:44.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr0006k05abutvuhgzs","content":"<p>原文：<a href=\"https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast</a></p>\n<p>spark bin/pyspark 和 bin/spark-shell 报 无法指定被请求的地址: Service ‘sparkDriver’ failed after 16 retries (on a random free port)</p>\n<p>pyspark -c spark.driver.bindAddress=127.0.0.1</p>\n<p>安装：下载解压</p>\n<p>配置：</p>\n<p>vim /conf/spark-env.sh</p>\n<p>export  SPARK_MASTER_HOST=192.168.0.200</p>\n<p>export  SPARK_LOCAL_IP=192.168.0.200</p>\n<p>启动：</p>\n<p>./sbin/start-master.sh</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181224205905268.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/49654050/could-not-bind-on-a-random-free-port-error-while-trying-to-connect-to-spark-mast</a></p>\n<p>spark bin/pyspark 和 bin/spark-shell 报 无法指定被请求的地址: Service ‘sparkDriver’ failed after 16 retries (on a random free port)</p>\n<p>pyspark -c spark.driver.bindAddress=127.0.0.1</p>\n<p>安装：下载解压</p>\n<p>配置：</p>\n<p>vim /conf/spark-env.sh</p>\n<p>export  SPARK_MASTER_HOST=192.168.0.200</p>\n<p>export  SPARK_LOCAL_IP=192.168.0.200</p>\n<p>启动：</p>\n<p>./sbin/start-master.sh</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181224205905268.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>"},{"post_url":"redis-notes","title":"Redis 笔记","date":"2018-11-18T14:28:58.000Z","_content":"1. 配置密码：在 redis.conf 中加入 requirepass yDvQ3t$hwoJvWree\n配置密码后登录 redis：redis-cli -a 'yDvQ3t$hwoJvWree'\n                 或: redis-cli 后 >> auth yDvQ3t$hwoJvWree\n登录远程 redis：redis-cli -h 192.168.1.115 -p 6379\n启动 redis：redis-server redis.conf &\n启动 redis：nohup redis-server redis.conf &\n附 nohup 说明：http://www.williamlong.info/archives/482.html\n关闭 redis：src/redis-cli shutdown\n配置密码后关闭 redis：redis-cli -a 'yDvQ3t$hwoJvWree' shutdown\n配置数据持久化路径：redis.conf中dir /home/redis/redis-3.2.9/data/\n这样可以避免在不同的目录里启动同一个 redis 时，造成没有使用上次持久化的数据，从而导致数据丢失\n\n \n\n2. redis List 类型数据\n查看list大小：LLEN lxinatklogs\n通过索引获取list中元素：LINDEX lxinatklogs -1\n获取指定范围内的元素的列表：LRANGE KEY_NAME 0 -1\n其中索引 0 表示 list 中第一个元素，1 表示第二个元素，-1 表示倒数第一个元素，-2 表示倒数第二个元素...\n\n \n\n3. redis 哈希数据\n查看所有值：HGETALL  keyname\n删除指定值：HDEL keyname [field ...]\n        例：HDEL priCloudList field1 field2 field3\n\n\n4. redis 常用命令\n检查键是否存在：EXISTS KEY_NAME\n获取存储在键中的值的数据类型：TYPE KEY_NAME\n为多个键分别设置它们的值：MSET key1 \"Hello\" key2 \"World\"\n","source":"_posts/redis-notes.md","raw":"---\npost_url: redis-notes\ntitle: Redis 笔记\ndate: 2018-11-18 22:28:58\ntags: redis\n---\n1. 配置密码：在 redis.conf 中加入 requirepass yDvQ3t$hwoJvWree\n配置密码后登录 redis：redis-cli -a 'yDvQ3t$hwoJvWree'\n                 或: redis-cli 后 >> auth yDvQ3t$hwoJvWree\n登录远程 redis：redis-cli -h 192.168.1.115 -p 6379\n启动 redis：redis-server redis.conf &\n启动 redis：nohup redis-server redis.conf &\n附 nohup 说明：http://www.williamlong.info/archives/482.html\n关闭 redis：src/redis-cli shutdown\n配置密码后关闭 redis：redis-cli -a 'yDvQ3t$hwoJvWree' shutdown\n配置数据持久化路径：redis.conf中dir /home/redis/redis-3.2.9/data/\n这样可以避免在不同的目录里启动同一个 redis 时，造成没有使用上次持久化的数据，从而导致数据丢失\n\n \n\n2. redis List 类型数据\n查看list大小：LLEN lxinatklogs\n通过索引获取list中元素：LINDEX lxinatklogs -1\n获取指定范围内的元素的列表：LRANGE KEY_NAME 0 -1\n其中索引 0 表示 list 中第一个元素，1 表示第二个元素，-1 表示倒数第一个元素，-2 表示倒数第二个元素...\n\n \n\n3. redis 哈希数据\n查看所有值：HGETALL  keyname\n删除指定值：HDEL keyname [field ...]\n        例：HDEL priCloudList field1 field2 field3\n\n\n4. redis 常用命令\n检查键是否存在：EXISTS KEY_NAME\n获取存储在键中的值的数据类型：TYPE KEY_NAME\n为多个键分别设置它们的值：MSET key1 \"Hello\" key2 \"World\"\n","slug":"redis-notes","published":1,"updated":"2019-03-24T10:20:47.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr1006m05ab32qwph33","content":"<ol>\n<li>配置密码：在 redis.conf 中加入 requirepass yDvQ3t$hwoJvWree<br>配置密码后登录 redis：redis-cli -a ‘yDvQ3t$hwoJvWree’<pre><code>或: redis-cli 后 &gt;&gt; auth yDvQ3t$hwoJvWree\n</code></pre>登录远程 redis：redis-cli -h 192.168.1.115 -p 6379<br>启动 redis：redis-server redis.conf &amp;<br>启动 redis：nohup redis-server redis.conf &amp;<br>附 nohup 说明：<a href=\"http://www.williamlong.info/archives/482.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/482.html</a><br>关闭 redis：src/redis-cli shutdown<br>配置密码后关闭 redis：redis-cli -a ‘yDvQ3t$hwoJvWree’ shutdown<br>配置数据持久化路径：redis.conf中dir /home/redis/redis-3.2.9/data/<br>这样可以避免在不同的目录里启动同一个 redis 时，造成没有使用上次持久化的数据，从而导致数据丢失</li>\n</ol>\n<ol start=\"2\">\n<li>redis List 类型数据<br>查看list大小：LLEN lxinatklogs<br>通过索引获取list中元素：LINDEX lxinatklogs -1<br>获取指定范围内的元素的列表：LRANGE KEY_NAME 0 -1<br>其中索引 0 表示 list 中第一个元素，1 表示第二个元素，-1 表示倒数第一个元素，-2 表示倒数第二个元素…</li>\n</ol>\n<ol start=\"3\">\n<li>redis 哈希数据<br>查看所有值：HGETALL  keyname<br>删除指定值：HDEL keyname [field …]<pre><code>例：HDEL priCloudList field1 field2 field3\n</code></pre></li>\n</ol>\n<ol start=\"4\">\n<li>redis 常用命令<br>检查键是否存在：EXISTS KEY_NAME<br>获取存储在键中的值的数据类型：TYPE KEY_NAME<br>为多个键分别设置它们的值：MSET key1 “Hello” key2 “World”</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>配置密码：在 redis.conf 中加入 requirepass yDvQ3t$hwoJvWree<br>配置密码后登录 redis：redis-cli -a ‘yDvQ3t$hwoJvWree’<pre><code>或: redis-cli 后 &gt;&gt; auth yDvQ3t$hwoJvWree\n</code></pre>登录远程 redis：redis-cli -h 192.168.1.115 -p 6379<br>启动 redis：redis-server redis.conf &amp;<br>启动 redis：nohup redis-server redis.conf &amp;<br>附 nohup 说明：<a href=\"http://www.williamlong.info/archives/482.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/482.html</a><br>关闭 redis：src/redis-cli shutdown<br>配置密码后关闭 redis：redis-cli -a ‘yDvQ3t$hwoJvWree’ shutdown<br>配置数据持久化路径：redis.conf中dir /home/redis/redis-3.2.9/data/<br>这样可以避免在不同的目录里启动同一个 redis 时，造成没有使用上次持久化的数据，从而导致数据丢失</li>\n</ol>\n<ol start=\"2\">\n<li>redis List 类型数据<br>查看list大小：LLEN lxinatklogs<br>通过索引获取list中元素：LINDEX lxinatklogs -1<br>获取指定范围内的元素的列表：LRANGE KEY_NAME 0 -1<br>其中索引 0 表示 list 中第一个元素，1 表示第二个元素，-1 表示倒数第一个元素，-2 表示倒数第二个元素…</li>\n</ol>\n<ol start=\"3\">\n<li>redis 哈希数据<br>查看所有值：HGETALL  keyname<br>删除指定值：HDEL keyname [field …]<pre><code>例：HDEL priCloudList field1 field2 field3\n</code></pre></li>\n</ol>\n<ol start=\"4\">\n<li>redis 常用命令<br>检查键是否存在：EXISTS KEY_NAME<br>获取存储在键中的值的数据类型：TYPE KEY_NAME<br>为多个键分别设置它们的值：MSET key1 “Hello” key2 “World”</li>\n</ol>\n"},{"post_url":"resin-tomcat-spring-task","title":"resin、tomcat 中添加 host 配置后 spring 定时任务执行多次","date":"2019-02-15T09:16:38.000Z","_content":"\n## tomcat\n配置文件 server.xml 中 appBase=\"webapps\" 改为 appBase=\"\"\n![](/images/20190215170932231.png)\n\n## resin\n配置文件 resin.xml 中 <web-app-deploy path=\"webapps\" 改为 <web-app-deploy path=\"\" \n![](/images/20190215171432824.png)","source":"_posts/resin-tomcat-spring-task.md","raw":"---\npost_url: resin-tomcat-spring-task\ntitle: resin、tomcat 中添加 host 配置后 spring 定时任务执行多次\ndate: 2019-02-15 17:16:38\ntags: [tomcat, resin, spring]\n---\n\n## tomcat\n配置文件 server.xml 中 appBase=\"webapps\" 改为 appBase=\"\"\n![](/images/20190215170932231.png)\n\n## resin\n配置文件 resin.xml 中 <web-app-deploy path=\"webapps\" 改为 <web-app-deploy path=\"\" \n![](/images/20190215171432824.png)","slug":"resin-tomcat-spring-task","published":1,"updated":"2019-03-25T14:03:35.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr4006p05ab4jjjivjn","content":"<h2 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a>tomcat</h2><p>配置文件 server.xml 中 appBase=”webapps” 改为 appBase=””<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190215170932231.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"resin\"><a href=\"#resin\" class=\"headerlink\" title=\"resin\"></a>resin</h2><p>配置文件 resin.xml 中 &lt;web-app-deploy path=”webapps” 改为 &lt;web-app-deploy path=””<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190215171432824.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a>tomcat</h2><p>配置文件 server.xml 中 appBase=”webapps” 改为 appBase=””<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190215170932231.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"resin\"><a href=\"#resin\" class=\"headerlink\" title=\"resin\"></a>resin</h2><p>配置文件 resin.xml 中 &lt;web-app-deploy path=”webapps” 改为 &lt;web-app-deploy path=””<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190215171432824.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"resin","title":"resin安全配置,ip黑白名单,只允许指定ip访问resin-admin,拒绝某些ip访问webapp","date":"2017-09-18T02:18:04.000Z","_content":"为resin-admin设置白名单，webapps设置黑名单：\n\n1. resin.xml中加入admin的host配置resin:Allow，如下：\n```\n<cluster id=\"app\">\n    ......\n    <!-- 只允许指定ip访问resin-admin -->\n    <host id=\"${web_admin_host}\" root-directory=\"${web_admin_host}\">\n        <web-app id=\"/resin-admin\" root-directory=\"${resin.root}/doc/admin\">\n            <resin:Allow url-pattern=\"/admin/*\">\n                <resin:IfNetwork value=\"${web_admin_allow_host}\"/>\n            </resin:Allow>\n        </web-app>\n    </host>\n</cluster>\n```\n\n2. resin.properties中加一个参数用来放允许访问的ip：比如\n```\nweb_admin_allow_host: 10.10.10.10 10.10.10.11 10.10.10.12\n```\n3. 拓展：\n\n对于自己的webapps，也可以使用同样的方法配置允许访问的ip；\n\n如果要拒绝某些ip的访问，可以用resin:Forbidden\n\n网上resin相关文章相对比较少，需要多参考官方文档\n\n官方文档地址：http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html\n\n \n\n4. 笔记\n```\n<host id=\"tools.api.iaiot.com\" root-directory=\".\">\n        <host-alias>tools.api.iaiot.com</host-alias>\n        <web-app id=\"/v\" root-directory=\"webapps/visual-platform\" />\n        <web-app id=\"/s\" root-directory=\"webapps/search-api\" />\n        <web-app id=\"/a\" root-directory=\"webapps/alarm-api\" />\n</host>\n```","source":"_posts/resin.md","raw":"---\npost_url: resin\ntitle: resin安全配置,ip黑白名单,只允许指定ip访问resin-admin,拒绝某些ip访问webapp\ndate: 2017-09-18 10:18:04\ntags: resin\n---\n为resin-admin设置白名单，webapps设置黑名单：\n\n1. resin.xml中加入admin的host配置resin:Allow，如下：\n```\n<cluster id=\"app\">\n    ......\n    <!-- 只允许指定ip访问resin-admin -->\n    <host id=\"${web_admin_host}\" root-directory=\"${web_admin_host}\">\n        <web-app id=\"/resin-admin\" root-directory=\"${resin.root}/doc/admin\">\n            <resin:Allow url-pattern=\"/admin/*\">\n                <resin:IfNetwork value=\"${web_admin_allow_host}\"/>\n            </resin:Allow>\n        </web-app>\n    </host>\n</cluster>\n```\n\n2. resin.properties中加一个参数用来放允许访问的ip：比如\n```\nweb_admin_allow_host: 10.10.10.10 10.10.10.11 10.10.10.12\n```\n3. 拓展：\n\n对于自己的webapps，也可以使用同样的方法配置允许访问的ip；\n\n如果要拒绝某些ip的访问，可以用resin:Forbidden\n\n网上resin相关文章相对比较少，需要多参考官方文档\n\n官方文档地址：http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html\n\n \n\n4. 笔记\n```\n<host id=\"tools.api.iaiot.com\" root-directory=\".\">\n        <host-alias>tools.api.iaiot.com</host-alias>\n        <web-app id=\"/v\" root-directory=\"webapps/visual-platform\" />\n        <web-app id=\"/s\" root-directory=\"webapps/search-api\" />\n        <web-app id=\"/a\" root-directory=\"webapps/alarm-api\" />\n</host>\n```","slug":"resin","published":1,"updated":"2019-03-24T12:33:50.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr4006r05ab007qcifa","content":"<p>为resin-admin设置白名单，webapps设置黑名单：</p>\n<ol>\n<li><p>resin.xml中加入admin的host配置resin:Allow，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cluster id=&quot;app&quot;&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;!-- 只允许指定ip访问resin-admin --&gt;</span><br><span class=\"line\">    &lt;host id=&quot;$&#123;web_admin_host&#125;&quot; root-directory=&quot;$&#123;web_admin_host&#125;&quot;&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/resin-admin&quot; root-directory=&quot;$&#123;resin.root&#125;/doc/admin&quot;&gt;</span><br><span class=\"line\">            &lt;resin:Allow url-pattern=&quot;/admin/*&quot;&gt;</span><br><span class=\"line\">                &lt;resin:IfNetwork value=&quot;$&#123;web_admin_allow_host&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/resin:Allow&gt;</span><br><span class=\"line\">        &lt;/web-app&gt;</span><br><span class=\"line\">    &lt;/host&gt;</span><br><span class=\"line\">&lt;/cluster&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>resin.properties中加一个参数用来放允许访问的ip：比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web_admin_allow_host: 10.10.10.10 10.10.10.11 10.10.10.12</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拓展：</p>\n</li>\n</ol>\n<p>对于自己的webapps，也可以使用同样的方法配置允许访问的ip；</p>\n<p>如果要拒绝某些ip的访问，可以用resin:Forbidden</p>\n<p>网上resin相关文章相对比较少，需要多参考官方文档</p>\n<p>官方文档地址：<a href=\"http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html\" target=\"_blank\" rel=\"noopener\">http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html</a></p>\n<ol start=\"4\">\n<li>笔记<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;host id=&quot;tools.api.iaiot.com&quot; root-directory=&quot;.&quot;&gt;</span><br><span class=\"line\">        &lt;host-alias&gt;tools.api.iaiot.com&lt;/host-alias&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/v&quot; root-directory=&quot;webapps/visual-platform&quot; /&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/s&quot; root-directory=&quot;webapps/search-api&quot; /&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/a&quot; root-directory=&quot;webapps/alarm-api&quot; /&gt;</span><br><span class=\"line\">&lt;/host&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>为resin-admin设置白名单，webapps设置黑名单：</p>\n<ol>\n<li><p>resin.xml中加入admin的host配置resin:Allow，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cluster id=&quot;app&quot;&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;!-- 只允许指定ip访问resin-admin --&gt;</span><br><span class=\"line\">    &lt;host id=&quot;$&#123;web_admin_host&#125;&quot; root-directory=&quot;$&#123;web_admin_host&#125;&quot;&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/resin-admin&quot; root-directory=&quot;$&#123;resin.root&#125;/doc/admin&quot;&gt;</span><br><span class=\"line\">            &lt;resin:Allow url-pattern=&quot;/admin/*&quot;&gt;</span><br><span class=\"line\">                &lt;resin:IfNetwork value=&quot;$&#123;web_admin_allow_host&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/resin:Allow&gt;</span><br><span class=\"line\">        &lt;/web-app&gt;</span><br><span class=\"line\">    &lt;/host&gt;</span><br><span class=\"line\">&lt;/cluster&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>resin.properties中加一个参数用来放允许访问的ip：比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web_admin_allow_host: 10.10.10.10 10.10.10.11 10.10.10.12</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拓展：</p>\n</li>\n</ol>\n<p>对于自己的webapps，也可以使用同样的方法配置允许访问的ip；</p>\n<p>如果要拒绝某些ip的访问，可以用resin:Forbidden</p>\n<p>网上resin相关文章相对比较少，需要多参考官方文档</p>\n<p>官方文档地址：<a href=\"http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html\" target=\"_blank\" rel=\"noopener\">http://javadoc4.caucho.com/com/caucho/rewrite/IfNetwork.html</a></p>\n<ol start=\"4\">\n<li>笔记<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;host id=&quot;tools.api.iaiot.com&quot; root-directory=&quot;.&quot;&gt;</span><br><span class=\"line\">        &lt;host-alias&gt;tools.api.iaiot.com&lt;/host-alias&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/v&quot; root-directory=&quot;webapps/visual-platform&quot; /&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/s&quot; root-directory=&quot;webapps/search-api&quot; /&gt;</span><br><span class=\"line\">        &lt;web-app id=&quot;/a&quot; root-directory=&quot;webapps/alarm-api&quot; /&gt;</span><br><span class=\"line\">&lt;/host&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"post_url":"shangqiao","title":"点击自定义按钮弹出百度商桥对话框","date":"2018-08-20T14:29:15.000Z","_content":"原文地址：https://blog.csdn.net/SeekerTime/article/details/66973659\n\n在原文基础上做了一些优化。\n\n在页面中已经成功安装了百度商桥的情况下，想通过点击自定义的按钮来弹出百度商桥的对话框，来达到及时沟通和不使页面跳转的目的。有以下解决方法：\n\n1. 首先需要把你的按钮添加一个 class，例如 加一个 “shangqiao”\n\n```html\n<a class=\"shangqiao\" href=\"javascript:void(0);\" rel=\"nofollow\">我要咨询</a>\n// 其中 rel=\"nofollow\" 是告诉蜘蛛无需追踪此 a 标签中的目标页\n```\n2. 然后在js中引入 jquery，添加一个\n```js\n$(function(){\n    // 点击按钮时判断 百度商桥代码中的“我要咨询”按钮的元素是否存在，存在的话就执行一次点击事件\n    $(\".shangqiao\").click(function(event) {\n        if ($('#nb_invite_ok').length > 0) {\n            $('#nb_invite_ok').click();\n        }\n    });\n});\n```\n这样点击我要咨询按钮就可以调用百度商桥的咨询弹框(商桥在线时)或留言框(商桥离线时)了","source":"_posts/shangqiao.md","raw":"---\npost_url: shangqiao\ntitle: 点击自定义按钮弹出百度商桥对话框\ndate: 2018-08-20 22:29:15\ntags: seo\n---\n原文地址：https://blog.csdn.net/SeekerTime/article/details/66973659\n\n在原文基础上做了一些优化。\n\n在页面中已经成功安装了百度商桥的情况下，想通过点击自定义的按钮来弹出百度商桥的对话框，来达到及时沟通和不使页面跳转的目的。有以下解决方法：\n\n1. 首先需要把你的按钮添加一个 class，例如 加一个 “shangqiao”\n\n```html\n<a class=\"shangqiao\" href=\"javascript:void(0);\" rel=\"nofollow\">我要咨询</a>\n// 其中 rel=\"nofollow\" 是告诉蜘蛛无需追踪此 a 标签中的目标页\n```\n2. 然后在js中引入 jquery，添加一个\n```js\n$(function(){\n    // 点击按钮时判断 百度商桥代码中的“我要咨询”按钮的元素是否存在，存在的话就执行一次点击事件\n    $(\".shangqiao\").click(function(event) {\n        if ($('#nb_invite_ok').length > 0) {\n            $('#nb_invite_ok').click();\n        }\n    });\n});\n```\n这样点击我要咨询按钮就可以调用百度商桥的咨询弹框(商桥在线时)或留言框(商桥离线时)了","slug":"shangqiao","published":1,"updated":"2019-03-25T14:03:56.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr5006u05ab4vmmsp4g","content":"<p>原文地址：<a href=\"https://blog.csdn.net/SeekerTime/article/details/66973659\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/SeekerTime/article/details/66973659</a></p>\n<p>在原文基础上做了一些优化。</p>\n<p>在页面中已经成功安装了百度商桥的情况下，想通过点击自定义的按钮来弹出百度商桥的对话框，来达到及时沟通和不使页面跳转的目的。有以下解决方法：</p>\n<ol>\n<li>首先需要把你的按钮添加一个 class，例如 加一个 “shangqiao”</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shangqiao\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0);\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>我要咨询<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">// 其中 rel=\"nofollow\" 是告诉蜘蛛无需追踪此 a 标签中的目标页</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>然后在js中引入 jquery，添加一个<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 点击按钮时判断 百度商桥代码中的“我要咨询”按钮的元素是否存在，存在的话就执行一次点击事件</span></span><br><span class=\"line\">    $(<span class=\"string\">\".shangqiao\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'#nb_invite_ok'</span>).length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'#nb_invite_ok'</span>).click();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样点击我要咨询按钮就可以调用百度商桥的咨询弹框(商桥在线时)或留言框(商桥离线时)了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://blog.csdn.net/SeekerTime/article/details/66973659\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/SeekerTime/article/details/66973659</a></p>\n<p>在原文基础上做了一些优化。</p>\n<p>在页面中已经成功安装了百度商桥的情况下，想通过点击自定义的按钮来弹出百度商桥的对话框，来达到及时沟通和不使页面跳转的目的。有以下解决方法：</p>\n<ol>\n<li>首先需要把你的按钮添加一个 class，例如 加一个 “shangqiao”</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shangqiao\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:void(0);\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>我要咨询<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">// 其中 rel=\"nofollow\" 是告诉蜘蛛无需追踪此 a 标签中的目标页</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>然后在js中引入 jquery，添加一个<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 点击按钮时判断 百度商桥代码中的“我要咨询”按钮的元素是否存在，存在的话就执行一次点击事件</span></span><br><span class=\"line\">    $(<span class=\"string\">\".shangqiao\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'#nb_invite_ok'</span>).length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'#nb_invite_ok'</span>).click();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样点击我要咨询按钮就可以调用百度商桥的咨询弹框(商桥在线时)或留言框(商桥离线时)了</p>\n"},{"post_url":"seo","title":"业余 网站 SEO 实践总结","date":"2018-09-07T05:14:49.000Z","_content":"\n## 301 302 的选择\n```\n301：永久重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址。\n302：临时跳转，蜘蛛会认为新的网址是暂时的，所以搜索引擎会抓取新的内容而保留旧的地址。\n实例：如果是设备跳转适配，https://www.vhxsl.com/ 转 https://m.vhxsl.com/ 用 302；\n如果是 http 跳转 https，用 301;\n如果是网站更换域名或改版用 301。\n \nNginx配置：rewrite ^(.*)$  https://$host$1 permanent; rewrite 后跟 permanent 会返回 301\nrewrite ^/(.*)$  https://m.vhxsl.com$uri redirect; 后跟 redirect 返回 302\n```\n\n##  Nginx PC/移动 站点跳转适配\n```\n1.PC 转 移动\nif ( $http_user_agent ~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n    rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;\n}\n2.移动 转 PC\nif ( $http_user_agent !~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n    rewrite ^/(.*)$  https://www.vhxsl.com$uri redirect;\n}\n```\n## 收录索引权重\n```\n1.在百度站内搜索提交 sitemap 比在百度站长里提交 sitemap 收录快，纯直觉，是不是真这样就不知道了。\n2.据说通过百度站长后台提交的链接的权重会比百度蜘蛛主动抓取收录的链接的权重低 2%，这个也不确定。\n```\n\n## CDN 回源\n```\n用 CDN 时一定要将来自搜索引擎的请求直接回源！\n百度 CDN 里有明确说明：用户的域名在接入 CDN 后，因 CDN 频繁变更 IP 会影响域名搜索结果的权重。\n用户可选择开启搜索引擎自动回源功能，将来自搜索引擎的请求直接回源，保证搜索引擎权重的稳定性。\n```\n\n## 域名解析\n```\n设置域名解析时向搜索引擎爬虫的 DNS（在添加记录的解析路线里可以看到该选项），返回源站的记录值。\n如果用了 CDN，并且在 CDN 里配置了搜索引擎回源，这里就可以不配置了。\n```","source":"_posts/seo.md","raw":"---\npost_url: seo\ntitle: 业余 网站 SEO 实践总结\ndate: 2018-09-07 13:14:49\ntags: seo\n---\n\n## 301 302 的选择\n```\n301：永久重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址。\n302：临时跳转，蜘蛛会认为新的网址是暂时的，所以搜索引擎会抓取新的内容而保留旧的地址。\n实例：如果是设备跳转适配，https://www.vhxsl.com/ 转 https://m.vhxsl.com/ 用 302；\n如果是 http 跳转 https，用 301;\n如果是网站更换域名或改版用 301。\n \nNginx配置：rewrite ^(.*)$  https://$host$1 permanent; rewrite 后跟 permanent 会返回 301\nrewrite ^/(.*)$  https://m.vhxsl.com$uri redirect; 后跟 redirect 返回 302\n```\n\n##  Nginx PC/移动 站点跳转适配\n```\n1.PC 转 移动\nif ( $http_user_agent ~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n    rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;\n}\n2.移动 转 PC\nif ( $http_user_agent !~* \"(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)\" ){\n    rewrite ^/(.*)$  https://www.vhxsl.com$uri redirect;\n}\n```\n## 收录索引权重\n```\n1.在百度站内搜索提交 sitemap 比在百度站长里提交 sitemap 收录快，纯直觉，是不是真这样就不知道了。\n2.据说通过百度站长后台提交的链接的权重会比百度蜘蛛主动抓取收录的链接的权重低 2%，这个也不确定。\n```\n\n## CDN 回源\n```\n用 CDN 时一定要将来自搜索引擎的请求直接回源！\n百度 CDN 里有明确说明：用户的域名在接入 CDN 后，因 CDN 频繁变更 IP 会影响域名搜索结果的权重。\n用户可选择开启搜索引擎自动回源功能，将来自搜索引擎的请求直接回源，保证搜索引擎权重的稳定性。\n```\n\n## 域名解析\n```\n设置域名解析时向搜索引擎爬虫的 DNS（在添加记录的解析路线里可以看到该选项），返回源站的记录值。\n如果用了 CDN，并且在 CDN 里配置了搜索引擎回源，这里就可以不配置了。\n```","slug":"seo","published":1,"updated":"2019-03-24T11:34:25.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr6006w05abcew2tu18","content":"<h2 id=\"301-302-的选择\"><a href=\"#301-302-的选择\" class=\"headerlink\" title=\"301 302 的选择\"></a>301 302 的选择</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">301：永久重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址。</span><br><span class=\"line\">302：临时跳转，蜘蛛会认为新的网址是暂时的，所以搜索引擎会抓取新的内容而保留旧的地址。</span><br><span class=\"line\">实例：如果是设备跳转适配，https://www.vhxsl.com/ 转 https://m.vhxsl.com/ 用 302；</span><br><span class=\"line\">如果是 http 跳转 https，用 301;</span><br><span class=\"line\">如果是网站更换域名或改版用 301。</span><br><span class=\"line\"> </span><br><span class=\"line\">Nginx配置：rewrite ^(.*)$  https://$host$1 permanent; rewrite 后跟 permanent 会返回 301</span><br><span class=\"line\">rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect; 后跟 redirect 返回 302</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx-PC-移动-站点跳转适配\"><a href=\"#Nginx-PC-移动-站点跳转适配\" class=\"headerlink\" title=\"Nginx PC/移动 站点跳转适配\"></a>Nginx PC/移动 站点跳转适配</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.PC 转 移动</span><br><span class=\"line\">if ( $http_user_agent ~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">    rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2.移动 转 PC</span><br><span class=\"line\">if ( $http_user_agent !~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">    rewrite ^/(.*)$  https://www.vhxsl.com$uri redirect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"收录索引权重\"><a href=\"#收录索引权重\" class=\"headerlink\" title=\"收录索引权重\"></a>收录索引权重</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在百度站内搜索提交 sitemap 比在百度站长里提交 sitemap 收录快，纯直觉，是不是真这样就不知道了。</span><br><span class=\"line\">2.据说通过百度站长后台提交的链接的权重会比百度蜘蛛主动抓取收录的链接的权重低 2%，这个也不确定。</span><br></pre></td></tr></table></figure>\n<h2 id=\"CDN-回源\"><a href=\"#CDN-回源\" class=\"headerlink\" title=\"CDN 回源\"></a>CDN 回源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 CDN 时一定要将来自搜索引擎的请求直接回源！</span><br><span class=\"line\">百度 CDN 里有明确说明：用户的域名在接入 CDN 后，因 CDN 频繁变更 IP 会影响域名搜索结果的权重。</span><br><span class=\"line\">用户可选择开启搜索引擎自动回源功能，将来自搜索引擎的请求直接回源，保证搜索引擎权重的稳定性。</span><br></pre></td></tr></table></figure>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置域名解析时向搜索引擎爬虫的 DNS（在添加记录的解析路线里可以看到该选项），返回源站的记录值。</span><br><span class=\"line\">如果用了 CDN，并且在 CDN 里配置了搜索引擎回源，这里就可以不配置了。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"301-302-的选择\"><a href=\"#301-302-的选择\" class=\"headerlink\" title=\"301 302 的选择\"></a>301 302 的选择</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">301：永久重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址。</span><br><span class=\"line\">302：临时跳转，蜘蛛会认为新的网址是暂时的，所以搜索引擎会抓取新的内容而保留旧的地址。</span><br><span class=\"line\">实例：如果是设备跳转适配，https://www.vhxsl.com/ 转 https://m.vhxsl.com/ 用 302；</span><br><span class=\"line\">如果是 http 跳转 https，用 301;</span><br><span class=\"line\">如果是网站更换域名或改版用 301。</span><br><span class=\"line\"> </span><br><span class=\"line\">Nginx配置：rewrite ^(.*)$  https://$host$1 permanent; rewrite 后跟 permanent 会返回 301</span><br><span class=\"line\">rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect; 后跟 redirect 返回 302</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx-PC-移动-站点跳转适配\"><a href=\"#Nginx-PC-移动-站点跳转适配\" class=\"headerlink\" title=\"Nginx PC/移动 站点跳转适配\"></a>Nginx PC/移动 站点跳转适配</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.PC 转 移动</span><br><span class=\"line\">if ( $http_user_agent ~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">    rewrite ^/(.*)$  https://m.vhxsl.com$uri redirect;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2.移动 转 PC</span><br><span class=\"line\">if ( $http_user_agent !~* &quot;(Android|iPhone|Windows Phone|UC|Kindle|iPod|BlackBerry)&quot; )&#123;</span><br><span class=\"line\">    rewrite ^/(.*)$  https://www.vhxsl.com$uri redirect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"收录索引权重\"><a href=\"#收录索引权重\" class=\"headerlink\" title=\"收录索引权重\"></a>收录索引权重</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在百度站内搜索提交 sitemap 比在百度站长里提交 sitemap 收录快，纯直觉，是不是真这样就不知道了。</span><br><span class=\"line\">2.据说通过百度站长后台提交的链接的权重会比百度蜘蛛主动抓取收录的链接的权重低 2%，这个也不确定。</span><br></pre></td></tr></table></figure>\n<h2 id=\"CDN-回源\"><a href=\"#CDN-回源\" class=\"headerlink\" title=\"CDN 回源\"></a>CDN 回源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 CDN 时一定要将来自搜索引擎的请求直接回源！</span><br><span class=\"line\">百度 CDN 里有明确说明：用户的域名在接入 CDN 后，因 CDN 频繁变更 IP 会影响域名搜索结果的权重。</span><br><span class=\"line\">用户可选择开启搜索引擎自动回源功能，将来自搜索引擎的请求直接回源，保证搜索引擎权重的稳定性。</span><br></pre></td></tr></table></figure>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置域名解析时向搜索引擎爬虫的 DNS（在添加记录的解析路线里可以看到该选项），返回源站的记录值。</span><br><span class=\"line\">如果用了 CDN，并且在 CDN 里配置了搜索引擎回源，这里就可以不配置了。</span><br></pre></td></tr></table></figure>"},{"post_url":"storm-no-IRichSpout","title":"Storm 本地调试 报 NoClassDefFoundError:org/apache/storm/topology/IRichSpout","date":"2018-09-07T03:58:16.000Z","_content":"\nStorm 本地调试 报 java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout\n\n```java\njava.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)\n\tat java.lang.Class.getMethod0(Class.java:3018)\n\tat java.lang.Class.getMethod(Class.java:1784)\n\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)\n\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)\nCaused by: java.lang.ClassNotFoundException: org.apache.storm.topology.IRichSpout\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 7 more\nError: A JNI error has occurred, please check your installation and try again\nException in thread \"main\" \n```\n\npom.xml 中去掉 <scope>provided</scope> 即可\n```xml\n<dependency>\n    <groupId>org.apache.storm</groupId>\n    <artifactId>storm-core</artifactId>\n    <version>1.2.2</version>\n    <!--<scope>provided</scope>-->\n</dependency>\n```\n\nMaven Dependency Scope：http://uule.iteye.com/blog/2087485","source":"_posts/storm-no-IRichSpout.md","raw":"---\npost_url: storm-no-IRichSpout\ntitle: Storm 本地调试 报 NoClassDefFoundError:org/apache/storm/topology/IRichSpout\ndate: 2018-09-07 11:58:16\ntags: storm\n---\n\nStorm 本地调试 报 java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout\n\n```java\njava.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)\n\tat java.lang.Class.getMethod0(Class.java:3018)\n\tat java.lang.Class.getMethod(Class.java:1784)\n\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)\n\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)\nCaused by: java.lang.ClassNotFoundException: org.apache.storm.topology.IRichSpout\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 7 more\nError: A JNI error has occurred, please check your installation and try again\nException in thread \"main\" \n```\n\npom.xml 中去掉 <scope>provided</scope> 即可\n```xml\n<dependency>\n    <groupId>org.apache.storm</groupId>\n    <artifactId>storm-core</artifactId>\n    <version>1.2.2</version>\n    <!--<scope>provided</scope>-->\n</dependency>\n```\n\nMaven Dependency Scope：http://uule.iteye.com/blog/2087485","slug":"storm-no-IRichSpout","published":1,"updated":"2019-03-24T11:31:15.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr7006y05abjf03ykf2","content":"<p>Storm 本地调试 报 java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class=\"line\">\tat java.lang.Class.privateGetDeclaredMethods(Class.java:<span class=\"number\">2701</span>)</span><br><span class=\"line\">\tat java.lang.Class.privateGetMethodRecursive(Class.java:<span class=\"number\">3048</span>)</span><br><span class=\"line\">\tat java.lang.Class.getMethod0(Class.java:<span class=\"number\">3018</span>)</span><br><span class=\"line\">\tat java.lang.Class.getMethod(Class.java:<span class=\"number\">1784</span>)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:<span class=\"number\">544</span>)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:<span class=\"number\">526</span>)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.storm.topology.IRichSpout</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:<span class=\"number\">381</span>)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:<span class=\"number\">424</span>)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class=\"number\">335</span>)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:<span class=\"number\">357</span>)</span><br><span class=\"line\">\t... <span class=\"number\">7</span> more</span><br><span class=\"line\">Error: A JNI error has occurred, please check your installation and <span class=\"keyword\">try</span> again</span><br><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span></span><br></pre></td></tr></table></figure>\n<p>pom.xml 中去掉 <scope>provided</scope> 即可<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.storm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>storm-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Maven Dependency Scope：<a href=\"http://uule.iteye.com/blog/2087485\" target=\"_blank\" rel=\"noopener\">http://uule.iteye.com/blog/2087485</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Storm 本地调试 报 java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class=\"line\">\tat java.lang.Class.privateGetDeclaredMethods(Class.java:<span class=\"number\">2701</span>)</span><br><span class=\"line\">\tat java.lang.Class.privateGetMethodRecursive(Class.java:<span class=\"number\">3048</span>)</span><br><span class=\"line\">\tat java.lang.Class.getMethod0(Class.java:<span class=\"number\">3018</span>)</span><br><span class=\"line\">\tat java.lang.Class.getMethod(Class.java:<span class=\"number\">1784</span>)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:<span class=\"number\">544</span>)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:<span class=\"number\">526</span>)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.storm.topology.IRichSpout</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:<span class=\"number\">381</span>)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:<span class=\"number\">424</span>)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class=\"number\">335</span>)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:<span class=\"number\">357</span>)</span><br><span class=\"line\">\t... <span class=\"number\">7</span> more</span><br><span class=\"line\">Error: A JNI error has occurred, please check your installation and <span class=\"keyword\">try</span> again</span><br><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span></span><br></pre></td></tr></table></figure>\n<p>pom.xml 中去掉 <scope>provided</scope> 即可<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.storm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>storm-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Maven Dependency Scope：<a href=\"http://uule.iteye.com/blog/2087485\" target=\"_blank\" rel=\"noopener\">http://uule.iteye.com/blog/2087485</a></p>\n"},{"post_url":"spring-task","title":"java spring 定时任务","date":"2019-02-18T03:07:34.000Z","_content":"## xml 配置\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/context\n      http://www.springframework.org/schema/context/spring-context.xsd\n      http://www.springframework.org/schema/tx\n      http://www.springframework.org/schema/tx/spring-tx.xsd\n      http://www.springframework.org/schema/aop\n      http://www.springframework.org/schema/aop/spring-aop.xsd\n      http://www.springframework.org/schema/task\n      http://www.springframework.org/schema/task/spring-task.xsd\n      http://www.springframework.org/schema/mvc\n      http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n \n    <context:component-scan base-package=\"com.iaiot.xxx\"/>\n \n<!--定时任务-->\n     <task:annotation-driven scheduler=\"myScheduler\"/>\n     <task:scheduler id=\"myScheduler\" pool-size=\"5\"/>\n```\n\n## Java 实现\n```Java\npackage com.iaiot.xxx.task;\n \nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n \n/**\n * 生成报告的定时任务\n *\n * @author xxx\n */\n@Component\npublic class ReportTask {\n \n    /**\n     * Logger\n     */\n    private static Logger LOG = LoggerFactory.getLogger(ReportTask.class);\n \n \n    /**\n     * 生成日报的定时任务(每天凌晨1点执行)\n     */\n    @Scheduled(cron = \"0 0 1 * * ?\")\n    public void generateDayReport() {\n        LOG.info(\"开始生成日报...\" + System.currentTimeMillis());\n    }\n \n    /**\n     * 生成周报的定时任务(每周一凌晨2点30执行)\n     */\n    @Scheduled(cron = \"0 30 2 ? * MON\")\n    public void generateWeekReport() {\n        LOG.info(\"开始生成周报...\" + System.currentTimeMillis());\n    }\n \n    /**\n     * 生成月报的定时任务(每月1号凌晨4点执行)\n     */\n    @Scheduled(cron = \"0 0 4 1 * ?\")\n    public void generateMonthReport() {\n        LOG.info(\"开始生成月报...\" + System.currentTimeMillis());\n    }\n \n}\n```\n\n## corn 表达式\n每天凌晨1点执行：0 0 1 * * ?\n每周一凌晨2点30执行：0 30 2 ? * MON\n每月1号凌晨4点执行：0 0 4 1 * ?","source":"_posts/spring-task.md","raw":"---\npost_url: spring-task\ntitle: java spring 定时任务\ndate: 2019-02-18 11:07:34\ntags: spring\n---\n## xml 配置\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/context\n      http://www.springframework.org/schema/context/spring-context.xsd\n      http://www.springframework.org/schema/tx\n      http://www.springframework.org/schema/tx/spring-tx.xsd\n      http://www.springframework.org/schema/aop\n      http://www.springframework.org/schema/aop/spring-aop.xsd\n      http://www.springframework.org/schema/task\n      http://www.springframework.org/schema/task/spring-task.xsd\n      http://www.springframework.org/schema/mvc\n      http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n \n    <context:component-scan base-package=\"com.iaiot.xxx\"/>\n \n<!--定时任务-->\n     <task:annotation-driven scheduler=\"myScheduler\"/>\n     <task:scheduler id=\"myScheduler\" pool-size=\"5\"/>\n```\n\n## Java 实现\n```Java\npackage com.iaiot.xxx.task;\n \nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n \n/**\n * 生成报告的定时任务\n *\n * @author xxx\n */\n@Component\npublic class ReportTask {\n \n    /**\n     * Logger\n     */\n    private static Logger LOG = LoggerFactory.getLogger(ReportTask.class);\n \n \n    /**\n     * 生成日报的定时任务(每天凌晨1点执行)\n     */\n    @Scheduled(cron = \"0 0 1 * * ?\")\n    public void generateDayReport() {\n        LOG.info(\"开始生成日报...\" + System.currentTimeMillis());\n    }\n \n    /**\n     * 生成周报的定时任务(每周一凌晨2点30执行)\n     */\n    @Scheduled(cron = \"0 30 2 ? * MON\")\n    public void generateWeekReport() {\n        LOG.info(\"开始生成周报...\" + System.currentTimeMillis());\n    }\n \n    /**\n     * 生成月报的定时任务(每月1号凌晨4点执行)\n     */\n    @Scheduled(cron = \"0 0 4 1 * ?\")\n    public void generateMonthReport() {\n        LOG.info(\"开始生成月报...\" + System.currentTimeMillis());\n    }\n \n}\n```\n\n## corn 表达式\n每天凌晨1点执行：0 0 1 * * ?\n每周一凌晨2点30执行：0 30 2 ? * MON\n每月1号凌晨4点执行：0 0 4 1 * ?","slug":"spring-task","published":1,"updated":"2019-03-25T14:04:00.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr8007005abh56syppd","content":"<h2 id=\"xml-配置\"><a href=\"#xml-配置\" class=\"headerlink\" title=\"xml 配置\"></a>xml 配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:task</span>=<span class=\"string\">\"http://www.springframework.org/schema/task\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/task</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iaiot.xxx\"</span>/&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--定时任务--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">task:annotation-driven</span> <span class=\"attr\">scheduler</span>=<span class=\"string\">\"myScheduler\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">task:scheduler</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myScheduler\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Java-实现\"><a href=\"#Java-实现\" class=\"headerlink\" title=\"Java 实现\"></a>Java 实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iaiot.xxx.task;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成报告的定时任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportTask</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Logger</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger LOG = LoggerFactory.getLogger(ReportTask.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成日报的定时任务(每天凌晨1点执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 0 1 * * ?\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateDayReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成日报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成周报的定时任务(每周一凌晨2点30执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 30 2 ? * MON\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateWeekReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成周报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成月报的定时任务(每月1号凌晨4点执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 0 4 1 * ?\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateMonthReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成月报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"corn-表达式\"><a href=\"#corn-表达式\" class=\"headerlink\" title=\"corn 表达式\"></a>corn 表达式</h2><p>每天凌晨1点执行：0 0 1 <em> </em> ?<br>每周一凌晨2点30执行：0 30 2 ? <em> MON<br>每月1号凌晨4点执行：0 0 4 1 </em> ?</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"xml-配置\"><a href=\"#xml-配置\" class=\"headerlink\" title=\"xml 配置\"></a>xml 配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:task</span>=<span class=\"string\">\"http://www.springframework.org/schema/task\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/task</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      http://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iaiot.xxx\"</span>/&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--定时任务--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">task:annotation-driven</span> <span class=\"attr\">scheduler</span>=<span class=\"string\">\"myScheduler\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">task:scheduler</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myScheduler\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Java-实现\"><a href=\"#Java-实现\" class=\"headerlink\" title=\"Java 实现\"></a>Java 实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iaiot.xxx.task;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成报告的定时任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportTask</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Logger</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger LOG = LoggerFactory.getLogger(ReportTask.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成日报的定时任务(每天凌晨1点执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 0 1 * * ?\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateDayReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成日报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成周报的定时任务(每周一凌晨2点30执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 30 2 ? * MON\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateWeekReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成周报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成月报的定时任务(每月1号凌晨4点执行)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 0 4 1 * ?\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generateMonthReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"开始生成月报...\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"corn-表达式\"><a href=\"#corn-表达式\" class=\"headerlink\" title=\"corn 表达式\"></a>corn 表达式</h2><p>每天凌晨1点执行：0 0 1 <em> </em> ?<br>每周一凌晨2点30执行：0 30 2 ? <em> MON<br>每月1号凌晨4点执行：0 0 4 1 </em> ?</p>\n"},{"title":"ubuntu 笔记","post_url":"ubuntu-notes","date":"2019-01-12T09:07:28.000Z","_content":"1. 设置 root 密码：sudo passwd root\n\n2. 开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes\n然后：sudo service ssh restart\n\n3. Ubuntu16 配置静态 ip：https://www.jianshu.com/p/d69a95aa1ed7\nubuntu18 配置静态 ip：https://blog.csdn.net/u010039418/article/details/80934346\n\n4. 查询软件：apt-cache madison kubeadm\n![](/images/20190117141627122.png)\n安装指定版本：apt-get install -y kubeadm=1.11.6-00\n彻底卸载软件：\n   删除软件及其配置文件  apt-get --purge remove kubeadm\n   删除没用的依赖包  apt-get autoremove kubeadm\n   此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理  dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n\n5. 关闭防火墙\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F","source":"_posts/ubuntu-notes.md","raw":"---\ntitle: ubuntu 笔记\npost_url: ubuntu-notes\ndate: 2019-01-12 17:07:28\ntags: linux\n---\n1. 设置 root 密码：sudo passwd root\n\n2. 开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes\n然后：sudo service ssh restart\n\n3. Ubuntu16 配置静态 ip：https://www.jianshu.com/p/d69a95aa1ed7\nubuntu18 配置静态 ip：https://blog.csdn.net/u010039418/article/details/80934346\n\n4. 查询软件：apt-cache madison kubeadm\n![](/images/20190117141627122.png)\n安装指定版本：apt-get install -y kubeadm=1.11.6-00\n彻底卸载软件：\n   删除软件及其配置文件  apt-get --purge remove kubeadm\n   删除没用的依赖包  apt-get autoremove kubeadm\n   此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理  dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n\n5. 关闭防火墙\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F","slug":"ubuntu-notes","published":1,"updated":"2019-03-25T14:04:19.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtr9007305abpyv8g2l2","content":"<ol>\n<li><p>设置 root 密码：sudo passwd root</p>\n</li>\n<li><p>开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes<br>然后：sudo service ssh restart</p>\n</li>\n<li><p>Ubuntu16 配置静态 ip：<a href=\"https://www.jianshu.com/p/d69a95aa1ed7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d69a95aa1ed7</a><br>ubuntu18 配置静态 ip：<a href=\"https://blog.csdn.net/u010039418/article/details/80934346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010039418/article/details/80934346</a></p>\n</li>\n<li><p>查询软件：apt-cache madison kubeadm</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190117141627122.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>安装指定版本：apt-get install -y kubeadm=1.11.6-00<br>彻底卸载软件：<br>删除软件及其配置文件  apt-get –purge remove kubeadm<br>删除没用的依赖包  apt-get autoremove kubeadm<br>此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理  dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p>\n</li>\n<li><p>关闭防火墙<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>设置 root 密码：sudo passwd root</p>\n</li>\n<li><p>开启 root 远程登录：/etc/ssh/sshd_config 中 PermitRootLogin 改为 yes，StrictModes 改为 yes<br>然后：sudo service ssh restart</p>\n</li>\n<li><p>Ubuntu16 配置静态 ip：<a href=\"https://www.jianshu.com/p/d69a95aa1ed7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d69a95aa1ed7</a><br>ubuntu18 配置静态 ip：<a href=\"https://blog.csdn.net/u010039418/article/details/80934346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010039418/article/details/80934346</a></p>\n</li>\n<li><p>查询软件：apt-cache madison kubeadm</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190117141627122.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>安装指定版本：apt-get install -y kubeadm=1.11.6-00<br>彻底卸载软件：<br>删除软件及其配置文件  apt-get –purge remove kubeadm<br>删除没用的依赖包  apt-get autoremove kubeadm<br>此时dpkg的列表中有“rc”状态的软件包，可以执行如下命令做最后清理  dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p>\n</li>\n<li><p>关闭防火墙<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F</p>\n</li>\n</ol>\n"},{"post_url":"urllib2","title":"python网络请求报urllib2.HTTPError:HTTP Error 405:Not Allowed","date":"2017-12-01T02:28:52.000Z","_content":"报错信息：\n```\nTraceback (most recent call last):\n  File \"exportESData.py\", line 45, in <module>\n    exportEsData(\"https://www.iaiot.com\", index, type, siteid).exportData()\n  File \"exportESData.py\", line 29, in exportData\n    response = opener.open(req)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 406, in open\n    response = meth(req, response)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 519, in http_response\n    'http', request, response, code, msg, hdrs)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 444, in error\n    return self._call_chain(*args)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 378, in _call_chain\n    result = func(*args)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 527, in http_error_default\n    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)\nurllib2.HTTPError: HTTP Error 405: Not Allowed\n```\n\n原因：请求协议问题\n\n\n解决：https换成http\n","source":"_posts/urllib2.md","raw":"---\npost_url: urllib2\ntitle: python网络请求报urllib2.HTTPError:HTTP Error 405:Not Allowed\ndate: 2017-12-01 10:28:52\ntags: python\n---\n报错信息：\n```\nTraceback (most recent call last):\n  File \"exportESData.py\", line 45, in <module>\n    exportEsData(\"https://www.iaiot.com\", index, type, siteid).exportData()\n  File \"exportESData.py\", line 29, in exportData\n    response = opener.open(req)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 406, in open\n    response = meth(req, response)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 519, in http_response\n    'http', request, response, code, msg, hdrs)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 444, in error\n    return self._call_chain(*args)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 378, in _call_chain\n    result = func(*args)\n  File \"C:\\mywork\\Python27\\lib\\urllib2.py\", line 527, in http_error_default\n    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)\nurllib2.HTTPError: HTTP Error 405: Not Allowed\n```\n\n原因：请求协议问题\n\n\n解决：https换成http\n","slug":"urllib2","published":1,"updated":"2019-03-25T14:04:27.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtra007505abx019ubnq","content":"<p>报错信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;exportESData.py&quot;, line 45, in &lt;module&gt;</span><br><span class=\"line\">    exportEsData(&quot;https://www.iaiot.com&quot;, index, type, siteid).exportData()</span><br><span class=\"line\">  File &quot;exportESData.py&quot;, line 29, in exportData</span><br><span class=\"line\">    response = opener.open(req)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 406, in open</span><br><span class=\"line\">    response = meth(req, response)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 519, in http_response</span><br><span class=\"line\">    &apos;http&apos;, request, response, code, msg, hdrs)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 444, in error</span><br><span class=\"line\">    return self._call_chain(*args)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 378, in _call_chain</span><br><span class=\"line\">    result = func(*args)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 527, in http_error_default</span><br><span class=\"line\">    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)</span><br><span class=\"line\">urllib2.HTTPError: HTTP Error 405: Not Allowed</span><br></pre></td></tr></table></figure></p>\n<p>原因：请求协议问题</p>\n<p>解决：https换成http</p>\n","site":{"data":{}},"excerpt":"","more":"<p>报错信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;exportESData.py&quot;, line 45, in &lt;module&gt;</span><br><span class=\"line\">    exportEsData(&quot;https://www.iaiot.com&quot;, index, type, siteid).exportData()</span><br><span class=\"line\">  File &quot;exportESData.py&quot;, line 29, in exportData</span><br><span class=\"line\">    response = opener.open(req)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 406, in open</span><br><span class=\"line\">    response = meth(req, response)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 519, in http_response</span><br><span class=\"line\">    &apos;http&apos;, request, response, code, msg, hdrs)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 444, in error</span><br><span class=\"line\">    return self._call_chain(*args)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 378, in _call_chain</span><br><span class=\"line\">    result = func(*args)</span><br><span class=\"line\">  File &quot;C:\\mywork\\Python27\\lib\\urllib2.py&quot;, line 527, in http_error_default</span><br><span class=\"line\">    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)</span><br><span class=\"line\">urllib2.HTTPError: HTTP Error 405: Not Allowed</span><br></pre></td></tr></table></figure></p>\n<p>原因：请求协议问题</p>\n<p>解决：https换成http</p>\n"},{"post_url":"storm-zookeeper","title":"安装 Storm 集群和 Zookeeper 集群./zkServer.sh status报错Error contacting service. It is probably not running.","date":"2017-09-06T09:40:15.000Z","_content":"除了http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是\n\njdk的问题；\n\n \n\n检查一下JDK是否正确安装；；\n\n \n\n我的是直接从其他机器复制过来jdk的环境变量设置，却忘记在新机器上解压jdk的压缩包了。。\n","source":"_posts/storm-zookeeper.md","raw":"---\npost_url: storm-zookeeper\ntitle: 安装 Storm 集群和 Zookeeper 集群./zkServer.sh status报错Error contacting service. It is probably not running.\ndate: 2017-09-06 17:40:15\ntags: [storm, zookeeper]\n---\n除了http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是\n\njdk的问题；\n\n \n\n检查一下JDK是否正确安装；；\n\n \n\n我的是直接从其他机器复制过来jdk的环境变量设置，却忘记在新机器上解压jdk的压缩包了。。\n","slug":"storm-zookeeper","published":1,"updated":"2019-03-24T12:10:47.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrb007705abjlgc1csp","content":"<p>除了<a href=\"http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是</a></p>\n<p>jdk的问题；</p>\n<p>检查一下JDK是否正确安装；；</p>\n<p>我的是直接从其他机器复制过来jdk的环境变量设置，却忘记在新机器上解压jdk的压缩包了。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>除了<a href=\"http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xiewendong93/article/details/50500471里面的方法外还有可能是</a></p>\n<p>jdk的问题；</p>\n<p>检查一下JDK是否正确安装；；</p>\n<p>我的是直接从其他机器复制过来jdk的环境变量设置，却忘记在新机器上解压jdk的压缩包了。。</p>\n"},{"post_url":"storm-topology-message-timeout-secs","title":"storm topology.message.timeout.secs 和 topology.max.spout.pending","date":"2018-08-01T09:33:52.000Z","_content":"storm \n\n \n\ntopology.max.spout.pending：同时活跃的批的数量。这个值必须设置，用于限定同时可以处理的 batch 数量。编程人员可以通过 topology.max.spout.pending 设置这个值，默认是1。\n\n \n\ntopology.message.timeout.secs：如果调大了超时时间 jstorm kill mytopo 后 topo 一直处于 killed 状态，可以使用 jstorm kill mytopo 1 来终止 topo\n","source":"_posts/storm-topology-message-timeout-secs.md","raw":"---\npost_url: storm-topology-message-timeout-secs\ntitle: storm topology.message.timeout.secs 和 topology.max.spout.pending\ndate: 2018-08-01 17:33:52\ntags: storm\n---\nstorm \n\n \n\ntopology.max.spout.pending：同时活跃的批的数量。这个值必须设置，用于限定同时可以处理的 batch 数量。编程人员可以通过 topology.max.spout.pending 设置这个值，默认是1。\n\n \n\ntopology.message.timeout.secs：如果调大了超时时间 jstorm kill mytopo 后 topo 一直处于 killed 状态，可以使用 jstorm kill mytopo 1 来终止 topo\n","slug":"storm-topology-message-timeout-secs","published":1,"updated":"2019-03-25T14:04:12.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrb007a05ab3apqu158","content":"<p>storm </p>\n<p>topology.max.spout.pending：同时活跃的批的数量。这个值必须设置，用于限定同时可以处理的 batch 数量。编程人员可以通过 topology.max.spout.pending 设置这个值，默认是1。</p>\n<p>topology.message.timeout.secs：如果调大了超时时间 jstorm kill mytopo 后 topo 一直处于 killed 状态，可以使用 jstorm kill mytopo 1 来终止 topo</p>\n","site":{"data":{}},"excerpt":"","more":"<p>storm </p>\n<p>topology.max.spout.pending：同时活跃的批的数量。这个值必须设置，用于限定同时可以处理的 batch 数量。编程人员可以通过 topology.max.spout.pending 设置这个值，默认是1。</p>\n<p>topology.message.timeout.secs：如果调大了超时时间 jstorm kill mytopo 后 topo 一直处于 killed 状态，可以使用 jstorm kill mytopo 1 来终止 topo</p>\n"},{"post_url":"windows-miss-dll","title":"windows 提示缺少各种 dll 文件","date":"2018-12-18T04:50:46.000Z","_content":"下载安装 MSVBCRT_AIO_2018.05.13_X86 X64.exe（微软常用运行库合集）即可\n\nhttps://download.csdn.net/download/iaiot/10858125","source":"_posts/windows-miss-dll.md","raw":"---\npost_url: windows-miss-dll\ntitle: windows 提示缺少各种 dll 文件\ndate: 2018-12-18 12:50:46\ntags: [windows, dll]\n---\n下载安装 MSVBCRT_AIO_2018.05.13_X86 X64.exe（微软常用运行库合集）即可\n\nhttps://download.csdn.net/download/iaiot/10858125","slug":"windows-miss-dll","published":1,"updated":"2019-03-25T14:05:20.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrd007c05abe2it4c65","content":"<p>下载安装 MSVBCRT_AIO_2018.05.13_X86 X64.exe（微软常用运行库合集）即可</p>\n<p><a href=\"https://download.csdn.net/download/iaiot/10858125\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/iaiot/10858125</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载安装 MSVBCRT_AIO_2018.05.13_X86 X64.exe（微软常用运行库合集）即可</p>\n<p><a href=\"https://download.csdn.net/download/iaiot/10858125\" target=\"_blank\" rel=\"noopener\">https://download.csdn.net/download/iaiot/10858125</a></p>\n"},{"title":"『转载』x-pack license 过期","post_url":"x-pack-license","date":"2019-03-18T03:47:35.000Z","_content":"\n\n## 原文\nhttp://www.lanrenkaifa.com/post/61\nhttp://blog.51yip.com/server/1906.html\n\n\n## 总结\nkibana x-pack安装完了后，license有效期只有1个月，并且每年需要，要重新续一次。\n1. 注册   https://register.elastic.co/\n2. 登录到注册的邮件，里面会有一个下载license的邮件。\n3. 通过curl，重新续一下license，注意：文件名前面有一个@符号\n```shell\ncurl -XPUT -u elastic:xxxxxxx 'http://localhost:9200/_xpack/license?acknowledge=true&pretty' -H \"Content-Type: application/json\" -d @hao-jiliang-a07994e8-9e65-404c-a8d1-4d84cbe62fc8-v5.json\n```\n4. 查看license状态：\n```shell\ncurl -XGET -u admin:123456 'localhost:9200/_xpack/license'\n```","source":"_posts/x-pack-license.md","raw":"---\ntitle: 『转载』x-pack license 过期\npost_url: x-pack-license\ndate: 2019-03-18 11:47:35\ntags: [xpack, kibana, elasticsearch]\n---\n\n\n## 原文\nhttp://www.lanrenkaifa.com/post/61\nhttp://blog.51yip.com/server/1906.html\n\n\n## 总结\nkibana x-pack安装完了后，license有效期只有1个月，并且每年需要，要重新续一次。\n1. 注册   https://register.elastic.co/\n2. 登录到注册的邮件，里面会有一个下载license的邮件。\n3. 通过curl，重新续一下license，注意：文件名前面有一个@符号\n```shell\ncurl -XPUT -u elastic:xxxxxxx 'http://localhost:9200/_xpack/license?acknowledge=true&pretty' -H \"Content-Type: application/json\" -d @hao-jiliang-a07994e8-9e65-404c-a8d1-4d84cbe62fc8-v5.json\n```\n4. 查看license状态：\n```shell\ncurl -XGET -u admin:123456 'localhost:9200/_xpack/license'\n```","slug":"x-pack-license","published":1,"updated":"2019-03-25T14:09:04.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtre007f05ab0w9m76e5","content":"<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p><a href=\"http://www.lanrenkaifa.com/post/61\" target=\"_blank\" rel=\"noopener\">http://www.lanrenkaifa.com/post/61</a><br><a href=\"http://blog.51yip.com/server/1906.html\" target=\"_blank\" rel=\"noopener\">http://blog.51yip.com/server/1906.html</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>kibana x-pack安装完了后，license有效期只有1个月，并且每年需要，要重新续一次。</p>\n<ol>\n<li>注册   <a href=\"https://register.elastic.co/\" target=\"_blank\" rel=\"noopener\">https://register.elastic.co/</a></li>\n<li>登录到注册的邮件，里面会有一个下载license的邮件。</li>\n<li><p>通过curl，重新续一下license，注意：文件名前面有一个@符号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic:xxxxxxx 'http://localhost:9200/_xpack/license?acknowledge=true&amp;pretty' -H \"Content-Type: application/json\" -d @hao-jiliang-a07994e8-9e65-404c-a8d1-4d84cbe62fc8-v5.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看license状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET -u admin:123456 'localhost:9200/_xpack/license'</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p><a href=\"http://www.lanrenkaifa.com/post/61\" target=\"_blank\" rel=\"noopener\">http://www.lanrenkaifa.com/post/61</a><br><a href=\"http://blog.51yip.com/server/1906.html\" target=\"_blank\" rel=\"noopener\">http://blog.51yip.com/server/1906.html</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>kibana x-pack安装完了后，license有效期只有1个月，并且每年需要，要重新续一次。</p>\n<ol>\n<li>注册   <a href=\"https://register.elastic.co/\" target=\"_blank\" rel=\"noopener\">https://register.elastic.co/</a></li>\n<li>登录到注册的邮件，里面会有一个下载license的邮件。</li>\n<li><p>通过curl，重新续一下license，注意：文件名前面有一个@符号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic:xxxxxxx 'http://localhost:9200/_xpack/license?acknowledge=true&amp;pretty' -H \"Content-Type: application/json\" -d @hao-jiliang-a07994e8-9e65-404c-a8d1-4d84cbe62fc8-v5.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看license状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET -u admin:123456 'localhost:9200/_xpack/license'</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"post_url":"vmware-nat","title":"vmware 虚拟机三种网络连接类型的区别，CentOS 设置静态 ip","date":"2018-11-18T03:12:20.000Z","_content":"1.虚拟机三种网络连接类型：\n\n桥接模式：虚拟机加入到宿主机所在局域网，可以和宿主机所在局域网内其他机器互相访问。就像是局域网中的一台独立的主机。\n\nnat 模式：虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问。虚拟机在对外访问时，使用的则是宿主机的IP地址，通过宿主机所在的网络来访问公网，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。\n\n仅主机模式：仅虚拟机之间组成局域网，只能是虚拟机之间互相访问（虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问，但是虚拟机不能访问外网？）。\n![](/images/20181126084920478.jpg)\n\n2.配置静态 ip：\n\n$ vim /etc/sysconfig/network-scripts/ifcfg-ens33***\n\n$ service network  restart\n```\n### 后面加注释的是需要配置或修改的 ###\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"static\" # dhcp 改为 static\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"ens33\"\nUUID=\"677880e2-3e4f-4b7a-9ecb-3c27bef5656c\"\nDEVICE=\"ens33\"\nONBOOT=\"yes\" # yes\n \nGATEWAY=192.168.0.1 # 网关，nat 模式下是虚拟机网络的网关，桥接模式下就是宿主机的网关\nIPADDR=192.168.0.171 # 当前虚拟机 ip，不要和局域网内其他机器冲突即可\nNETMASK=255.255.255.0 # 子网掩码\nDNS1=202.102.128.68 # DNS1 直接配置为宿主机\nDNS2=202.102.134.68 # DNS2\n```\n\n此外：Ubuntu16 和 Ubuntu18 配置静态 ip 参考：https://blog.csdn.net/iaiot/article/details/86366225\n\n\n一直想买个 dell R740，可是好贵。正好有一台闲置电脑装了vmware，按照上述配置桥接模式，先当服务器用着，一台旧电脑又可以发挥价值了，哈哈哈~\n","source":"_posts/vmware-nat.md","raw":"---\npost_url: vmware-nat\ntitle: vmware 虚拟机三种网络连接类型的区别，CentOS 设置静态 ip\ndate: 2018-11-18 11:12:20\ntags: vmware\n---\n1.虚拟机三种网络连接类型：\n\n桥接模式：虚拟机加入到宿主机所在局域网，可以和宿主机所在局域网内其他机器互相访问。就像是局域网中的一台独立的主机。\n\nnat 模式：虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问。虚拟机在对外访问时，使用的则是宿主机的IP地址，通过宿主机所在的网络来访问公网，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。\n\n仅主机模式：仅虚拟机之间组成局域网，只能是虚拟机之间互相访问（虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问，但是虚拟机不能访问外网？）。\n![](/images/20181126084920478.jpg)\n\n2.配置静态 ip：\n\n$ vim /etc/sysconfig/network-scripts/ifcfg-ens33***\n\n$ service network  restart\n```\n### 后面加注释的是需要配置或修改的 ###\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"static\" # dhcp 改为 static\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"ens33\"\nUUID=\"677880e2-3e4f-4b7a-9ecb-3c27bef5656c\"\nDEVICE=\"ens33\"\nONBOOT=\"yes\" # yes\n \nGATEWAY=192.168.0.1 # 网关，nat 模式下是虚拟机网络的网关，桥接模式下就是宿主机的网关\nIPADDR=192.168.0.171 # 当前虚拟机 ip，不要和局域网内其他机器冲突即可\nNETMASK=255.255.255.0 # 子网掩码\nDNS1=202.102.128.68 # DNS1 直接配置为宿主机\nDNS2=202.102.134.68 # DNS2\n```\n\n此外：Ubuntu16 和 Ubuntu18 配置静态 ip 参考：https://blog.csdn.net/iaiot/article/details/86366225\n\n\n一直想买个 dell R740，可是好贵。正好有一台闲置电脑装了vmware，按照上述配置桥接模式，先当服务器用着，一台旧电脑又可以发挥价值了，哈哈哈~\n","slug":"vmware-nat","published":1,"updated":"2019-03-24T10:23:52.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtre007h05abb00o8dxz","content":"<p>1.虚拟机三种网络连接类型：</p>\n<p>桥接模式：虚拟机加入到宿主机所在局域网，可以和宿主机所在局域网内其他机器互相访问。就像是局域网中的一台独立的主机。</p>\n<p>nat 模式：虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问。虚拟机在对外访问时，使用的则是宿主机的IP地址，通过宿主机所在的网络来访问公网，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。</p>\n<p>仅主机模式：仅虚拟机之间组成局域网，只能是虚拟机之间互相访问（虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问，但是虚拟机不能访问外网？）。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181126084920478.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>2.配置静态 ip：</p>\n<p>$ vim /etc/sysconfig/network-scripts/ifcfg-ens33***</p>\n<p>$ service network  restart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 后面加注释的是需要配置或修改的 ###</span><br><span class=\"line\">TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # dhcp 改为 static</span><br><span class=\"line\">DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">NAME=&quot;ens33&quot;</span><br><span class=\"line\">UUID=&quot;677880e2-3e4f-4b7a-9ecb-3c27bef5656c&quot;</span><br><span class=\"line\">DEVICE=&quot;ens33&quot;</span><br><span class=\"line\">ONBOOT=&quot;yes&quot; # yes</span><br><span class=\"line\"> </span><br><span class=\"line\">GATEWAY=192.168.0.1 # 网关，nat 模式下是虚拟机网络的网关，桥接模式下就是宿主机的网关</span><br><span class=\"line\">IPADDR=192.168.0.171 # 当前虚拟机 ip，不要和局域网内其他机器冲突即可</span><br><span class=\"line\">NETMASK=255.255.255.0 # 子网掩码</span><br><span class=\"line\">DNS1=202.102.128.68 # DNS1 直接配置为宿主机</span><br><span class=\"line\">DNS2=202.102.134.68 # DNS2</span><br></pre></td></tr></table></figure></p>\n<p>此外：Ubuntu16 和 Ubuntu18 配置静态 ip 参考：<a href=\"https://blog.csdn.net/iaiot/article/details/86366225\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/86366225</a></p>\n<p>一直想买个 dell R740，可是好贵。正好有一台闲置电脑装了vmware，按照上述配置桥接模式，先当服务器用着，一台旧电脑又可以发挥价值了，哈哈哈~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.虚拟机三种网络连接类型：</p>\n<p>桥接模式：虚拟机加入到宿主机所在局域网，可以和宿主机所在局域网内其他机器互相访问。就像是局域网中的一台独立的主机。</p>\n<p>nat 模式：虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问。虚拟机在对外访问时，使用的则是宿主机的IP地址，通过宿主机所在的网络来访问公网，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。</p>\n<p>仅主机模式：仅虚拟机之间组成局域网，只能是虚拟机之间互相访问（虚拟机和宿主机组成局域网，只能宿主机和虚拟机之间互相访问，但是虚拟机不能访问外网？）。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20181126084920478.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>2.配置静态 ip：</p>\n<p>$ vim /etc/sysconfig/network-scripts/ifcfg-ens33***</p>\n<p>$ service network  restart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 后面加注释的是需要配置或修改的 ###</span><br><span class=\"line\">TYPE=&quot;Ethernet&quot;</span><br><span class=\"line\">PROXY_METHOD=&quot;none&quot;</span><br><span class=\"line\">BROWSER_ONLY=&quot;no&quot;</span><br><span class=\"line\">BOOTPROTO=&quot;static&quot; # dhcp 改为 static</span><br><span class=\"line\">DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6INIT=&quot;yes&quot;</span><br><span class=\"line\">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class=\"line\">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class=\"line\">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class=\"line\">NAME=&quot;ens33&quot;</span><br><span class=\"line\">UUID=&quot;677880e2-3e4f-4b7a-9ecb-3c27bef5656c&quot;</span><br><span class=\"line\">DEVICE=&quot;ens33&quot;</span><br><span class=\"line\">ONBOOT=&quot;yes&quot; # yes</span><br><span class=\"line\"> </span><br><span class=\"line\">GATEWAY=192.168.0.1 # 网关，nat 模式下是虚拟机网络的网关，桥接模式下就是宿主机的网关</span><br><span class=\"line\">IPADDR=192.168.0.171 # 当前虚拟机 ip，不要和局域网内其他机器冲突即可</span><br><span class=\"line\">NETMASK=255.255.255.0 # 子网掩码</span><br><span class=\"line\">DNS1=202.102.128.68 # DNS1 直接配置为宿主机</span><br><span class=\"line\">DNS2=202.102.134.68 # DNS2</span><br></pre></td></tr></table></figure></p>\n<p>此外：Ubuntu16 和 Ubuntu18 配置静态 ip 参考：<a href=\"https://blog.csdn.net/iaiot/article/details/86366225\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/iaiot/article/details/86366225</a></p>\n<p>一直想买个 dell R740，可是好贵。正好有一台闲置电脑装了vmware，按照上述配置桥接模式，先当服务器用着，一台旧电脑又可以发挥价值了，哈哈哈~</p>\n"},{"title":"webSocket 笔记 问题汇总 400 302 spring-websocket resin-websocket nginx-websocket","post_url":"websocket-400-302-spring-resin-nginx","date":"2019-03-22T09:15:58.000Z","_content":"\n## webSocket 400\n![](/images/20190322173348403.png)\n```\nlocation /ws/createwebsocket {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://my.api.iaiot.com:8080/ws/createwebsocket;\n\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n```\n\n## webSocket 302\n![](/images/20190322171006565.png)\n\n## spring-websocket（4.2.5.RELEASE）\nspring-websocket 不支持 resin，如果用 resin 部署服务，需基于 com.caucho.websocket.WebSocketListener 自己实现，或者依赖一个其他的 spring 支持的 websocket 包，如：\n```\n<dependency>\n    <groupId>io.undertow</groupId>\n    <artifactId>undertow-websockets-jsr</artifactId>\n    <version>2.0.17.Final</version>\n</dependency>\n```\nspring-websocket 支持的 RequestUpgradeStrategy：\n![](/images/20190322171454875.png)\n![](/images/20190322171428208.png)","source":"_posts/websocket.md","raw":"---\ntitle: webSocket 笔记 问题汇总 400 302 spring-websocket resin-websocket nginx-websocket\npost_url: websocket-400-302-spring-resin-nginx\ndate: 2019-03-22 17:15:58\ntags: [websocket, resin, socket]\n---\n\n## webSocket 400\n![](/images/20190322173348403.png)\n```\nlocation /ws/createwebsocket {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://my.api.iaiot.com:8080/ws/createwebsocket;\n\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n```\n\n## webSocket 302\n![](/images/20190322171006565.png)\n\n## spring-websocket（4.2.5.RELEASE）\nspring-websocket 不支持 resin，如果用 resin 部署服务，需基于 com.caucho.websocket.WebSocketListener 自己实现，或者依赖一个其他的 spring 支持的 websocket 包，如：\n```\n<dependency>\n    <groupId>io.undertow</groupId>\n    <artifactId>undertow-websockets-jsr</artifactId>\n    <version>2.0.17.Final</version>\n</dependency>\n```\nspring-websocket 支持的 RequestUpgradeStrategy：\n![](/images/20190322171454875.png)\n![](/images/20190322171428208.png)","slug":"websocket","published":1,"updated":"2019-03-25T14:05:01.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrg007j05ab7v01om1h","content":"<h2 id=\"webSocket-400\"><a href=\"#webSocket-400\" class=\"headerlink\" title=\"webSocket 400\"></a>webSocket 400</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322173348403.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ws/createwebsocket &#123;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://my.api.iaiot.com:8080/ws/createwebsocket;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"webSocket-302\"><a href=\"#webSocket-302\" class=\"headerlink\" title=\"webSocket 302\"></a>webSocket 302</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171006565.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"spring-websocket（4-2-5-RELEASE）\"><a href=\"#spring-websocket（4-2-5-RELEASE）\" class=\"headerlink\" title=\"spring-websocket（4.2.5.RELEASE）\"></a>spring-websocket（4.2.5.RELEASE）</h2><p>spring-websocket 不支持 resin，如果用 resin 部署服务，需基于 com.caucho.websocket.WebSocketListener 自己实现，或者依赖一个其他的 spring 支持的 websocket 包，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.undertow&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;undertow-websockets-jsr&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.17.Final&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>spring-websocket 支持的 RequestUpgradeStrategy：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171454875.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171428208.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"webSocket-400\"><a href=\"#webSocket-400\" class=\"headerlink\" title=\"webSocket 400\"></a>webSocket 400</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322173348403.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ws/createwebsocket &#123;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://my.api.iaiot.com:8080/ws/createwebsocket;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"webSocket-302\"><a href=\"#webSocket-302\" class=\"headerlink\" title=\"webSocket 302\"></a>webSocket 302</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171006565.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"spring-websocket（4-2-5-RELEASE）\"><a href=\"#spring-websocket（4-2-5-RELEASE）\" class=\"headerlink\" title=\"spring-websocket（4.2.5.RELEASE）\"></a>spring-websocket（4.2.5.RELEASE）</h2><p>spring-websocket 不支持 resin，如果用 resin 部署服务，需基于 com.caucho.websocket.WebSocketListener 自己实现，或者依赖一个其他的 spring 支持的 websocket 包，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.undertow&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;undertow-websockets-jsr&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.17.Final&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>spring-websocket 支持的 RequestUpgradeStrategy：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171454875.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20190322171428208.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n"},{"post_url":"xpack-password","title":"xpack忘记密码","date":"2019-03-18T08:30:30.000Z","_content":"\n1、集群停机\n2、备份plugin下的xpack 并删除\n3、重启集群\n4、删掉 .security 索引\n5、停机\n6、恢复plugin下的xpack\n7、重启集群（现在密码已经重置为changeme了）\n8、直接修改密码（后续步骤不用看了）\n```\ncurl -XPUT -u elastic 'http://127.0.0.1:9200/_xpack/security/user/elastic/_password' -d '{\n\"password\" : \"123456\"\n}'\n```\n9、修改kibana配置文件elastic的密码改为changeme并启动\n10、使用kibana修改elastic密码\n11、kibana停机重新修改配置文件为新密码\n12、重启kibana 并测试es使用新密码连接\n","source":"_posts/xpack-password.md","raw":"---\npost_url: xpack-password\ntitle: xpack忘记密码\ndate: 2019-03-18 16:30:30\ntags: [xpack, kibana, elasticsearch]\n---\n\n1、集群停机\n2、备份plugin下的xpack 并删除\n3、重启集群\n4、删掉 .security 索引\n5、停机\n6、恢复plugin下的xpack\n7、重启集群（现在密码已经重置为changeme了）\n8、直接修改密码（后续步骤不用看了）\n```\ncurl -XPUT -u elastic 'http://127.0.0.1:9200/_xpack/security/user/elastic/_password' -d '{\n\"password\" : \"123456\"\n}'\n```\n9、修改kibana配置文件elastic的密码改为changeme并启动\n10、使用kibana修改elastic密码\n11、kibana停机重新修改配置文件为新密码\n12、重启kibana 并测试es使用新密码连接\n","slug":"xpack-password","published":1,"updated":"2019-03-25T14:13:18.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrh007l05ab7rcms4sl","content":"<p>1、集群停机<br>2、备份plugin下的xpack 并删除<br>3、重启集群<br>4、删掉 .security 索引<br>5、停机<br>6、恢复plugin下的xpack<br>7、重启集群（现在密码已经重置为changeme了）<br>8、直接修改密码（后续步骤不用看了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;http://127.0.0.1:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">&quot;password&quot; : &quot;123456&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>9、修改kibana配置文件elastic的密码改为changeme并启动<br>10、使用kibana修改elastic密码<br>11、kibana停机重新修改配置文件为新密码<br>12、重启kibana 并测试es使用新密码连接</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、集群停机<br>2、备份plugin下的xpack 并删除<br>3、重启集群<br>4、删掉 .security 索引<br>5、停机<br>6、恢复plugin下的xpack<br>7、重启集群（现在密码已经重置为changeme了）<br>8、直接修改密码（后续步骤不用看了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;http://127.0.0.1:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">&quot;password&quot; : &quot;123456&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>9、修改kibana配置文件elastic的密码改为changeme并启动<br>10、使用kibana修改elastic密码<br>11、kibana停机重新修改配置文件为新密码<br>12、重启kibana 并测试es使用新密码连接</p>\n"},{"post_url":"proguard-java","title":"用 proguard 混淆 java 代码","date":"2018-08-13T01:36:22.000Z","_content":"混淆工具：proguard\n\n基本步骤：\n1. 编译一个myserver.jar\n2. 将myserver工程中的java文件导出一个myserver-tmp.jar\n3. 用proguard生成基础混淆规则，然后加入自己的混淆规则\n4. 混淆myserver-tmp.jar，用混淆后的class文件替换myserver.jar相应class完成混淆\n\n此外如果是maven工程，要去掉pom.xml中的relocations配置，不然会导致找不到第三方包。原因：设置不混淆第三方jar包，所以混淆后默认对第三方包中类的导入都是如com.google，而不是com.hjl.iaiot.com.google，不去掉会导致找不到相关包类，而proguard中暂未找到此功能的相关配置。\n\n混淆规则文件示例myserver_proguard_rule.pro：\n```\n-injars myserver_tmp.jar\n-outjars myserver_tmp_out.jar\n \n-libraryjars libs\\charsets.jar\n-libraryjars libs\\commons-beanutils-1.9.0.jar\n-libraryjars libs\\commons-codec-1.6.jar\n-libraryjars libs\\commons-collections-3.2.2.jar\n-libraryjars libs\\commons-configuration-1.10.jar\n-libraryjars libs\\commons-digester-2.0.jar\n-libraryjars libs\\commons-fileupload-1.3.1.jar\n-libraryjars libs\\commons-io-2.2.jar\n-libraryjars libs\\commons-jxpath-1.3.jar\n-libraryjars libs\\commons-lang-2.6.jar\n-libraryjars libs\\commons-logging-1.1.1.jar\n-libraryjars libs\\dnsns.jar\n-libraryjars libs\\gson-2.7.jar\n-libraryjars libs\\hamcrest-core-1.3.jar\n-libraryjars libs\\javax.servlet-api-3.1.0.jar\n-libraryjars libs\\jce.jar\n-libraryjars libs\\jsse.jar\n-libraryjars libs\\junit-4.12.jar\n-libraryjars libs\\localedata.jar\n-libraryjars libs\\rt.jar\n-libraryjars libs\\sunjce_provider.jar\n-libraryjars libs\\xml-resolver-1.2.jar\n \n-dontshrink\n-dontoptimize\n-useuniqueclassmembernames\n-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod\n-dontpreverify\n \n-ignorewarnings\n \n-keep public class com.hjl.iaiot.servlet.MyFilter {*;}\n-keep public class com.hjl.iaiot.servlet.MyListener {*;}\n-keep public class com.hjl.iaiot.commons.MyUtils {*;}\n \n# Keep names - Native method names. Keep all native class/method names.\n-keepclasseswithmembers,includedescriptorclasses,allowshrinking class * {\n    native <methods>;\n}\n \n# Keep names - _class method names. Keep all .class method names. This may be\n# useful for libraries that will be obfuscated again with different obfuscators.\n-keepclassmembers,allowshrinking class * {\n    java.lang.Class class$(java.lang.String);\n    java.lang.Class class$(java.lang.String,boolean);\n}\n \n# Remove - System method calls. Remove all invocations of System\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.System {\n    public static long currentTimeMillis();\n    static java.lang.Class getCallerClass();\n    public static int identityHashCode(java.lang.Object);\n    public static java.lang.SecurityManager getSecurityManager();\n    public static java.util.Properties getProperties();\n    public static java.lang.String getProperty(java.lang.String);\n    public static java.lang.String getenv(java.lang.String);\n    public static java.lang.String mapLibraryName(java.lang.String);\n    public static java.lang.String getProperty(java.lang.String,java.lang.String);\n}\n \n# Remove - Math method calls. Remove all invocations of Math\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.Math {\n    public static double sin(double);\n    public static double cos(double);\n    public static double tan(double);\n    public static double asin(double);\n    public static double acos(double);\n    public static double atan(double);\n    public static double toRadians(double);\n    public static double toDegrees(double);\n    public static double exp(double);\n    public static double log(double);\n    public static double log10(double);\n    public static double sqrt(double);\n    public static double cbrt(double);\n    public static double IEEEremainder(double,double);\n    public static double ceil(double);\n    public static double floor(double);\n    public static double rint(double);\n    public static double atan2(double,double);\n    public static double pow(double,double);\n    public static int round(float);\n    public static long round(double);\n    public static double random();\n    public static int abs(int);\n    public static long abs(long);\n    public static float abs(float);\n    public static double abs(double);\n    public static int max(int,int);\n    public static long max(long,long);\n    public static float max(float,float);\n    public static double max(double,double);\n    public static int min(int,int);\n    public static long min(long,long);\n    public static float min(float,float);\n    public static double min(double,double);\n    public static double ulp(double);\n    public static float ulp(float);\n    public static double signum(double);\n    public static float signum(float);\n    public static double sinh(double);\n    public static double cosh(double);\n    public static double tanh(double);\n    public static double hypot(double,double);\n    public static double expm1(double);\n    public static double log1p(double);\n}\n \n# Remove - Number method calls. Remove all invocations of Number\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.* extends java.lang.Number {\n    public static java.lang.String toString(byte);\n    public static java.lang.Byte valueOf(byte);\n    public static byte parseByte(java.lang.String);\n    public static byte parseByte(java.lang.String,int);\n    public static java.lang.Byte valueOf(java.lang.String,int);\n    public static java.lang.Byte valueOf(java.lang.String);\n    public static java.lang.Byte decode(java.lang.String);\n    public int compareTo(java.lang.Byte);\n    public static java.lang.String toString(short);\n    public static short parseShort(java.lang.String);\n    public static short parseShort(java.lang.String,int);\n    public static java.lang.Short valueOf(java.lang.String,int);\n    public static java.lang.Short valueOf(java.lang.String);\n    public static java.lang.Short valueOf(short);\n    public static java.lang.Short decode(java.lang.String);\n    public static short reverseBytes(short);\n    public int compareTo(java.lang.Short);\n    public static java.lang.String toString(int,int);\n    public static java.lang.String toHexString(int);\n    public static java.lang.String toOctalString(int);\n    public static java.lang.String toBinaryString(int);\n    public static java.lang.String toString(int);\n    public static int parseInt(java.lang.String,int);\n    public static int parseInt(java.lang.String);\n    public static java.lang.Integer valueOf(java.lang.String,int);\n    public static java.lang.Integer valueOf(java.lang.String);\n    public static java.lang.Integer valueOf(int);\n    public static java.lang.Integer getInteger(java.lang.String);\n    public static java.lang.Integer getInteger(java.lang.String,int);\n    public static java.lang.Integer getInteger(java.lang.String,java.lang.Integer);\n    public static java.lang.Integer decode(java.lang.String);\n    public static int highestOneBit(int);\n    public static int lowestOneBit(int);\n    public static int numberOfLeadingZeros(int);\n    public static int numberOfTrailingZeros(int);\n    public static int bitCount(int);\n    public static int rotateLeft(int,int);\n    public static int rotateRight(int,int);\n    public static int reverse(int);\n    public static int signum(int);\n    public static int reverseBytes(int);\n    public int compareTo(java.lang.Integer);\n    public static java.lang.String toString(long,int);\n    public static java.lang.String toHexString(long);\n    public static java.lang.String toOctalString(long);\n    public static java.lang.String toBinaryString(long);\n    public static java.lang.String toString(long);\n    public static long parseLong(java.lang.String,int);\n    public static long parseLong(java.lang.String);\n    public static java.lang.Long valueOf(java.lang.String,int);\n    public static java.lang.Long valueOf(java.lang.String);\n    public static java.lang.Long valueOf(long);\n    public static java.lang.Long decode(java.lang.String);\n    public static java.lang.Long getLong(java.lang.String);\n    public static java.lang.Long getLong(java.lang.String,long);\n    public static java.lang.Long getLong(java.lang.String,java.lang.Long);\n    public static long highestOneBit(long);\n    public static long lowestOneBit(long);\n    public static int numberOfLeadingZeros(long);\n    public static int numberOfTrailingZeros(long);\n    public static int bitCount(long);\n    public static long rotateLeft(long,int);\n    public static long rotateRight(long,int);\n    public static long reverse(long);\n    public static int signum(long);\n    public static long reverseBytes(long);\n    public int compareTo(java.lang.Long);\n    public static java.lang.String toString(float);\n    public static java.lang.String toHexString(float);\n    public static java.lang.Float valueOf(java.lang.String);\n    public static java.lang.Float valueOf(float);\n    public static float parseFloat(java.lang.String);\n    public static boolean isNaN(float);\n    public static boolean isInfinite(float);\n    public static int floatToIntBits(float);\n    public static int floatToRawIntBits(float);\n    public static float intBitsToFloat(int);\n    public static int compare(float,float);\n    public boolean isNaN();\n    public boolean isInfinite();\n    public int compareTo(java.lang.Float);\n    public static java.lang.String toString(double);\n    public static java.lang.String toHexString(double);\n    public static java.lang.Double valueOf(java.lang.String);\n    public static java.lang.Double valueOf(double);\n    public static double parseDouble(java.lang.String);\n    public static boolean isNaN(double);\n    public static boolean isInfinite(double);\n    public static long doubleToLongBits(double);\n    public static long doubleToRawLongBits(double);\n    public static double longBitsToDouble(long);\n    public static int compare(double,double);\n    public boolean isNaN();\n    public boolean isInfinite();\n    public int compareTo(java.lang.Double);\n    public byte byteValue();\n    public short shortValue();\n    public int intValue();\n    public long longValue();\n    public float floatValue();\n    public double doubleValue();\n    public int compareTo(java.lang.Object);\n    public boolean equals(java.lang.Object);\n    public int hashCode();\n    public java.lang.String toString();\n}\n \n# Remove - String method calls. Remove all invocations of String\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.String {\n    public static java.lang.String copyValueOf(char[]);\n    public static java.lang.String copyValueOf(char[],int,int);\n    public static java.lang.String valueOf(boolean);\n    public static java.lang.String valueOf(char);\n    public static java.lang.String valueOf(char[]);\n    public static java.lang.String valueOf(char[],int,int);\n    public static java.lang.String valueOf(double);\n    public static java.lang.String valueOf(float);\n    public static java.lang.String valueOf(int);\n    public static java.lang.String valueOf(java.lang.Object);\n    public static java.lang.String valueOf(long);\n    public boolean contentEquals(java.lang.StringBuffer);\n    public boolean endsWith(java.lang.String);\n    public boolean equalsIgnoreCase(java.lang.String);\n    public boolean equals(java.lang.Object);\n    public boolean matches(java.lang.String);\n    public boolean regionMatches(boolean,int,java.lang.String,int,int);\n    public boolean regionMatches(int,java.lang.String,int,int);\n    public boolean startsWith(java.lang.String);\n    public boolean startsWith(java.lang.String,int);\n    public byte[] getBytes();\n    public byte[] getBytes(java.lang.String);\n    public char charAt(int);\n    public char[] toCharArray();\n    public int compareToIgnoreCase(java.lang.String);\n    public int compareTo(java.lang.Object);\n    public int compareTo(java.lang.String);\n    public int hashCode();\n    public int indexOf(int);\n    public int indexOf(int,int);\n    public int indexOf(java.lang.String);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(int);\n    public int lastIndexOf(int,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.CharSequence subSequence(int,int);\n    public java.lang.String concat(java.lang.String);\n    public java.lang.String replaceAll(java.lang.String,java.lang.String);\n    public java.lang.String replace(char,char);\n    public java.lang.String replaceFirst(java.lang.String,java.lang.String);\n    public java.lang.String[] split(java.lang.String);\n    public java.lang.String[] split(java.lang.String,int);\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n    public java.lang.String toLowerCase();\n    public java.lang.String toLowerCase(java.util.Locale);\n    public java.lang.String toString();\n    public java.lang.String toUpperCase();\n    public java.lang.String toUpperCase(java.util.Locale);\n    public java.lang.String trim();\n}\n \n# Remove - StringBuffer method calls. Remove all invocations of StringBuffer\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.StringBuffer {\n    public java.lang.String toString();\n    public char charAt(int);\n    public int capacity();\n    public int codePointAt(int);\n    public int codePointBefore(int);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n}\n \n# Remove - StringBuilder method calls. Remove all invocations of StringBuilder\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.StringBuilder {\n    public java.lang.String toString();\n    public char charAt(int);\n    public int capacity();\n    public int codePointAt(int);\n    public int codePointBefore(int);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n}\n```\n\n参考：https://www.jianshu.com/p/60e82aafcfd0\n官方文档：https://www.guardsquare.com/en/proguard/manual/introduction","source":"_posts/proguard-java.md","raw":"---\npost_url: proguard-java\ntitle: 用 proguard 混淆 java 代码\ndate: 2018-08-13 09:36:22\ntags: [proguard, java]\n---\n混淆工具：proguard\n\n基本步骤：\n1. 编译一个myserver.jar\n2. 将myserver工程中的java文件导出一个myserver-tmp.jar\n3. 用proguard生成基础混淆规则，然后加入自己的混淆规则\n4. 混淆myserver-tmp.jar，用混淆后的class文件替换myserver.jar相应class完成混淆\n\n此外如果是maven工程，要去掉pom.xml中的relocations配置，不然会导致找不到第三方包。原因：设置不混淆第三方jar包，所以混淆后默认对第三方包中类的导入都是如com.google，而不是com.hjl.iaiot.com.google，不去掉会导致找不到相关包类，而proguard中暂未找到此功能的相关配置。\n\n混淆规则文件示例myserver_proguard_rule.pro：\n```\n-injars myserver_tmp.jar\n-outjars myserver_tmp_out.jar\n \n-libraryjars libs\\charsets.jar\n-libraryjars libs\\commons-beanutils-1.9.0.jar\n-libraryjars libs\\commons-codec-1.6.jar\n-libraryjars libs\\commons-collections-3.2.2.jar\n-libraryjars libs\\commons-configuration-1.10.jar\n-libraryjars libs\\commons-digester-2.0.jar\n-libraryjars libs\\commons-fileupload-1.3.1.jar\n-libraryjars libs\\commons-io-2.2.jar\n-libraryjars libs\\commons-jxpath-1.3.jar\n-libraryjars libs\\commons-lang-2.6.jar\n-libraryjars libs\\commons-logging-1.1.1.jar\n-libraryjars libs\\dnsns.jar\n-libraryjars libs\\gson-2.7.jar\n-libraryjars libs\\hamcrest-core-1.3.jar\n-libraryjars libs\\javax.servlet-api-3.1.0.jar\n-libraryjars libs\\jce.jar\n-libraryjars libs\\jsse.jar\n-libraryjars libs\\junit-4.12.jar\n-libraryjars libs\\localedata.jar\n-libraryjars libs\\rt.jar\n-libraryjars libs\\sunjce_provider.jar\n-libraryjars libs\\xml-resolver-1.2.jar\n \n-dontshrink\n-dontoptimize\n-useuniqueclassmembernames\n-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod\n-dontpreverify\n \n-ignorewarnings\n \n-keep public class com.hjl.iaiot.servlet.MyFilter {*;}\n-keep public class com.hjl.iaiot.servlet.MyListener {*;}\n-keep public class com.hjl.iaiot.commons.MyUtils {*;}\n \n# Keep names - Native method names. Keep all native class/method names.\n-keepclasseswithmembers,includedescriptorclasses,allowshrinking class * {\n    native <methods>;\n}\n \n# Keep names - _class method names. Keep all .class method names. This may be\n# useful for libraries that will be obfuscated again with different obfuscators.\n-keepclassmembers,allowshrinking class * {\n    java.lang.Class class$(java.lang.String);\n    java.lang.Class class$(java.lang.String,boolean);\n}\n \n# Remove - System method calls. Remove all invocations of System\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.System {\n    public static long currentTimeMillis();\n    static java.lang.Class getCallerClass();\n    public static int identityHashCode(java.lang.Object);\n    public static java.lang.SecurityManager getSecurityManager();\n    public static java.util.Properties getProperties();\n    public static java.lang.String getProperty(java.lang.String);\n    public static java.lang.String getenv(java.lang.String);\n    public static java.lang.String mapLibraryName(java.lang.String);\n    public static java.lang.String getProperty(java.lang.String,java.lang.String);\n}\n \n# Remove - Math method calls. Remove all invocations of Math\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.Math {\n    public static double sin(double);\n    public static double cos(double);\n    public static double tan(double);\n    public static double asin(double);\n    public static double acos(double);\n    public static double atan(double);\n    public static double toRadians(double);\n    public static double toDegrees(double);\n    public static double exp(double);\n    public static double log(double);\n    public static double log10(double);\n    public static double sqrt(double);\n    public static double cbrt(double);\n    public static double IEEEremainder(double,double);\n    public static double ceil(double);\n    public static double floor(double);\n    public static double rint(double);\n    public static double atan2(double,double);\n    public static double pow(double,double);\n    public static int round(float);\n    public static long round(double);\n    public static double random();\n    public static int abs(int);\n    public static long abs(long);\n    public static float abs(float);\n    public static double abs(double);\n    public static int max(int,int);\n    public static long max(long,long);\n    public static float max(float,float);\n    public static double max(double,double);\n    public static int min(int,int);\n    public static long min(long,long);\n    public static float min(float,float);\n    public static double min(double,double);\n    public static double ulp(double);\n    public static float ulp(float);\n    public static double signum(double);\n    public static float signum(float);\n    public static double sinh(double);\n    public static double cosh(double);\n    public static double tanh(double);\n    public static double hypot(double,double);\n    public static double expm1(double);\n    public static double log1p(double);\n}\n \n# Remove - Number method calls. Remove all invocations of Number\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.* extends java.lang.Number {\n    public static java.lang.String toString(byte);\n    public static java.lang.Byte valueOf(byte);\n    public static byte parseByte(java.lang.String);\n    public static byte parseByte(java.lang.String,int);\n    public static java.lang.Byte valueOf(java.lang.String,int);\n    public static java.lang.Byte valueOf(java.lang.String);\n    public static java.lang.Byte decode(java.lang.String);\n    public int compareTo(java.lang.Byte);\n    public static java.lang.String toString(short);\n    public static short parseShort(java.lang.String);\n    public static short parseShort(java.lang.String,int);\n    public static java.lang.Short valueOf(java.lang.String,int);\n    public static java.lang.Short valueOf(java.lang.String);\n    public static java.lang.Short valueOf(short);\n    public static java.lang.Short decode(java.lang.String);\n    public static short reverseBytes(short);\n    public int compareTo(java.lang.Short);\n    public static java.lang.String toString(int,int);\n    public static java.lang.String toHexString(int);\n    public static java.lang.String toOctalString(int);\n    public static java.lang.String toBinaryString(int);\n    public static java.lang.String toString(int);\n    public static int parseInt(java.lang.String,int);\n    public static int parseInt(java.lang.String);\n    public static java.lang.Integer valueOf(java.lang.String,int);\n    public static java.lang.Integer valueOf(java.lang.String);\n    public static java.lang.Integer valueOf(int);\n    public static java.lang.Integer getInteger(java.lang.String);\n    public static java.lang.Integer getInteger(java.lang.String,int);\n    public static java.lang.Integer getInteger(java.lang.String,java.lang.Integer);\n    public static java.lang.Integer decode(java.lang.String);\n    public static int highestOneBit(int);\n    public static int lowestOneBit(int);\n    public static int numberOfLeadingZeros(int);\n    public static int numberOfTrailingZeros(int);\n    public static int bitCount(int);\n    public static int rotateLeft(int,int);\n    public static int rotateRight(int,int);\n    public static int reverse(int);\n    public static int signum(int);\n    public static int reverseBytes(int);\n    public int compareTo(java.lang.Integer);\n    public static java.lang.String toString(long,int);\n    public static java.lang.String toHexString(long);\n    public static java.lang.String toOctalString(long);\n    public static java.lang.String toBinaryString(long);\n    public static java.lang.String toString(long);\n    public static long parseLong(java.lang.String,int);\n    public static long parseLong(java.lang.String);\n    public static java.lang.Long valueOf(java.lang.String,int);\n    public static java.lang.Long valueOf(java.lang.String);\n    public static java.lang.Long valueOf(long);\n    public static java.lang.Long decode(java.lang.String);\n    public static java.lang.Long getLong(java.lang.String);\n    public static java.lang.Long getLong(java.lang.String,long);\n    public static java.lang.Long getLong(java.lang.String,java.lang.Long);\n    public static long highestOneBit(long);\n    public static long lowestOneBit(long);\n    public static int numberOfLeadingZeros(long);\n    public static int numberOfTrailingZeros(long);\n    public static int bitCount(long);\n    public static long rotateLeft(long,int);\n    public static long rotateRight(long,int);\n    public static long reverse(long);\n    public static int signum(long);\n    public static long reverseBytes(long);\n    public int compareTo(java.lang.Long);\n    public static java.lang.String toString(float);\n    public static java.lang.String toHexString(float);\n    public static java.lang.Float valueOf(java.lang.String);\n    public static java.lang.Float valueOf(float);\n    public static float parseFloat(java.lang.String);\n    public static boolean isNaN(float);\n    public static boolean isInfinite(float);\n    public static int floatToIntBits(float);\n    public static int floatToRawIntBits(float);\n    public static float intBitsToFloat(int);\n    public static int compare(float,float);\n    public boolean isNaN();\n    public boolean isInfinite();\n    public int compareTo(java.lang.Float);\n    public static java.lang.String toString(double);\n    public static java.lang.String toHexString(double);\n    public static java.lang.Double valueOf(java.lang.String);\n    public static java.lang.Double valueOf(double);\n    public static double parseDouble(java.lang.String);\n    public static boolean isNaN(double);\n    public static boolean isInfinite(double);\n    public static long doubleToLongBits(double);\n    public static long doubleToRawLongBits(double);\n    public static double longBitsToDouble(long);\n    public static int compare(double,double);\n    public boolean isNaN();\n    public boolean isInfinite();\n    public int compareTo(java.lang.Double);\n    public byte byteValue();\n    public short shortValue();\n    public int intValue();\n    public long longValue();\n    public float floatValue();\n    public double doubleValue();\n    public int compareTo(java.lang.Object);\n    public boolean equals(java.lang.Object);\n    public int hashCode();\n    public java.lang.String toString();\n}\n \n# Remove - String method calls. Remove all invocations of String\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.String {\n    public static java.lang.String copyValueOf(char[]);\n    public static java.lang.String copyValueOf(char[],int,int);\n    public static java.lang.String valueOf(boolean);\n    public static java.lang.String valueOf(char);\n    public static java.lang.String valueOf(char[]);\n    public static java.lang.String valueOf(char[],int,int);\n    public static java.lang.String valueOf(double);\n    public static java.lang.String valueOf(float);\n    public static java.lang.String valueOf(int);\n    public static java.lang.String valueOf(java.lang.Object);\n    public static java.lang.String valueOf(long);\n    public boolean contentEquals(java.lang.StringBuffer);\n    public boolean endsWith(java.lang.String);\n    public boolean equalsIgnoreCase(java.lang.String);\n    public boolean equals(java.lang.Object);\n    public boolean matches(java.lang.String);\n    public boolean regionMatches(boolean,int,java.lang.String,int,int);\n    public boolean regionMatches(int,java.lang.String,int,int);\n    public boolean startsWith(java.lang.String);\n    public boolean startsWith(java.lang.String,int);\n    public byte[] getBytes();\n    public byte[] getBytes(java.lang.String);\n    public char charAt(int);\n    public char[] toCharArray();\n    public int compareToIgnoreCase(java.lang.String);\n    public int compareTo(java.lang.Object);\n    public int compareTo(java.lang.String);\n    public int hashCode();\n    public int indexOf(int);\n    public int indexOf(int,int);\n    public int indexOf(java.lang.String);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(int);\n    public int lastIndexOf(int,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.CharSequence subSequence(int,int);\n    public java.lang.String concat(java.lang.String);\n    public java.lang.String replaceAll(java.lang.String,java.lang.String);\n    public java.lang.String replace(char,char);\n    public java.lang.String replaceFirst(java.lang.String,java.lang.String);\n    public java.lang.String[] split(java.lang.String);\n    public java.lang.String[] split(java.lang.String,int);\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n    public java.lang.String toLowerCase();\n    public java.lang.String toLowerCase(java.util.Locale);\n    public java.lang.String toString();\n    public java.lang.String toUpperCase();\n    public java.lang.String toUpperCase(java.util.Locale);\n    public java.lang.String trim();\n}\n \n# Remove - StringBuffer method calls. Remove all invocations of StringBuffer\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.StringBuffer {\n    public java.lang.String toString();\n    public char charAt(int);\n    public int capacity();\n    public int codePointAt(int);\n    public int codePointBefore(int);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n}\n \n# Remove - StringBuilder method calls. Remove all invocations of StringBuilder\n# methods without side effects whose return values are not used.\n-assumenosideeffects public class java.lang.StringBuilder {\n    public java.lang.String toString();\n    public char charAt(int);\n    public int capacity();\n    public int codePointAt(int);\n    public int codePointBefore(int);\n    public int indexOf(java.lang.String,int);\n    public int lastIndexOf(java.lang.String);\n    public int lastIndexOf(java.lang.String,int);\n    public int length();\n    public java.lang.String substring(int);\n    public java.lang.String substring(int,int);\n}\n```\n\n参考：https://www.jianshu.com/p/60e82aafcfd0\n官方文档：https://www.guardsquare.com/en/proguard/manual/introduction","slug":"proguard-java","published":1,"updated":"2019-03-24T11:11:41.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghtrt008o05abzsjml8n9","content":"<p>混淆工具：proguard</p>\n<p>基本步骤：</p>\n<ol>\n<li>编译一个myserver.jar</li>\n<li>将myserver工程中的java文件导出一个myserver-tmp.jar</li>\n<li>用proguard生成基础混淆规则，然后加入自己的混淆规则</li>\n<li>混淆myserver-tmp.jar，用混淆后的class文件替换myserver.jar相应class完成混淆</li>\n</ol>\n<p>此外如果是maven工程，要去掉pom.xml中的relocations配置，不然会导致找不到第三方包。原因：设置不混淆第三方jar包，所以混淆后默认对第三方包中类的导入都是如com.google，而不是com.hjl.iaiot.com.google，不去掉会导致找不到相关包类，而proguard中暂未找到此功能的相关配置。</p>\n<p>混淆规则文件示例myserver_proguard_rule.pro：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-injars myserver_tmp.jar</span><br><span class=\"line\">-outjars myserver_tmp_out.jar</span><br><span class=\"line\"> </span><br><span class=\"line\">-libraryjars libs\\charsets.jar</span><br><span class=\"line\">-libraryjars libs\\commons-beanutils-1.9.0.jar</span><br><span class=\"line\">-libraryjars libs\\commons-codec-1.6.jar</span><br><span class=\"line\">-libraryjars libs\\commons-collections-3.2.2.jar</span><br><span class=\"line\">-libraryjars libs\\commons-configuration-1.10.jar</span><br><span class=\"line\">-libraryjars libs\\commons-digester-2.0.jar</span><br><span class=\"line\">-libraryjars libs\\commons-fileupload-1.3.1.jar</span><br><span class=\"line\">-libraryjars libs\\commons-io-2.2.jar</span><br><span class=\"line\">-libraryjars libs\\commons-jxpath-1.3.jar</span><br><span class=\"line\">-libraryjars libs\\commons-lang-2.6.jar</span><br><span class=\"line\">-libraryjars libs\\commons-logging-1.1.1.jar</span><br><span class=\"line\">-libraryjars libs\\dnsns.jar</span><br><span class=\"line\">-libraryjars libs\\gson-2.7.jar</span><br><span class=\"line\">-libraryjars libs\\hamcrest-core-1.3.jar</span><br><span class=\"line\">-libraryjars libs\\javax.servlet-api-3.1.0.jar</span><br><span class=\"line\">-libraryjars libs\\jce.jar</span><br><span class=\"line\">-libraryjars libs\\jsse.jar</span><br><span class=\"line\">-libraryjars libs\\junit-4.12.jar</span><br><span class=\"line\">-libraryjars libs\\localedata.jar</span><br><span class=\"line\">-libraryjars libs\\rt.jar</span><br><span class=\"line\">-libraryjars libs\\sunjce_provider.jar</span><br><span class=\"line\">-libraryjars libs\\xml-resolver-1.2.jar</span><br><span class=\"line\"> </span><br><span class=\"line\">-dontshrink</span><br><span class=\"line\">-dontoptimize</span><br><span class=\"line\">-useuniqueclassmembernames</span><br><span class=\"line\">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</span><br><span class=\"line\">-dontpreverify</span><br><span class=\"line\"> </span><br><span class=\"line\">-ignorewarnings</span><br><span class=\"line\"> </span><br><span class=\"line\">-keep public class com.hjl.iaiot.servlet.MyFilter &#123;*;&#125;</span><br><span class=\"line\">-keep public class com.hjl.iaiot.servlet.MyListener &#123;*;&#125;</span><br><span class=\"line\">-keep public class com.hjl.iaiot.commons.MyUtils &#123;*;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Keep names - Native method names. Keep all native class/method names.</span><br><span class=\"line\">-keepclasseswithmembers,includedescriptorclasses,allowshrinking class * &#123;</span><br><span class=\"line\">    native &lt;methods&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Keep names - _class method names. Keep all .class method names. This may be</span><br><span class=\"line\"># useful for libraries that will be obfuscated again with different obfuscators.</span><br><span class=\"line\">-keepclassmembers,allowshrinking class * &#123;</span><br><span class=\"line\">    java.lang.Class class$(java.lang.String);</span><br><span class=\"line\">    java.lang.Class class$(java.lang.String,boolean);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - System method calls. Remove all invocations of System</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.System &#123;</span><br><span class=\"line\">    public static long currentTimeMillis();</span><br><span class=\"line\">    static java.lang.Class getCallerClass();</span><br><span class=\"line\">    public static int identityHashCode(java.lang.Object);</span><br><span class=\"line\">    public static java.lang.SecurityManager getSecurityManager();</span><br><span class=\"line\">    public static java.util.Properties getProperties();</span><br><span class=\"line\">    public static java.lang.String getProperty(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String getenv(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String mapLibraryName(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String getProperty(java.lang.String,java.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - Math method calls. Remove all invocations of Math</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.Math &#123;</span><br><span class=\"line\">    public static double sin(double);</span><br><span class=\"line\">    public static double cos(double);</span><br><span class=\"line\">    public static double tan(double);</span><br><span class=\"line\">    public static double asin(double);</span><br><span class=\"line\">    public static double acos(double);</span><br><span class=\"line\">    public static double atan(double);</span><br><span class=\"line\">    public static double toRadians(double);</span><br><span class=\"line\">    public static double toDegrees(double);</span><br><span class=\"line\">    public static double exp(double);</span><br><span class=\"line\">    public static double log(double);</span><br><span class=\"line\">    public static double log10(double);</span><br><span class=\"line\">    public static double sqrt(double);</span><br><span class=\"line\">    public static double cbrt(double);</span><br><span class=\"line\">    public static double IEEEremainder(double,double);</span><br><span class=\"line\">    public static double ceil(double);</span><br><span class=\"line\">    public static double floor(double);</span><br><span class=\"line\">    public static double rint(double);</span><br><span class=\"line\">    public static double atan2(double,double);</span><br><span class=\"line\">    public static double pow(double,double);</span><br><span class=\"line\">    public static int round(float);</span><br><span class=\"line\">    public static long round(double);</span><br><span class=\"line\">    public static double random();</span><br><span class=\"line\">    public static int abs(int);</span><br><span class=\"line\">    public static long abs(long);</span><br><span class=\"line\">    public static float abs(float);</span><br><span class=\"line\">    public static double abs(double);</span><br><span class=\"line\">    public static int max(int,int);</span><br><span class=\"line\">    public static long max(long,long);</span><br><span class=\"line\">    public static float max(float,float);</span><br><span class=\"line\">    public static double max(double,double);</span><br><span class=\"line\">    public static int min(int,int);</span><br><span class=\"line\">    public static long min(long,long);</span><br><span class=\"line\">    public static float min(float,float);</span><br><span class=\"line\">    public static double min(double,double);</span><br><span class=\"line\">    public static double ulp(double);</span><br><span class=\"line\">    public static float ulp(float);</span><br><span class=\"line\">    public static double signum(double);</span><br><span class=\"line\">    public static float signum(float);</span><br><span class=\"line\">    public static double sinh(double);</span><br><span class=\"line\">    public static double cosh(double);</span><br><span class=\"line\">    public static double tanh(double);</span><br><span class=\"line\">    public static double hypot(double,double);</span><br><span class=\"line\">    public static double expm1(double);</span><br><span class=\"line\">    public static double log1p(double);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - Number method calls. Remove all invocations of Number</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.* extends java.lang.Number &#123;</span><br><span class=\"line\">    public static java.lang.String toString(byte);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(byte);</span><br><span class=\"line\">    public static byte parseByte(java.lang.String);</span><br><span class=\"line\">    public static byte parseByte(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Byte decode(java.lang.String);</span><br><span class=\"line\">    public int compareTo(java.lang.Byte);</span><br><span class=\"line\">    public static java.lang.String toString(short);</span><br><span class=\"line\">    public static short parseShort(java.lang.String);</span><br><span class=\"line\">    public static short parseShort(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Short valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Short valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Short valueOf(short);</span><br><span class=\"line\">    public static java.lang.Short decode(java.lang.String);</span><br><span class=\"line\">    public static short reverseBytes(short);</span><br><span class=\"line\">    public int compareTo(java.lang.Short);</span><br><span class=\"line\">    public static java.lang.String toString(int,int);</span><br><span class=\"line\">    public static java.lang.String toHexString(int);</span><br><span class=\"line\">    public static java.lang.String toOctalString(int);</span><br><span class=\"line\">    public static java.lang.String toBinaryString(int);</span><br><span class=\"line\">    public static java.lang.String toString(int);</span><br><span class=\"line\">    public static int parseInt(java.lang.String,int);</span><br><span class=\"line\">    public static int parseInt(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(int);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String,java.lang.Integer);</span><br><span class=\"line\">    public static java.lang.Integer decode(java.lang.String);</span><br><span class=\"line\">    public static int highestOneBit(int);</span><br><span class=\"line\">    public static int lowestOneBit(int);</span><br><span class=\"line\">    public static int numberOfLeadingZeros(int);</span><br><span class=\"line\">    public static int numberOfTrailingZeros(int);</span><br><span class=\"line\">    public static int bitCount(int);</span><br><span class=\"line\">    public static int rotateLeft(int,int);</span><br><span class=\"line\">    public static int rotateRight(int,int);</span><br><span class=\"line\">    public static int reverse(int);</span><br><span class=\"line\">    public static int signum(int);</span><br><span class=\"line\">    public static int reverseBytes(int);</span><br><span class=\"line\">    public int compareTo(java.lang.Integer);</span><br><span class=\"line\">    public static java.lang.String toString(long,int);</span><br><span class=\"line\">    public static java.lang.String toHexString(long);</span><br><span class=\"line\">    public static java.lang.String toOctalString(long);</span><br><span class=\"line\">    public static java.lang.String toBinaryString(long);</span><br><span class=\"line\">    public static java.lang.String toString(long);</span><br><span class=\"line\">    public static long parseLong(java.lang.String,int);</span><br><span class=\"line\">    public static long parseLong(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Long valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long valueOf(long);</span><br><span class=\"line\">    public static java.lang.Long decode(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String,long);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String,java.lang.Long);</span><br><span class=\"line\">    public static long highestOneBit(long);</span><br><span class=\"line\">    public static long lowestOneBit(long);</span><br><span class=\"line\">    public static int numberOfLeadingZeros(long);</span><br><span class=\"line\">    public static int numberOfTrailingZeros(long);</span><br><span class=\"line\">    public static int bitCount(long);</span><br><span class=\"line\">    public static long rotateLeft(long,int);</span><br><span class=\"line\">    public static long rotateRight(long,int);</span><br><span class=\"line\">    public static long reverse(long);</span><br><span class=\"line\">    public static int signum(long);</span><br><span class=\"line\">    public static long reverseBytes(long);</span><br><span class=\"line\">    public int compareTo(java.lang.Long);</span><br><span class=\"line\">    public static java.lang.String toString(float);</span><br><span class=\"line\">    public static java.lang.String toHexString(float);</span><br><span class=\"line\">    public static java.lang.Float valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Float valueOf(float);</span><br><span class=\"line\">    public static float parseFloat(java.lang.String);</span><br><span class=\"line\">    public static boolean isNaN(float);</span><br><span class=\"line\">    public static boolean isInfinite(float);</span><br><span class=\"line\">    public static int floatToIntBits(float);</span><br><span class=\"line\">    public static int floatToRawIntBits(float);</span><br><span class=\"line\">    public static float intBitsToFloat(int);</span><br><span class=\"line\">    public static int compare(float,float);</span><br><span class=\"line\">    public boolean isNaN();</span><br><span class=\"line\">    public boolean isInfinite();</span><br><span class=\"line\">    public int compareTo(java.lang.Float);</span><br><span class=\"line\">    public static java.lang.String toString(double);</span><br><span class=\"line\">    public static java.lang.String toHexString(double);</span><br><span class=\"line\">    public static java.lang.Double valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Double valueOf(double);</span><br><span class=\"line\">    public static double parseDouble(java.lang.String);</span><br><span class=\"line\">    public static boolean isNaN(double);</span><br><span class=\"line\">    public static boolean isInfinite(double);</span><br><span class=\"line\">    public static long doubleToLongBits(double);</span><br><span class=\"line\">    public static long doubleToRawLongBits(double);</span><br><span class=\"line\">    public static double longBitsToDouble(long);</span><br><span class=\"line\">    public static int compare(double,double);</span><br><span class=\"line\">    public boolean isNaN();</span><br><span class=\"line\">    public boolean isInfinite();</span><br><span class=\"line\">    public int compareTo(java.lang.Double);</span><br><span class=\"line\">    public byte byteValue();</span><br><span class=\"line\">    public short shortValue();</span><br><span class=\"line\">    public int intValue();</span><br><span class=\"line\">    public long longValue();</span><br><span class=\"line\">    public float floatValue();</span><br><span class=\"line\">    public double doubleValue();</span><br><span class=\"line\">    public int compareTo(java.lang.Object);</span><br><span class=\"line\">    public boolean equals(java.lang.Object);</span><br><span class=\"line\">    public int hashCode();</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - String method calls. Remove all invocations of String</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.String &#123;</span><br><span class=\"line\">    public static java.lang.String copyValueOf(char[]);</span><br><span class=\"line\">    public static java.lang.String copyValueOf(char[],int,int);</span><br><span class=\"line\">    public static java.lang.String valueOf(boolean);</span><br><span class=\"line\">    public static java.lang.String valueOf(char);</span><br><span class=\"line\">    public static java.lang.String valueOf(char[]);</span><br><span class=\"line\">    public static java.lang.String valueOf(char[],int,int);</span><br><span class=\"line\">    public static java.lang.String valueOf(double);</span><br><span class=\"line\">    public static java.lang.String valueOf(float);</span><br><span class=\"line\">    public static java.lang.String valueOf(int);</span><br><span class=\"line\">    public static java.lang.String valueOf(java.lang.Object);</span><br><span class=\"line\">    public static java.lang.String valueOf(long);</span><br><span class=\"line\">    public boolean contentEquals(java.lang.StringBuffer);</span><br><span class=\"line\">    public boolean endsWith(java.lang.String);</span><br><span class=\"line\">    public boolean equalsIgnoreCase(java.lang.String);</span><br><span class=\"line\">    public boolean equals(java.lang.Object);</span><br><span class=\"line\">    public boolean matches(java.lang.String);</span><br><span class=\"line\">    public boolean regionMatches(boolean,int,java.lang.String,int,int);</span><br><span class=\"line\">    public boolean regionMatches(int,java.lang.String,int,int);</span><br><span class=\"line\">    public boolean startsWith(java.lang.String);</span><br><span class=\"line\">    public boolean startsWith(java.lang.String,int);</span><br><span class=\"line\">    public byte[] getBytes();</span><br><span class=\"line\">    public byte[] getBytes(java.lang.String);</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public char[] toCharArray();</span><br><span class=\"line\">    public int compareToIgnoreCase(java.lang.String);</span><br><span class=\"line\">    public int compareTo(java.lang.Object);</span><br><span class=\"line\">    public int compareTo(java.lang.String);</span><br><span class=\"line\">    public int hashCode();</span><br><span class=\"line\">    public int indexOf(int);</span><br><span class=\"line\">    public int indexOf(int,int);</span><br><span class=\"line\">    public int indexOf(java.lang.String);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(int);</span><br><span class=\"line\">    public int lastIndexOf(int,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.CharSequence subSequence(int,int);</span><br><span class=\"line\">    public java.lang.String concat(java.lang.String);</span><br><span class=\"line\">    public java.lang.String replaceAll(java.lang.String,java.lang.String);</span><br><span class=\"line\">    public java.lang.String replace(char,char);</span><br><span class=\"line\">    public java.lang.String replaceFirst(java.lang.String,java.lang.String);</span><br><span class=\"line\">    public java.lang.String[] split(java.lang.String);</span><br><span class=\"line\">    public java.lang.String[] split(java.lang.String,int);</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">    public java.lang.String toLowerCase();</span><br><span class=\"line\">    public java.lang.String toLowerCase(java.util.Locale);</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public java.lang.String toUpperCase();</span><br><span class=\"line\">    public java.lang.String toUpperCase(java.util.Locale);</span><br><span class=\"line\">    public java.lang.String trim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - StringBuffer method calls. Remove all invocations of StringBuffer</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.StringBuffer &#123;</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public int capacity();</span><br><span class=\"line\">    public int codePointAt(int);</span><br><span class=\"line\">    public int codePointBefore(int);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - StringBuilder method calls. Remove all invocations of StringBuilder</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.StringBuilder &#123;</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public int capacity();</span><br><span class=\"line\">    public int codePointAt(int);</span><br><span class=\"line\">    public int codePointBefore(int);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"https://www.jianshu.com/p/60e82aafcfd0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/60e82aafcfd0</a><br>官方文档：<a href=\"https://www.guardsquare.com/en/proguard/manual/introduction\" target=\"_blank\" rel=\"noopener\">https://www.guardsquare.com/en/proguard/manual/introduction</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>混淆工具：proguard</p>\n<p>基本步骤：</p>\n<ol>\n<li>编译一个myserver.jar</li>\n<li>将myserver工程中的java文件导出一个myserver-tmp.jar</li>\n<li>用proguard生成基础混淆规则，然后加入自己的混淆规则</li>\n<li>混淆myserver-tmp.jar，用混淆后的class文件替换myserver.jar相应class完成混淆</li>\n</ol>\n<p>此外如果是maven工程，要去掉pom.xml中的relocations配置，不然会导致找不到第三方包。原因：设置不混淆第三方jar包，所以混淆后默认对第三方包中类的导入都是如com.google，而不是com.hjl.iaiot.com.google，不去掉会导致找不到相关包类，而proguard中暂未找到此功能的相关配置。</p>\n<p>混淆规则文件示例myserver_proguard_rule.pro：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-injars myserver_tmp.jar</span><br><span class=\"line\">-outjars myserver_tmp_out.jar</span><br><span class=\"line\"> </span><br><span class=\"line\">-libraryjars libs\\charsets.jar</span><br><span class=\"line\">-libraryjars libs\\commons-beanutils-1.9.0.jar</span><br><span class=\"line\">-libraryjars libs\\commons-codec-1.6.jar</span><br><span class=\"line\">-libraryjars libs\\commons-collections-3.2.2.jar</span><br><span class=\"line\">-libraryjars libs\\commons-configuration-1.10.jar</span><br><span class=\"line\">-libraryjars libs\\commons-digester-2.0.jar</span><br><span class=\"line\">-libraryjars libs\\commons-fileupload-1.3.1.jar</span><br><span class=\"line\">-libraryjars libs\\commons-io-2.2.jar</span><br><span class=\"line\">-libraryjars libs\\commons-jxpath-1.3.jar</span><br><span class=\"line\">-libraryjars libs\\commons-lang-2.6.jar</span><br><span class=\"line\">-libraryjars libs\\commons-logging-1.1.1.jar</span><br><span class=\"line\">-libraryjars libs\\dnsns.jar</span><br><span class=\"line\">-libraryjars libs\\gson-2.7.jar</span><br><span class=\"line\">-libraryjars libs\\hamcrest-core-1.3.jar</span><br><span class=\"line\">-libraryjars libs\\javax.servlet-api-3.1.0.jar</span><br><span class=\"line\">-libraryjars libs\\jce.jar</span><br><span class=\"line\">-libraryjars libs\\jsse.jar</span><br><span class=\"line\">-libraryjars libs\\junit-4.12.jar</span><br><span class=\"line\">-libraryjars libs\\localedata.jar</span><br><span class=\"line\">-libraryjars libs\\rt.jar</span><br><span class=\"line\">-libraryjars libs\\sunjce_provider.jar</span><br><span class=\"line\">-libraryjars libs\\xml-resolver-1.2.jar</span><br><span class=\"line\"> </span><br><span class=\"line\">-dontshrink</span><br><span class=\"line\">-dontoptimize</span><br><span class=\"line\">-useuniqueclassmembernames</span><br><span class=\"line\">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</span><br><span class=\"line\">-dontpreverify</span><br><span class=\"line\"> </span><br><span class=\"line\">-ignorewarnings</span><br><span class=\"line\"> </span><br><span class=\"line\">-keep public class com.hjl.iaiot.servlet.MyFilter &#123;*;&#125;</span><br><span class=\"line\">-keep public class com.hjl.iaiot.servlet.MyListener &#123;*;&#125;</span><br><span class=\"line\">-keep public class com.hjl.iaiot.commons.MyUtils &#123;*;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Keep names - Native method names. Keep all native class/method names.</span><br><span class=\"line\">-keepclasseswithmembers,includedescriptorclasses,allowshrinking class * &#123;</span><br><span class=\"line\">    native &lt;methods&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Keep names - _class method names. Keep all .class method names. This may be</span><br><span class=\"line\"># useful for libraries that will be obfuscated again with different obfuscators.</span><br><span class=\"line\">-keepclassmembers,allowshrinking class * &#123;</span><br><span class=\"line\">    java.lang.Class class$(java.lang.String);</span><br><span class=\"line\">    java.lang.Class class$(java.lang.String,boolean);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - System method calls. Remove all invocations of System</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.System &#123;</span><br><span class=\"line\">    public static long currentTimeMillis();</span><br><span class=\"line\">    static java.lang.Class getCallerClass();</span><br><span class=\"line\">    public static int identityHashCode(java.lang.Object);</span><br><span class=\"line\">    public static java.lang.SecurityManager getSecurityManager();</span><br><span class=\"line\">    public static java.util.Properties getProperties();</span><br><span class=\"line\">    public static java.lang.String getProperty(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String getenv(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String mapLibraryName(java.lang.String);</span><br><span class=\"line\">    public static java.lang.String getProperty(java.lang.String,java.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - Math method calls. Remove all invocations of Math</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.Math &#123;</span><br><span class=\"line\">    public static double sin(double);</span><br><span class=\"line\">    public static double cos(double);</span><br><span class=\"line\">    public static double tan(double);</span><br><span class=\"line\">    public static double asin(double);</span><br><span class=\"line\">    public static double acos(double);</span><br><span class=\"line\">    public static double atan(double);</span><br><span class=\"line\">    public static double toRadians(double);</span><br><span class=\"line\">    public static double toDegrees(double);</span><br><span class=\"line\">    public static double exp(double);</span><br><span class=\"line\">    public static double log(double);</span><br><span class=\"line\">    public static double log10(double);</span><br><span class=\"line\">    public static double sqrt(double);</span><br><span class=\"line\">    public static double cbrt(double);</span><br><span class=\"line\">    public static double IEEEremainder(double,double);</span><br><span class=\"line\">    public static double ceil(double);</span><br><span class=\"line\">    public static double floor(double);</span><br><span class=\"line\">    public static double rint(double);</span><br><span class=\"line\">    public static double atan2(double,double);</span><br><span class=\"line\">    public static double pow(double,double);</span><br><span class=\"line\">    public static int round(float);</span><br><span class=\"line\">    public static long round(double);</span><br><span class=\"line\">    public static double random();</span><br><span class=\"line\">    public static int abs(int);</span><br><span class=\"line\">    public static long abs(long);</span><br><span class=\"line\">    public static float abs(float);</span><br><span class=\"line\">    public static double abs(double);</span><br><span class=\"line\">    public static int max(int,int);</span><br><span class=\"line\">    public static long max(long,long);</span><br><span class=\"line\">    public static float max(float,float);</span><br><span class=\"line\">    public static double max(double,double);</span><br><span class=\"line\">    public static int min(int,int);</span><br><span class=\"line\">    public static long min(long,long);</span><br><span class=\"line\">    public static float min(float,float);</span><br><span class=\"line\">    public static double min(double,double);</span><br><span class=\"line\">    public static double ulp(double);</span><br><span class=\"line\">    public static float ulp(float);</span><br><span class=\"line\">    public static double signum(double);</span><br><span class=\"line\">    public static float signum(float);</span><br><span class=\"line\">    public static double sinh(double);</span><br><span class=\"line\">    public static double cosh(double);</span><br><span class=\"line\">    public static double tanh(double);</span><br><span class=\"line\">    public static double hypot(double,double);</span><br><span class=\"line\">    public static double expm1(double);</span><br><span class=\"line\">    public static double log1p(double);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - Number method calls. Remove all invocations of Number</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.* extends java.lang.Number &#123;</span><br><span class=\"line\">    public static java.lang.String toString(byte);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(byte);</span><br><span class=\"line\">    public static byte parseByte(java.lang.String);</span><br><span class=\"line\">    public static byte parseByte(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Byte valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Byte decode(java.lang.String);</span><br><span class=\"line\">    public int compareTo(java.lang.Byte);</span><br><span class=\"line\">    public static java.lang.String toString(short);</span><br><span class=\"line\">    public static short parseShort(java.lang.String);</span><br><span class=\"line\">    public static short parseShort(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Short valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Short valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Short valueOf(short);</span><br><span class=\"line\">    public static java.lang.Short decode(java.lang.String);</span><br><span class=\"line\">    public static short reverseBytes(short);</span><br><span class=\"line\">    public int compareTo(java.lang.Short);</span><br><span class=\"line\">    public static java.lang.String toString(int,int);</span><br><span class=\"line\">    public static java.lang.String toHexString(int);</span><br><span class=\"line\">    public static java.lang.String toOctalString(int);</span><br><span class=\"line\">    public static java.lang.String toBinaryString(int);</span><br><span class=\"line\">    public static java.lang.String toString(int);</span><br><span class=\"line\">    public static int parseInt(java.lang.String,int);</span><br><span class=\"line\">    public static int parseInt(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer valueOf(int);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Integer getInteger(java.lang.String,java.lang.Integer);</span><br><span class=\"line\">    public static java.lang.Integer decode(java.lang.String);</span><br><span class=\"line\">    public static int highestOneBit(int);</span><br><span class=\"line\">    public static int lowestOneBit(int);</span><br><span class=\"line\">    public static int numberOfLeadingZeros(int);</span><br><span class=\"line\">    public static int numberOfTrailingZeros(int);</span><br><span class=\"line\">    public static int bitCount(int);</span><br><span class=\"line\">    public static int rotateLeft(int,int);</span><br><span class=\"line\">    public static int rotateRight(int,int);</span><br><span class=\"line\">    public static int reverse(int);</span><br><span class=\"line\">    public static int signum(int);</span><br><span class=\"line\">    public static int reverseBytes(int);</span><br><span class=\"line\">    public int compareTo(java.lang.Integer);</span><br><span class=\"line\">    public static java.lang.String toString(long,int);</span><br><span class=\"line\">    public static java.lang.String toHexString(long);</span><br><span class=\"line\">    public static java.lang.String toOctalString(long);</span><br><span class=\"line\">    public static java.lang.String toBinaryString(long);</span><br><span class=\"line\">    public static java.lang.String toString(long);</span><br><span class=\"line\">    public static long parseLong(java.lang.String,int);</span><br><span class=\"line\">    public static long parseLong(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long valueOf(java.lang.String,int);</span><br><span class=\"line\">    public static java.lang.Long valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long valueOf(long);</span><br><span class=\"line\">    public static java.lang.Long decode(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String,long);</span><br><span class=\"line\">    public static java.lang.Long getLong(java.lang.String,java.lang.Long);</span><br><span class=\"line\">    public static long highestOneBit(long);</span><br><span class=\"line\">    public static long lowestOneBit(long);</span><br><span class=\"line\">    public static int numberOfLeadingZeros(long);</span><br><span class=\"line\">    public static int numberOfTrailingZeros(long);</span><br><span class=\"line\">    public static int bitCount(long);</span><br><span class=\"line\">    public static long rotateLeft(long,int);</span><br><span class=\"line\">    public static long rotateRight(long,int);</span><br><span class=\"line\">    public static long reverse(long);</span><br><span class=\"line\">    public static int signum(long);</span><br><span class=\"line\">    public static long reverseBytes(long);</span><br><span class=\"line\">    public int compareTo(java.lang.Long);</span><br><span class=\"line\">    public static java.lang.String toString(float);</span><br><span class=\"line\">    public static java.lang.String toHexString(float);</span><br><span class=\"line\">    public static java.lang.Float valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Float valueOf(float);</span><br><span class=\"line\">    public static float parseFloat(java.lang.String);</span><br><span class=\"line\">    public static boolean isNaN(float);</span><br><span class=\"line\">    public static boolean isInfinite(float);</span><br><span class=\"line\">    public static int floatToIntBits(float);</span><br><span class=\"line\">    public static int floatToRawIntBits(float);</span><br><span class=\"line\">    public static float intBitsToFloat(int);</span><br><span class=\"line\">    public static int compare(float,float);</span><br><span class=\"line\">    public boolean isNaN();</span><br><span class=\"line\">    public boolean isInfinite();</span><br><span class=\"line\">    public int compareTo(java.lang.Float);</span><br><span class=\"line\">    public static java.lang.String toString(double);</span><br><span class=\"line\">    public static java.lang.String toHexString(double);</span><br><span class=\"line\">    public static java.lang.Double valueOf(java.lang.String);</span><br><span class=\"line\">    public static java.lang.Double valueOf(double);</span><br><span class=\"line\">    public static double parseDouble(java.lang.String);</span><br><span class=\"line\">    public static boolean isNaN(double);</span><br><span class=\"line\">    public static boolean isInfinite(double);</span><br><span class=\"line\">    public static long doubleToLongBits(double);</span><br><span class=\"line\">    public static long doubleToRawLongBits(double);</span><br><span class=\"line\">    public static double longBitsToDouble(long);</span><br><span class=\"line\">    public static int compare(double,double);</span><br><span class=\"line\">    public boolean isNaN();</span><br><span class=\"line\">    public boolean isInfinite();</span><br><span class=\"line\">    public int compareTo(java.lang.Double);</span><br><span class=\"line\">    public byte byteValue();</span><br><span class=\"line\">    public short shortValue();</span><br><span class=\"line\">    public int intValue();</span><br><span class=\"line\">    public long longValue();</span><br><span class=\"line\">    public float floatValue();</span><br><span class=\"line\">    public double doubleValue();</span><br><span class=\"line\">    public int compareTo(java.lang.Object);</span><br><span class=\"line\">    public boolean equals(java.lang.Object);</span><br><span class=\"line\">    public int hashCode();</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - String method calls. Remove all invocations of String</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.String &#123;</span><br><span class=\"line\">    public static java.lang.String copyValueOf(char[]);</span><br><span class=\"line\">    public static java.lang.String copyValueOf(char[],int,int);</span><br><span class=\"line\">    public static java.lang.String valueOf(boolean);</span><br><span class=\"line\">    public static java.lang.String valueOf(char);</span><br><span class=\"line\">    public static java.lang.String valueOf(char[]);</span><br><span class=\"line\">    public static java.lang.String valueOf(char[],int,int);</span><br><span class=\"line\">    public static java.lang.String valueOf(double);</span><br><span class=\"line\">    public static java.lang.String valueOf(float);</span><br><span class=\"line\">    public static java.lang.String valueOf(int);</span><br><span class=\"line\">    public static java.lang.String valueOf(java.lang.Object);</span><br><span class=\"line\">    public static java.lang.String valueOf(long);</span><br><span class=\"line\">    public boolean contentEquals(java.lang.StringBuffer);</span><br><span class=\"line\">    public boolean endsWith(java.lang.String);</span><br><span class=\"line\">    public boolean equalsIgnoreCase(java.lang.String);</span><br><span class=\"line\">    public boolean equals(java.lang.Object);</span><br><span class=\"line\">    public boolean matches(java.lang.String);</span><br><span class=\"line\">    public boolean regionMatches(boolean,int,java.lang.String,int,int);</span><br><span class=\"line\">    public boolean regionMatches(int,java.lang.String,int,int);</span><br><span class=\"line\">    public boolean startsWith(java.lang.String);</span><br><span class=\"line\">    public boolean startsWith(java.lang.String,int);</span><br><span class=\"line\">    public byte[] getBytes();</span><br><span class=\"line\">    public byte[] getBytes(java.lang.String);</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public char[] toCharArray();</span><br><span class=\"line\">    public int compareToIgnoreCase(java.lang.String);</span><br><span class=\"line\">    public int compareTo(java.lang.Object);</span><br><span class=\"line\">    public int compareTo(java.lang.String);</span><br><span class=\"line\">    public int hashCode();</span><br><span class=\"line\">    public int indexOf(int);</span><br><span class=\"line\">    public int indexOf(int,int);</span><br><span class=\"line\">    public int indexOf(java.lang.String);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(int);</span><br><span class=\"line\">    public int lastIndexOf(int,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.CharSequence subSequence(int,int);</span><br><span class=\"line\">    public java.lang.String concat(java.lang.String);</span><br><span class=\"line\">    public java.lang.String replaceAll(java.lang.String,java.lang.String);</span><br><span class=\"line\">    public java.lang.String replace(char,char);</span><br><span class=\"line\">    public java.lang.String replaceFirst(java.lang.String,java.lang.String);</span><br><span class=\"line\">    public java.lang.String[] split(java.lang.String);</span><br><span class=\"line\">    public java.lang.String[] split(java.lang.String,int);</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">    public java.lang.String toLowerCase();</span><br><span class=\"line\">    public java.lang.String toLowerCase(java.util.Locale);</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public java.lang.String toUpperCase();</span><br><span class=\"line\">    public java.lang.String toUpperCase(java.util.Locale);</span><br><span class=\"line\">    public java.lang.String trim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - StringBuffer method calls. Remove all invocations of StringBuffer</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.StringBuffer &#123;</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public int capacity();</span><br><span class=\"line\">    public int codePointAt(int);</span><br><span class=\"line\">    public int codePointBefore(int);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Remove - StringBuilder method calls. Remove all invocations of StringBuilder</span><br><span class=\"line\"># methods without side effects whose return values are not used.</span><br><span class=\"line\">-assumenosideeffects public class java.lang.StringBuilder &#123;</span><br><span class=\"line\">    public java.lang.String toString();</span><br><span class=\"line\">    public char charAt(int);</span><br><span class=\"line\">    public int capacity();</span><br><span class=\"line\">    public int codePointAt(int);</span><br><span class=\"line\">    public int codePointBefore(int);</span><br><span class=\"line\">    public int indexOf(java.lang.String,int);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String);</span><br><span class=\"line\">    public int lastIndexOf(java.lang.String,int);</span><br><span class=\"line\">    public int length();</span><br><span class=\"line\">    public java.lang.String substring(int);</span><br><span class=\"line\">    public java.lang.String substring(int,int);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"https://www.jianshu.com/p/60e82aafcfd0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/60e82aafcfd0</a><br>官方文档：<a href=\"https://www.guardsquare.com/en/proguard/manual/introduction\" target=\"_blank\" rel=\"noopener\">https://www.guardsquare.com/en/proguard/manual/introduction</a></p>\n"},{"post_url":"storm-ack","title":"Strom 消息可靠性保障机制和 Ack 原理","date":"2018-08-01T07:13:27.000Z","_content":"原文地址：https://blog.csdn.net/sheen1991/article/details/52788547\n\nStorm提供了消息处理的保障机制，可以保证从Spout发射出的每个tuple都得到完整的处理。当然Storm消息处理保障机制的前提是你使用了这种特性，如果你的业务对偶尔丢失的tuple不敏感，那么也没必要启用这种机制，毕竟有得就会有失。\n\n注：本文前几节的内容主要来自并发编程网，原文链接：http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“ Ack原理 ”是自己的理解，不足之处欢迎指正。\n\n概述\n“完整性处理”是什么意思？\n\n一个从 spout 中发送出的 tuple 会产生上千个基于它创建的 tuples。例如，有这样一个 word-count 拓扑：\n```java\nTopologyBuilder builder = new TopologyBuilder();\nbuilder.setSpout(\"sentences\", new KestrelSpout(\"kestrel.backtype.com\",\n                                               22133,\n                                               \"sentence_queue\",\n                                               new StringScheme()));\nbuilder.setBolt(\"split\", new SplitSentence(), 10)\n        .shuffleGrouping(\"sentences\");\nbuilder.setBolt(\"count\", new WordCount(), 20)\n        .fieldsGrouping(\"split\", new Fields(\"word\"));\n```\n这个拓扑从一个 Kestrel 队列中读取句子，然后将句子分解成若干个单词，然后将它每个单词和该单词的数量发送出去。这种情况下，从 spout 中发出的 tuple 就会产生很多基于它创建的新 tuple：包括句子中单词的 tuple 和 每个单词的个数的 tuple。这些消息构成了这样一棵树：\n![](/images/20180814093241342.png)\n如果这棵 tuple 树发送完成，并且树中的每一条消息都得到了正确的处理，就表明发送 tuple 的 spout 已经得到了“完整性处理”。对应的，如果在指定的超时时间内 tuple 树中有消息没有完成处理就意味着这个 tuple 失败了。这个超时时间可以使用 Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS 参数在构造拓扑时进行配置，如果不配置，则默认时间为 30 秒。\n\n在消息得到完整性处理后或者处理失败后会发生什么？\n\n为了理解这个问题，让我们先了解一下 tuple 的生命周期。下面是定义 spout 的接口：\n```java\npublic interface ISpout extends Serializable {\n    void open(Map conf, TopologyContext context, SpoutOutputCollector collector);\n    void close();\n    void nextTuple();\n    void ack(Object msgId);\n    void fail(Object msgId);\n}\n```\n首先，通过调用 Spout 的 nextTuple 方法，Storm 向 Spout 请求一个 tuple。Spout 会使用 open 方法中提供的SpoutOutputCollector 向它的一个输出数据流中发送一个 tuple。在发送 tuple 的时候，Spout 会提供一个 “消息 id”，这个 id 会在后续过程中用于识别 tuple。例如，上面的 KestrelSpout 就是从一个 kestrel 队列中读取一条消息，然后再发送一条带有“消息 id”的消息，这个 id 是由 Kestrel 提供的。使用 SpoutOutputCollector 发送消息一般是这样的形式：\n```java\n_collector.emit(new Values(\"field1\", \"field2\", 3) , msgId);\n```\n随后，tuple 会被发送到对应的 bolt 中去，在这个过程中，Storm 会很小心地跟踪创建的消息树。如果 Storm 检测到某个 tuple 被完整处理， Storm 会根据 Spout 提供的“消息 id”调用最初发送 tuple 的 Spout 任务的 ack 方法。对应的，Storm 在检测到 tuple 超时之后就会调用 fail 方法。注意，对于一个特定的 tuple，响应（ack）和失败处理（fail）都只会由最初创建这个 tuple 的任务执行。也就是说，及时 Spout 在集群中有很多个任务，某个特定的 tuple 也只会由创建它的那个任务——而不是其他的任务——来处理成功或失败的结果。\n\n我们再以 KestrlSpout 为例来看看在消息的可靠性处理中 Spout 做了什么。在 KestrlSpout 从 Kestrel 队列中取出一条消息时，可以看作它“打开”了这条消息。也就是说，这条消息实际上并没有从队列中真正地取出来，而是保持着一个“挂起”状态，等待消息处理完成的信号。在挂起状态的消息不回被发送到其他的消费者中。另外，如果消费者（客户端）断开了连接，所有处于挂起状态的消息都会重新放回到队列中。在消息“打开”的时候 Kestrel 会给客户端同时提供消息体数据和一个唯一的 id。KestrelSpout 在使用 SpoutOutputCollector 发送 tuple 的时候就会把这个唯一的 id 当作“消息 id”。一段时间之后，在 KestrelSpout 的 ack 或者 fail 方法被调用的时候，KestrelSpout 就会通过这个消息 id 向 Kestrel 请求将消息从队列中移除（对应 ack 的情况）或者将消息重新放回队列（对应 fail 的情况）。\n\nStorm 的可靠性 API\n使用 Storm 的可靠性机制的时候你需要注意两件事：首先，在 tuple 树中创建新节点连接时务必通知 Storm；其次，在每个 tuple 处理结束的时候也必须向 Storm 发出通知。通过这两个操作，Storm 就能够检测到 tuple 树会在何时完成处理，并适时地调用 ack 或者 fail 方法。Storm 的 API 提供了一种非常精确的方式来实现着两个操作。\n\nStorm 中指定 tuple 树中的一个连接称为“锚定”（anchoring）。锚定是在发送新 tuple 的同时发生的。让我们以下面的 Bolt 为例说明这一点，这个 Bolt 将一个包含句子的 tuple 分割成若干个单词 tuple：\n```java\npublic class SplitSentence extends BaseRichBolt {\n        OutputCollector _collector;\n \n        public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n            _collector = collector;\n        }\n \n        public void execute(Tuple tuple) {\n            String sentence = tuple.getString(0);\n            for(String word: sentence.split(\" \")) {\n                _collector.emit(tuple, new Values(word));\n            }\n            _collector.ack(tuple);\n        }\n \n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n}\n```\n通过将输入 tuple 指定为 emit 方法的第一个参数，每个单词 tuple 都被“锚定”了。这样，如果单词 tuple 在后续处理过程中失败了，作为这棵 tuple 树的根节点的原始 Spout tuple 就会被重新处理。相对应的，如果这样发送 tuple：\n```java\n_collector.emit(new Values(word));\n```\n就称为“非锚定”。在这种情况下，下游的 tuple 处理失败不会触发原始 tuple 的任何处理操作。有时候发送这种“非锚定” tuple 也是必要的，这取决于你的拓扑的容错性要求。\n\n一个输出 tuple 可以被锚定到多个输入 tuple 上，这在流式连接或者聚合操作时很有用。显然，一个多锚定的 tuple 失败会导致 Spout 中多个 tuple 的重新处理。多锚定操作是通过指定一个 tuple 列表而不是单一的 tuple 来实现的，如下面的例子所示：\n```java\nList<Tuple> anchors = new ArrayList<Tuple>();\nanchors.add(tuple1);\nanchors.add(tuple2);\n_collector.emit(anchors, new Values(1, 2, 3));\n```\n多锚定操作会把输出 tuple 添加到多个 tuple 树中。注意，多锚定也可能会打破树的结构从而创建一个 tuple 的有向无环图（DAG），如下图所示：\n...\nStorm 的程序实现既支持对树的处理，同样也支持对 DAG 的处理（由于早期的 Storm 版本仅仅对树有效，所以“tuple 树”的这个糟糕的概念就一直沿袭下来了）。\n\n锚定其实可以看作是将 tuple 树具象化的过程 —— 在结束对一棵 tuple 树中一个单独 tuple 的处理的时候，后续以及最终的 tuple 都会在 Storm 可靠性 API 的作用下得到标定。这是通过 OutputCollector 的 ack 和 fail 方法实现的。如果你再回过头看一下 SplitSentence 的例子，你就会发现输入 tuple 是在所有的单词 tuple 发送出去之后被 ack 的。\n\n你可以使用 OutputCollector 的 fail 方法来使得位于 tuple 树根节点的 Spout tuple 立即失败。例如，你的应用可以在建立数据库连接的时候抓取异常，并且在异常出现的时候立即让输入 tuple 失败。通过这种立即失败的方式，原始 Spout tuple 就会比等待 tuple 超时的方式响应更快。\n\n每个待处理的 tuple 都必须显式地应答（ack）或者失效（fail）。因为 Storm 是使用内存来跟踪每个 tuple 的，所以，如果你不对每个 tuple 进行应答或者失效，那么负责跟踪的任务很快就会发生内存溢出。\n\nBolt 处理 tuple 的一种通用模式是在 execute 方法中读取输入 tuple、发送出基于输入 tuple 的新 tuple，然后在方法末尾对 tuple 进行应答。大部分 Bolt 都会使用这样的过程。这些 Bolt 大多属于过滤器或者简单的处理函数一类。Storm 有一个可以简化这种操作的简便接口，称为 BasicBolt。例如，如果使用 BasicBolt，SplitSentence 的例子可以这样写：\n```java\npublic class SplitSentence extends BaseBasicBolt {\n        public void execute(Tuple tuple, BasicOutputCollector collector) {\n            String sentence = tuple.getString(0);\n            for(String word: sentence.split(\" \")) {\n                collector.emit(new Values(word));\n            }\n        }\n \n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n}\n```\n这个实现方式比之前的方式要简单许多，而且在语义上有着完全一致的效果。发送到 BasicOutputCollector 的 tuple 会被自动锚定到输入 tuple 上，而且输入 tuple 会在 execute 方法结束的时候自动应答。\n\n相对应的，执行聚合或者联结操作的 Bolt 可能需要延迟应答 tuple，因为它需要等待一批 tuple 来完成某种结果计算。聚合和联结操作一般也会需要对他们的输出 tuple 进行多锚定。这个过程已经超出了 IBasicBolt 的应用范围。\n\nStorm 是以怎样一种高效的方式实现可靠性的？\nStorm 的拓扑有一些特殊的称为“acker”的任务，这些任务负责跟踪每个 Spout 发出的 tuple 的 DAG。当一个 acker 发现一个 DAG 结束了，它就会给创建 spout tuple 的 Spout 任务发送一条消息，让这个任务来应答这个消息。你可以使用Config.TOPOLOGY_ACKERS 来配置拓扑的 acker 数量。Storm 默认会将 acker 的数量设置为一，不过如果你有大量消息的处理需求，你可能需要增加这个数量。\n\n理解 Storm 的可靠性实现的最好方式还是通过了解 tuple 和 tuple DAG 的生命周期。当一个 tuple 在拓扑中被创建出来的时候 —— 不管是在 Spout 中还是在 Bolt 中创建的 —— 这个 tuple 都会被配置一个随机的 64 位 id。acker 就是使用这些 id 来跟踪每个 spout tuple 的 tuple DAG 的。\n\nSpout tuple 的 tuple 树中的每个 tuple 都知道 spout tuple 的 id。当你在 bolt 中发送一个新 tuple 的时候，输入 tuple 中的所有 spout tuple 的 id 都会被复制到新的 tuple 中。在 tuple 被 ack 的时候，它会通过回掉函数向合适的 acker 发送一条消息，这条消息显示了 tuple 树中发生的变化。也就是说，它会告诉 acker 这样一条消息：“在这个 tuple 树中，我的处理已经结束了，接下来这个就是被我标记的新 tuple”。\n\n以下图为例，如果 D tuple 和 E tuple 是由 C tuple 创建的，那么在 C 应答的时候 tuple 树就会发生变化：\n\nack tree\n\n由于在 D 和 E 添加到 tuple 树中的时候 C 已经从树中移除了，所以这个树并不会被过早地结束。\n\n关于 Storm 如何跟踪 tuple 树还有更多的细节。正如上面所提到的，你可以随意设置拓扑中 acker 的数量。这就会引起下面的问题：当 tuple 在拓扑中被 ack 的时候，它是怎么知道向那个 acker 任务发送信息的？\n\n对于这个问题，Storm 实际上是使用哈希算法来将 spout tuple 匹配到 acker 任务上的。由于每个 tuple 都会包含原始的 spout tuple id，所以他们会知道需要与哪个 acker 任务通信。\n\n关于 Storm 的另一个问题是 acker 是如何知道它所跟踪的 spout tuple 是由哪个 Spout 任务处理的。实际上，在 Spout 任务发送新 tuple 的时候，它也会给对应的 acker 发送一条消息，告诉 acker 这个 spout tuple 是与它的任务 id 相关联的。随后，在 acker 观察到 tuple 树结束处理的时候，它就会知道向哪个 Spout 任务发送结束消息。\n\nAcker 实际上并不会直接跟踪 tuple 树。对于一棵包含数万个 tuple 节点的树，如果直接跟踪其中的每个 tuple，显然会很快把这个 acker 的内存撑爆。所以，这里 acker 使用一个特殊的策略来实现跟踪的功能，使用这个方法对于每个 spout tuple 只需要占用固定的内存空间（大约 20 字节）。这个跟踪算法是 Storm 运行的关键，也是 Storm 的一个突破性技术。\n\n在 acker 任务中储存了一个表，用于将 spout tuple 的 id 和一对值相映射。其中第一个值是创建这个 tuple 的任务 id，这个 id 主要用于在后续操作中发送结束消息。第二个值是一个 64 比特的数字，称为“应答值”（ack val）。这个应答值是整个 tuple 树的一个完整的状态表述，而且它与树的大小无关。因为这个值仅仅是这棵树中所有被创建的或者被应答的 tuple 的 tuple id 进行异或运算的结果值。\n\n当一个 acker 任务观察到“应答值”变为 0 的时候，它就知道这个 tuple 树已经完成处理了。因为 tuple id 实际上是随机生成的 64 比特数值，所以“应答值”碰巧为 0 是一种极小概率的事件。理论计算得以得出，在每秒应答一万次的情况下，需要 5000 万年才会发生一次错误。而且即使是这样，也仅仅会在 tuple 碰巧在拓扑中失败的时候才会发生数据丢失的情况。\n\n假设你现在已经理解了这个可靠性算法，让我们再分析一下所有失败的情形，看看这些情形下 Storm 是如何避免数据缺失的：\n\n由于任务（线程）挂掉导致 tuple 没有被应答（ack）的情况：这时位于 tuple 树根节点的 spout tuple 会在任务超时后得到重新处理。\nAcker 任务挂掉的情形：这种情况下 acker 所跟踪的所有 spout tuple 都会由于超时被重新处理。\nSpout 任务挂掉的情形：这种情况下 Spout 任务的来源就会负责重新处理消息。例如，对于像 Kestrel 和 RabbitMQ 这样的消息队列就会在客户端断开连接时将所有的挂起状态的消息放回队列。\n综上所述，Storm 的可靠性机制完全具备分布的、可伸缩的、容错的特征。\n\n调整可靠性\n由于 acker 任务是轻量级的，在拓扑中你并不需要很多 acker 任务。你可以通过 Storm UI 监控他们的性能（acker 任务的 id 为“__acker”）。如果发现观察结果存在问题，你可能就需要增加更多的 acker 任务。\n\n如果你不关注消息的可靠性 —— 也就是说你不关心在失败情形下发生的 tuple 丢失 —— 那么你就可以通过不跟踪 tuple 树的处理来提升拓扑的性能。由于 tuple 树中的每个 tuple 都会带有一个应答消息，不追踪 tuple 树会使得传输的消息的数量减半。同时，下游数据流中的 id 也会变少，这样可以降低网络带宽的消耗。\n\n有三种方法可以移除 Storm 的可靠性机制。\n\n第一种方法是将 Config.TOPOLOGY_ACKERS 设置为0，在这种情况下，Storm 会在 Spout 发送 tuple 之后立即调用 ack 方法，tuple 树叶就不会被跟踪了。\n第二种方法是基于消息本身移除可靠性。你可以通过在 SpoutOutputCollector.emit 方法中省略消息 id 来关闭 spout tuple 的跟踪功能。\n最后，如果你不关心拓扑中的下游 tuple 是否会失败，你可以在发送 tuple 的时候选择发送“非锚定”的（unanchored）tuple。由于这些 tuple 不会被标记到任何一个 spout tuple 中，显然在他们处理失败的时候不会引起任何 spout tuple 的重新处理（注意，在使用这种方法时，如果上游有 spout 或 bolt 仍然保持可靠性机制，那么需要在 execute 方法之初调用OutputCollector.ack 来立即响应上游的消息，否则上游组件会误认为消息没有发送成功导致所有的消息会被反复发送）。\nAck原理\n正如前文所述，Storm使用了一种巧妙的机制来判断一棵tuple数是否处理完毕，那就是通过tuple的id进行异或运算得到。\n\n在这之前，首先需要了解一点“异或”常识\n```\nA^0 = A\nA^A = 0\nA^B^C^...^C^B^A=0  其中每个算子成对存在\n```\n再来看看Storm是如何利用异或进行ack确认的。\n\ntuple标记和数据结构\n\n对于Spout而言，在发送一个tuple时，需要指定一个msgId，这时，系统会根据这个msgId来给这个tuple生成一个64位的spout tuple id，也可称之为root id。这个root id会一直跟着这个将要发送的tuple，不管是在当前spout中还是在下游的bolt中，作为该tuple的唯一标识。同时，不管在Spout还是在Bolt中，系统会给每个发送的tuple随机生成一个64位的tuple id，这个id只和当前tuple相关。例如某个spout中发送了tuple A，在下游bolt中接受了A并且发送了tuple B和C，且B和C被锚定在A上，那么A、B、C都会携带一个相同的root id，并且各自拥有一个随机的 tuple id。此外，在Spout发送一个源tuple时，负责“跟踪”的acker中会记录下当前Spout task的 task id和这个tuple的root id的对应关系，以便acker知道，当某个tuple树ack完全时，去通知哪个spout task。\n\n这样一来，对于一个tuple，至少需要包含以下几项信息：\n[root id (根据msgId生成的spout tuple id)、 tuple id]\n\n对于acker中，需要存储一个映射表：[msgId 、root id 、task id]\n注：这里的数据结构只是帮助理解，storm的具体实现可能会与此处不同，但是思路是一致的，这里不去纠结。\n\nack确认\n\n基于上述表述，我们知道在一个spout或者bolt发送一个tuple的时候都做了哪些工作。当我们在Bolt中进行ack确认的时候，Storm会将发送的tuple和接受到的tuple的tuple id进行异或运算，直到结果为0，则表示一棵tuple已经完成确认。\n\n举个栗子\n\n假设有一个Spout，分别发送T1给下游Bolt1，发送T2给下游Bolt2，Bolt2处理完毕后对T2进行ack并不再发送消息到下游，Bolt1继续发送T3给下游Bolt3，同时发送另一个tuple T4给下游Bolt4，Bolt3处理完毕后发送T5给下游Bolt5，Bolt3处理完毕后发送T6给下游Bolt5，Bolt5不再发送新的tuple到下游。\n\n![](/images/201808140930396.jpeg)\n\n\n这里使用t1代表T1的tuple id。则一开始从spout中发送t1和t2时，系统首先对t1和t2进行异或，即\n\nroot id ： t1^t2\n显然通常而言这里t1^t2不等于0。\n\n接着，在Bolt1中，发送了T3和T4后，对T1进行ack，acker会做如下运算\n\nroot id: t1^t2^(t1^t3^t4)\n这时候Bolt3对T3处理完毕，发送T5之后进行ack，则acker继续做如下运算：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)\n同理Bolt4处理完毕后，发送T6，对T4 ack确认，则有：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)\n接下来，Bolt5分别收到了T5和T6并处理完毕，则acker进行运算：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6\n与此同时，Bolt2早就对T2处理完毕并ack，acker在任何可能的时候，就会对t2进行运算，\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6^t2\n也可能是在中间部分就假如了t2，这取决于Bolt2的处理速度：\n\nroot id: t1^t2^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6\n最后得到的计算结果，根据前面的异或的性质我们知道，是0。此时，ack便认为，这个tuple树已经处理完毕，则Spout中的原始tuple处理完毕。如果在任一环节收不到ack，那么这里的计算结果都不会是0。因此，acker通过这种巧妙的运算设计，达到了“跟踪”tuple tree的效果，同时占用内存非常小。\n\n以上便是ack的工作机制，详细的逻辑可能还要去自己阅读源码。如果有不对的地方欢迎指正。","source":"_posts/storm-ack.md","raw":"---\npost_url: storm-ack\ntitle: Strom 消息可靠性保障机制和 Ack 原理\ndate: 2018-08-01 15:13:27\ntags: storm\n---\n原文地址：https://blog.csdn.net/sheen1991/article/details/52788547\n\nStorm提供了消息处理的保障机制，可以保证从Spout发射出的每个tuple都得到完整的处理。当然Storm消息处理保障机制的前提是你使用了这种特性，如果你的业务对偶尔丢失的tuple不敏感，那么也没必要启用这种机制，毕竟有得就会有失。\n\n注：本文前几节的内容主要来自并发编程网，原文链接：http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“ Ack原理 ”是自己的理解，不足之处欢迎指正。\n\n概述\n“完整性处理”是什么意思？\n\n一个从 spout 中发送出的 tuple 会产生上千个基于它创建的 tuples。例如，有这样一个 word-count 拓扑：\n```java\nTopologyBuilder builder = new TopologyBuilder();\nbuilder.setSpout(\"sentences\", new KestrelSpout(\"kestrel.backtype.com\",\n                                               22133,\n                                               \"sentence_queue\",\n                                               new StringScheme()));\nbuilder.setBolt(\"split\", new SplitSentence(), 10)\n        .shuffleGrouping(\"sentences\");\nbuilder.setBolt(\"count\", new WordCount(), 20)\n        .fieldsGrouping(\"split\", new Fields(\"word\"));\n```\n这个拓扑从一个 Kestrel 队列中读取句子，然后将句子分解成若干个单词，然后将它每个单词和该单词的数量发送出去。这种情况下，从 spout 中发出的 tuple 就会产生很多基于它创建的新 tuple：包括句子中单词的 tuple 和 每个单词的个数的 tuple。这些消息构成了这样一棵树：\n![](/images/20180814093241342.png)\n如果这棵 tuple 树发送完成，并且树中的每一条消息都得到了正确的处理，就表明发送 tuple 的 spout 已经得到了“完整性处理”。对应的，如果在指定的超时时间内 tuple 树中有消息没有完成处理就意味着这个 tuple 失败了。这个超时时间可以使用 Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS 参数在构造拓扑时进行配置，如果不配置，则默认时间为 30 秒。\n\n在消息得到完整性处理后或者处理失败后会发生什么？\n\n为了理解这个问题，让我们先了解一下 tuple 的生命周期。下面是定义 spout 的接口：\n```java\npublic interface ISpout extends Serializable {\n    void open(Map conf, TopologyContext context, SpoutOutputCollector collector);\n    void close();\n    void nextTuple();\n    void ack(Object msgId);\n    void fail(Object msgId);\n}\n```\n首先，通过调用 Spout 的 nextTuple 方法，Storm 向 Spout 请求一个 tuple。Spout 会使用 open 方法中提供的SpoutOutputCollector 向它的一个输出数据流中发送一个 tuple。在发送 tuple 的时候，Spout 会提供一个 “消息 id”，这个 id 会在后续过程中用于识别 tuple。例如，上面的 KestrelSpout 就是从一个 kestrel 队列中读取一条消息，然后再发送一条带有“消息 id”的消息，这个 id 是由 Kestrel 提供的。使用 SpoutOutputCollector 发送消息一般是这样的形式：\n```java\n_collector.emit(new Values(\"field1\", \"field2\", 3) , msgId);\n```\n随后，tuple 会被发送到对应的 bolt 中去，在这个过程中，Storm 会很小心地跟踪创建的消息树。如果 Storm 检测到某个 tuple 被完整处理， Storm 会根据 Spout 提供的“消息 id”调用最初发送 tuple 的 Spout 任务的 ack 方法。对应的，Storm 在检测到 tuple 超时之后就会调用 fail 方法。注意，对于一个特定的 tuple，响应（ack）和失败处理（fail）都只会由最初创建这个 tuple 的任务执行。也就是说，及时 Spout 在集群中有很多个任务，某个特定的 tuple 也只会由创建它的那个任务——而不是其他的任务——来处理成功或失败的结果。\n\n我们再以 KestrlSpout 为例来看看在消息的可靠性处理中 Spout 做了什么。在 KestrlSpout 从 Kestrel 队列中取出一条消息时，可以看作它“打开”了这条消息。也就是说，这条消息实际上并没有从队列中真正地取出来，而是保持着一个“挂起”状态，等待消息处理完成的信号。在挂起状态的消息不回被发送到其他的消费者中。另外，如果消费者（客户端）断开了连接，所有处于挂起状态的消息都会重新放回到队列中。在消息“打开”的时候 Kestrel 会给客户端同时提供消息体数据和一个唯一的 id。KestrelSpout 在使用 SpoutOutputCollector 发送 tuple 的时候就会把这个唯一的 id 当作“消息 id”。一段时间之后，在 KestrelSpout 的 ack 或者 fail 方法被调用的时候，KestrelSpout 就会通过这个消息 id 向 Kestrel 请求将消息从队列中移除（对应 ack 的情况）或者将消息重新放回队列（对应 fail 的情况）。\n\nStorm 的可靠性 API\n使用 Storm 的可靠性机制的时候你需要注意两件事：首先，在 tuple 树中创建新节点连接时务必通知 Storm；其次，在每个 tuple 处理结束的时候也必须向 Storm 发出通知。通过这两个操作，Storm 就能够检测到 tuple 树会在何时完成处理，并适时地调用 ack 或者 fail 方法。Storm 的 API 提供了一种非常精确的方式来实现着两个操作。\n\nStorm 中指定 tuple 树中的一个连接称为“锚定”（anchoring）。锚定是在发送新 tuple 的同时发生的。让我们以下面的 Bolt 为例说明这一点，这个 Bolt 将一个包含句子的 tuple 分割成若干个单词 tuple：\n```java\npublic class SplitSentence extends BaseRichBolt {\n        OutputCollector _collector;\n \n        public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n            _collector = collector;\n        }\n \n        public void execute(Tuple tuple) {\n            String sentence = tuple.getString(0);\n            for(String word: sentence.split(\" \")) {\n                _collector.emit(tuple, new Values(word));\n            }\n            _collector.ack(tuple);\n        }\n \n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n}\n```\n通过将输入 tuple 指定为 emit 方法的第一个参数，每个单词 tuple 都被“锚定”了。这样，如果单词 tuple 在后续处理过程中失败了，作为这棵 tuple 树的根节点的原始 Spout tuple 就会被重新处理。相对应的，如果这样发送 tuple：\n```java\n_collector.emit(new Values(word));\n```\n就称为“非锚定”。在这种情况下，下游的 tuple 处理失败不会触发原始 tuple 的任何处理操作。有时候发送这种“非锚定” tuple 也是必要的，这取决于你的拓扑的容错性要求。\n\n一个输出 tuple 可以被锚定到多个输入 tuple 上，这在流式连接或者聚合操作时很有用。显然，一个多锚定的 tuple 失败会导致 Spout 中多个 tuple 的重新处理。多锚定操作是通过指定一个 tuple 列表而不是单一的 tuple 来实现的，如下面的例子所示：\n```java\nList<Tuple> anchors = new ArrayList<Tuple>();\nanchors.add(tuple1);\nanchors.add(tuple2);\n_collector.emit(anchors, new Values(1, 2, 3));\n```\n多锚定操作会把输出 tuple 添加到多个 tuple 树中。注意，多锚定也可能会打破树的结构从而创建一个 tuple 的有向无环图（DAG），如下图所示：\n...\nStorm 的程序实现既支持对树的处理，同样也支持对 DAG 的处理（由于早期的 Storm 版本仅仅对树有效，所以“tuple 树”的这个糟糕的概念就一直沿袭下来了）。\n\n锚定其实可以看作是将 tuple 树具象化的过程 —— 在结束对一棵 tuple 树中一个单独 tuple 的处理的时候，后续以及最终的 tuple 都会在 Storm 可靠性 API 的作用下得到标定。这是通过 OutputCollector 的 ack 和 fail 方法实现的。如果你再回过头看一下 SplitSentence 的例子，你就会发现输入 tuple 是在所有的单词 tuple 发送出去之后被 ack 的。\n\n你可以使用 OutputCollector 的 fail 方法来使得位于 tuple 树根节点的 Spout tuple 立即失败。例如，你的应用可以在建立数据库连接的时候抓取异常，并且在异常出现的时候立即让输入 tuple 失败。通过这种立即失败的方式，原始 Spout tuple 就会比等待 tuple 超时的方式响应更快。\n\n每个待处理的 tuple 都必须显式地应答（ack）或者失效（fail）。因为 Storm 是使用内存来跟踪每个 tuple 的，所以，如果你不对每个 tuple 进行应答或者失效，那么负责跟踪的任务很快就会发生内存溢出。\n\nBolt 处理 tuple 的一种通用模式是在 execute 方法中读取输入 tuple、发送出基于输入 tuple 的新 tuple，然后在方法末尾对 tuple 进行应答。大部分 Bolt 都会使用这样的过程。这些 Bolt 大多属于过滤器或者简单的处理函数一类。Storm 有一个可以简化这种操作的简便接口，称为 BasicBolt。例如，如果使用 BasicBolt，SplitSentence 的例子可以这样写：\n```java\npublic class SplitSentence extends BaseBasicBolt {\n        public void execute(Tuple tuple, BasicOutputCollector collector) {\n            String sentence = tuple.getString(0);\n            for(String word: sentence.split(\" \")) {\n                collector.emit(new Values(word));\n            }\n        }\n \n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n}\n```\n这个实现方式比之前的方式要简单许多，而且在语义上有着完全一致的效果。发送到 BasicOutputCollector 的 tuple 会被自动锚定到输入 tuple 上，而且输入 tuple 会在 execute 方法结束的时候自动应答。\n\n相对应的，执行聚合或者联结操作的 Bolt 可能需要延迟应答 tuple，因为它需要等待一批 tuple 来完成某种结果计算。聚合和联结操作一般也会需要对他们的输出 tuple 进行多锚定。这个过程已经超出了 IBasicBolt 的应用范围。\n\nStorm 是以怎样一种高效的方式实现可靠性的？\nStorm 的拓扑有一些特殊的称为“acker”的任务，这些任务负责跟踪每个 Spout 发出的 tuple 的 DAG。当一个 acker 发现一个 DAG 结束了，它就会给创建 spout tuple 的 Spout 任务发送一条消息，让这个任务来应答这个消息。你可以使用Config.TOPOLOGY_ACKERS 来配置拓扑的 acker 数量。Storm 默认会将 acker 的数量设置为一，不过如果你有大量消息的处理需求，你可能需要增加这个数量。\n\n理解 Storm 的可靠性实现的最好方式还是通过了解 tuple 和 tuple DAG 的生命周期。当一个 tuple 在拓扑中被创建出来的时候 —— 不管是在 Spout 中还是在 Bolt 中创建的 —— 这个 tuple 都会被配置一个随机的 64 位 id。acker 就是使用这些 id 来跟踪每个 spout tuple 的 tuple DAG 的。\n\nSpout tuple 的 tuple 树中的每个 tuple 都知道 spout tuple 的 id。当你在 bolt 中发送一个新 tuple 的时候，输入 tuple 中的所有 spout tuple 的 id 都会被复制到新的 tuple 中。在 tuple 被 ack 的时候，它会通过回掉函数向合适的 acker 发送一条消息，这条消息显示了 tuple 树中发生的变化。也就是说，它会告诉 acker 这样一条消息：“在这个 tuple 树中，我的处理已经结束了，接下来这个就是被我标记的新 tuple”。\n\n以下图为例，如果 D tuple 和 E tuple 是由 C tuple 创建的，那么在 C 应答的时候 tuple 树就会发生变化：\n\nack tree\n\n由于在 D 和 E 添加到 tuple 树中的时候 C 已经从树中移除了，所以这个树并不会被过早地结束。\n\n关于 Storm 如何跟踪 tuple 树还有更多的细节。正如上面所提到的，你可以随意设置拓扑中 acker 的数量。这就会引起下面的问题：当 tuple 在拓扑中被 ack 的时候，它是怎么知道向那个 acker 任务发送信息的？\n\n对于这个问题，Storm 实际上是使用哈希算法来将 spout tuple 匹配到 acker 任务上的。由于每个 tuple 都会包含原始的 spout tuple id，所以他们会知道需要与哪个 acker 任务通信。\n\n关于 Storm 的另一个问题是 acker 是如何知道它所跟踪的 spout tuple 是由哪个 Spout 任务处理的。实际上，在 Spout 任务发送新 tuple 的时候，它也会给对应的 acker 发送一条消息，告诉 acker 这个 spout tuple 是与它的任务 id 相关联的。随后，在 acker 观察到 tuple 树结束处理的时候，它就会知道向哪个 Spout 任务发送结束消息。\n\nAcker 实际上并不会直接跟踪 tuple 树。对于一棵包含数万个 tuple 节点的树，如果直接跟踪其中的每个 tuple，显然会很快把这个 acker 的内存撑爆。所以，这里 acker 使用一个特殊的策略来实现跟踪的功能，使用这个方法对于每个 spout tuple 只需要占用固定的内存空间（大约 20 字节）。这个跟踪算法是 Storm 运行的关键，也是 Storm 的一个突破性技术。\n\n在 acker 任务中储存了一个表，用于将 spout tuple 的 id 和一对值相映射。其中第一个值是创建这个 tuple 的任务 id，这个 id 主要用于在后续操作中发送结束消息。第二个值是一个 64 比特的数字，称为“应答值”（ack val）。这个应答值是整个 tuple 树的一个完整的状态表述，而且它与树的大小无关。因为这个值仅仅是这棵树中所有被创建的或者被应答的 tuple 的 tuple id 进行异或运算的结果值。\n\n当一个 acker 任务观察到“应答值”变为 0 的时候，它就知道这个 tuple 树已经完成处理了。因为 tuple id 实际上是随机生成的 64 比特数值，所以“应答值”碰巧为 0 是一种极小概率的事件。理论计算得以得出，在每秒应答一万次的情况下，需要 5000 万年才会发生一次错误。而且即使是这样，也仅仅会在 tuple 碰巧在拓扑中失败的时候才会发生数据丢失的情况。\n\n假设你现在已经理解了这个可靠性算法，让我们再分析一下所有失败的情形，看看这些情形下 Storm 是如何避免数据缺失的：\n\n由于任务（线程）挂掉导致 tuple 没有被应答（ack）的情况：这时位于 tuple 树根节点的 spout tuple 会在任务超时后得到重新处理。\nAcker 任务挂掉的情形：这种情况下 acker 所跟踪的所有 spout tuple 都会由于超时被重新处理。\nSpout 任务挂掉的情形：这种情况下 Spout 任务的来源就会负责重新处理消息。例如，对于像 Kestrel 和 RabbitMQ 这样的消息队列就会在客户端断开连接时将所有的挂起状态的消息放回队列。\n综上所述，Storm 的可靠性机制完全具备分布的、可伸缩的、容错的特征。\n\n调整可靠性\n由于 acker 任务是轻量级的，在拓扑中你并不需要很多 acker 任务。你可以通过 Storm UI 监控他们的性能（acker 任务的 id 为“__acker”）。如果发现观察结果存在问题，你可能就需要增加更多的 acker 任务。\n\n如果你不关注消息的可靠性 —— 也就是说你不关心在失败情形下发生的 tuple 丢失 —— 那么你就可以通过不跟踪 tuple 树的处理来提升拓扑的性能。由于 tuple 树中的每个 tuple 都会带有一个应答消息，不追踪 tuple 树会使得传输的消息的数量减半。同时，下游数据流中的 id 也会变少，这样可以降低网络带宽的消耗。\n\n有三种方法可以移除 Storm 的可靠性机制。\n\n第一种方法是将 Config.TOPOLOGY_ACKERS 设置为0，在这种情况下，Storm 会在 Spout 发送 tuple 之后立即调用 ack 方法，tuple 树叶就不会被跟踪了。\n第二种方法是基于消息本身移除可靠性。你可以通过在 SpoutOutputCollector.emit 方法中省略消息 id 来关闭 spout tuple 的跟踪功能。\n最后，如果你不关心拓扑中的下游 tuple 是否会失败，你可以在发送 tuple 的时候选择发送“非锚定”的（unanchored）tuple。由于这些 tuple 不会被标记到任何一个 spout tuple 中，显然在他们处理失败的时候不会引起任何 spout tuple 的重新处理（注意，在使用这种方法时，如果上游有 spout 或 bolt 仍然保持可靠性机制，那么需要在 execute 方法之初调用OutputCollector.ack 来立即响应上游的消息，否则上游组件会误认为消息没有发送成功导致所有的消息会被反复发送）。\nAck原理\n正如前文所述，Storm使用了一种巧妙的机制来判断一棵tuple数是否处理完毕，那就是通过tuple的id进行异或运算得到。\n\n在这之前，首先需要了解一点“异或”常识\n```\nA^0 = A\nA^A = 0\nA^B^C^...^C^B^A=0  其中每个算子成对存在\n```\n再来看看Storm是如何利用异或进行ack确认的。\n\ntuple标记和数据结构\n\n对于Spout而言，在发送一个tuple时，需要指定一个msgId，这时，系统会根据这个msgId来给这个tuple生成一个64位的spout tuple id，也可称之为root id。这个root id会一直跟着这个将要发送的tuple，不管是在当前spout中还是在下游的bolt中，作为该tuple的唯一标识。同时，不管在Spout还是在Bolt中，系统会给每个发送的tuple随机生成一个64位的tuple id，这个id只和当前tuple相关。例如某个spout中发送了tuple A，在下游bolt中接受了A并且发送了tuple B和C，且B和C被锚定在A上，那么A、B、C都会携带一个相同的root id，并且各自拥有一个随机的 tuple id。此外，在Spout发送一个源tuple时，负责“跟踪”的acker中会记录下当前Spout task的 task id和这个tuple的root id的对应关系，以便acker知道，当某个tuple树ack完全时，去通知哪个spout task。\n\n这样一来，对于一个tuple，至少需要包含以下几项信息：\n[root id (根据msgId生成的spout tuple id)、 tuple id]\n\n对于acker中，需要存储一个映射表：[msgId 、root id 、task id]\n注：这里的数据结构只是帮助理解，storm的具体实现可能会与此处不同，但是思路是一致的，这里不去纠结。\n\nack确认\n\n基于上述表述，我们知道在一个spout或者bolt发送一个tuple的时候都做了哪些工作。当我们在Bolt中进行ack确认的时候，Storm会将发送的tuple和接受到的tuple的tuple id进行异或运算，直到结果为0，则表示一棵tuple已经完成确认。\n\n举个栗子\n\n假设有一个Spout，分别发送T1给下游Bolt1，发送T2给下游Bolt2，Bolt2处理完毕后对T2进行ack并不再发送消息到下游，Bolt1继续发送T3给下游Bolt3，同时发送另一个tuple T4给下游Bolt4，Bolt3处理完毕后发送T5给下游Bolt5，Bolt3处理完毕后发送T6给下游Bolt5，Bolt5不再发送新的tuple到下游。\n\n![](/images/201808140930396.jpeg)\n\n\n这里使用t1代表T1的tuple id。则一开始从spout中发送t1和t2时，系统首先对t1和t2进行异或，即\n\nroot id ： t1^t2\n显然通常而言这里t1^t2不等于0。\n\n接着，在Bolt1中，发送了T3和T4后，对T1进行ack，acker会做如下运算\n\nroot id: t1^t2^(t1^t3^t4)\n这时候Bolt3对T3处理完毕，发送T5之后进行ack，则acker继续做如下运算：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)\n同理Bolt4处理完毕后，发送T6，对T4 ack确认，则有：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)\n接下来，Bolt5分别收到了T5和T6并处理完毕，则acker进行运算：\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6\n与此同时，Bolt2早就对T2处理完毕并ack，acker在任何可能的时候，就会对t2进行运算，\n\nroot id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6^t2\n也可能是在中间部分就假如了t2，这取决于Bolt2的处理速度：\n\nroot id: t1^t2^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6\n最后得到的计算结果，根据前面的异或的性质我们知道，是0。此时，ack便认为，这个tuple树已经处理完毕，则Spout中的原始tuple处理完毕。如果在任一环节收不到ack，那么这里的计算结果都不会是0。因此，acker通过这种巧妙的运算设计，达到了“跟踪”tuple tree的效果，同时占用内存非常小。\n\n以上便是ack的工作机制，详细的逻辑可能还要去自己阅读源码。如果有不对的地方欢迎指正。","slug":"storm-ack","published":1,"updated":"2019-03-24T13:40:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtoghts2008s05aba8t0hp6r","content":"<p>原文地址：<a href=\"https://blog.csdn.net/sheen1991/article/details/52788547\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sheen1991/article/details/52788547</a></p>\n<p>Storm提供了消息处理的保障机制，可以保证从Spout发射出的每个tuple都得到完整的处理。当然Storm消息处理保障机制的前提是你使用了这种特性，如果你的业务对偶尔丢失的tuple不敏感，那么也没必要启用这种机制，毕竟有得就会有失。</p>\n<p>注：本文前几节的内容主要来自并发编程网，原文链接：<a href=\"http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“</a> Ack原理 ”是自己的理解，不足之处欢迎指正。</p>\n<p>概述<br>“完整性处理”是什么意思？</p>\n<p>一个从 spout 中发送出的 tuple 会产生上千个基于它创建的 tuples。例如，有这样一个 word-count 拓扑：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TopologyBuilder builder = <span class=\"keyword\">new</span> TopologyBuilder();</span><br><span class=\"line\">builder.setSpout(<span class=\"string\">\"sentences\"</span>, <span class=\"keyword\">new</span> KestrelSpout(<span class=\"string\">\"kestrel.backtype.com\"</span>,</span><br><span class=\"line\">                                               <span class=\"number\">22133</span>,</span><br><span class=\"line\">                                               <span class=\"string\">\"sentence_queue\"</span>,</span><br><span class=\"line\">                                               <span class=\"keyword\">new</span> StringScheme()));</span><br><span class=\"line\">builder.setBolt(<span class=\"string\">\"split\"</span>, <span class=\"keyword\">new</span> SplitSentence(), <span class=\"number\">10</span>)</span><br><span class=\"line\">        .shuffleGrouping(<span class=\"string\">\"sentences\"</span>);</span><br><span class=\"line\">builder.setBolt(<span class=\"string\">\"count\"</span>, <span class=\"keyword\">new</span> WordCount(), <span class=\"number\">20</span>)</span><br><span class=\"line\">        .fieldsGrouping(<span class=\"string\">\"split\"</span>, <span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>这个拓扑从一个 Kestrel 队列中读取句子，然后将句子分解成若干个单词，然后将它每个单词和该单词的数量发送出去。这种情况下，从 spout 中发出的 tuple 就会产生很多基于它创建的新 tuple：包括句子中单词的 tuple 和 每个单词的个数的 tuple。这些消息构成了这样一棵树：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180814093241342.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>如果这棵 tuple 树发送完成，并且树中的每一条消息都得到了正确的处理，就表明发送 tuple 的 spout 已经得到了“完整性处理”。对应的，如果在指定的超时时间内 tuple 树中有消息没有完成处理就意味着这个 tuple 失败了。这个超时时间可以使用 Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS 参数在构造拓扑时进行配置，如果不配置，则默认时间为 30 秒。</p>\n<p>在消息得到完整性处理后或者处理失败后会发生什么？</p>\n<p>为了理解这个问题，让我们先了解一下 tuple 的生命周期。下面是定义 spout 的接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISpout</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(Map conf, TopologyContext context, SpoutOutputCollector collector)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">nextTuple</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ack</span><span class=\"params\">(Object msgId)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Object msgId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先，通过调用 Spout 的 nextTuple 方法，Storm 向 Spout 请求一个 tuple。Spout 会使用 open 方法中提供的SpoutOutputCollector 向它的一个输出数据流中发送一个 tuple。在发送 tuple 的时候，Spout 会提供一个 “消息 id”，这个 id 会在后续过程中用于识别 tuple。例如，上面的 KestrelSpout 就是从一个 kestrel 队列中读取一条消息，然后再发送一条带有“消息 id”的消息，这个 id 是由 Kestrel 提供的。使用 SpoutOutputCollector 发送消息一般是这样的形式：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(<span class=\"string\">\"field1\"</span>, <span class=\"string\">\"field2\"</span>, <span class=\"number\">3</span>) , msgId);</span><br></pre></td></tr></table></figure></p>\n<p>随后，tuple 会被发送到对应的 bolt 中去，在这个过程中，Storm 会很小心地跟踪创建的消息树。如果 Storm 检测到某个 tuple 被完整处理， Storm 会根据 Spout 提供的“消息 id”调用最初发送 tuple 的 Spout 任务的 ack 方法。对应的，Storm 在检测到 tuple 超时之后就会调用 fail 方法。注意，对于一个特定的 tuple，响应（ack）和失败处理（fail）都只会由最初创建这个 tuple 的任务执行。也就是说，及时 Spout 在集群中有很多个任务，某个特定的 tuple 也只会由创建它的那个任务——而不是其他的任务——来处理成功或失败的结果。</p>\n<p>我们再以 KestrlSpout 为例来看看在消息的可靠性处理中 Spout 做了什么。在 KestrlSpout 从 Kestrel 队列中取出一条消息时，可以看作它“打开”了这条消息。也就是说，这条消息实际上并没有从队列中真正地取出来，而是保持着一个“挂起”状态，等待消息处理完成的信号。在挂起状态的消息不回被发送到其他的消费者中。另外，如果消费者（客户端）断开了连接，所有处于挂起状态的消息都会重新放回到队列中。在消息“打开”的时候 Kestrel 会给客户端同时提供消息体数据和一个唯一的 id。KestrelSpout 在使用 SpoutOutputCollector 发送 tuple 的时候就会把这个唯一的 id 当作“消息 id”。一段时间之后，在 KestrelSpout 的 ack 或者 fail 方法被调用的时候，KestrelSpout 就会通过这个消息 id 向 Kestrel 请求将消息从队列中移除（对应 ack 的情况）或者将消息重新放回队列（对应 fail 的情况）。</p>\n<p>Storm 的可靠性 API<br>使用 Storm 的可靠性机制的时候你需要注意两件事：首先，在 tuple 树中创建新节点连接时务必通知 Storm；其次，在每个 tuple 处理结束的时候也必须向 Storm 发出通知。通过这两个操作，Storm 就能够检测到 tuple 树会在何时完成处理，并适时地调用 ack 或者 fail 方法。Storm 的 API 提供了一种非常精确的方式来实现着两个操作。</p>\n<p>Storm 中指定 tuple 树中的一个连接称为“锚定”（anchoring）。锚定是在发送新 tuple 的同时发生的。让我们以下面的 Bolt 为例说明这一点，这个 Bolt 将一个包含句子的 tuple 分割成若干个单词 tuple：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseRichBolt</span> </span>&#123;</span><br><span class=\"line\">        OutputCollector _collector;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Map conf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</span><br><span class=\"line\">            _collector = collector;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple)</span> </span>&#123;</span><br><span class=\"line\">            String sentence = tuple.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</span><br><span class=\"line\">                _collector.emit(tuple, <span class=\"keyword\">new</span> Values(word));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _collector.ack(tuple);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</span><br><span class=\"line\">            declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过将输入 tuple 指定为 emit 方法的第一个参数，每个单词 tuple 都被“锚定”了。这样，如果单词 tuple 在后续处理过程中失败了，作为这棵 tuple 树的根节点的原始 Spout tuple 就会被重新处理。相对应的，如果这样发送 tuple：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(word));</span><br></pre></td></tr></table></figure></p>\n<p>就称为“非锚定”。在这种情况下，下游的 tuple 处理失败不会触发原始 tuple 的任何处理操作。有时候发送这种“非锚定” tuple 也是必要的，这取决于你的拓扑的容错性要求。</p>\n<p>一个输出 tuple 可以被锚定到多个输入 tuple 上，这在流式连接或者聚合操作时很有用。显然，一个多锚定的 tuple 失败会导致 Spout 中多个 tuple 的重新处理。多锚定操作是通过指定一个 tuple 列表而不是单一的 tuple 来实现的，如下面的例子所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Tuple&gt; anchors = <span class=\"keyword\">new</span> ArrayList&lt;Tuple&gt;();</span><br><span class=\"line\">anchors.add(tuple1);</span><br><span class=\"line\">anchors.add(tuple2);</span><br><span class=\"line\">_collector.emit(anchors, <span class=\"keyword\">new</span> Values(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure></p>\n<p>多锚定操作会把输出 tuple 添加到多个 tuple 树中。注意，多锚定也可能会打破树的结构从而创建一个 tuple 的有向无环图（DAG），如下图所示：<br>…<br>Storm 的程序实现既支持对树的处理，同样也支持对 DAG 的处理（由于早期的 Storm 版本仅仅对树有效，所以“tuple 树”的这个糟糕的概念就一直沿袭下来了）。</p>\n<p>锚定其实可以看作是将 tuple 树具象化的过程 —— 在结束对一棵 tuple 树中一个单独 tuple 的处理的时候，后续以及最终的 tuple 都会在 Storm 可靠性 API 的作用下得到标定。这是通过 OutputCollector 的 ack 和 fail 方法实现的。如果你再回过头看一下 SplitSentence 的例子，你就会发现输入 tuple 是在所有的单词 tuple 发送出去之后被 ack 的。</p>\n<p>你可以使用 OutputCollector 的 fail 方法来使得位于 tuple 树根节点的 Spout tuple 立即失败。例如，你的应用可以在建立数据库连接的时候抓取异常，并且在异常出现的时候立即让输入 tuple 失败。通过这种立即失败的方式，原始 Spout tuple 就会比等待 tuple 超时的方式响应更快。</p>\n<p>每个待处理的 tuple 都必须显式地应答（ack）或者失效（fail）。因为 Storm 是使用内存来跟踪每个 tuple 的，所以，如果你不对每个 tuple 进行应答或者失效，那么负责跟踪的任务很快就会发生内存溢出。</p>\n<p>Bolt 处理 tuple 的一种通用模式是在 execute 方法中读取输入 tuple、发送出基于输入 tuple 的新 tuple，然后在方法末尾对 tuple 进行应答。大部分 Bolt 都会使用这样的过程。这些 Bolt 大多属于过滤器或者简单的处理函数一类。Storm 有一个可以简化这种操作的简便接口，称为 BasicBolt。例如，如果使用 BasicBolt，SplitSentence 的例子可以这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseBasicBolt</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple, BasicOutputCollector collector)</span> </span>&#123;</span><br><span class=\"line\">            String sentence = tuple.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</span><br><span class=\"line\">                collector.emit(<span class=\"keyword\">new</span> Values(word));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</span><br><span class=\"line\">            declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个实现方式比之前的方式要简单许多，而且在语义上有着完全一致的效果。发送到 BasicOutputCollector 的 tuple 会被自动锚定到输入 tuple 上，而且输入 tuple 会在 execute 方法结束的时候自动应答。</p>\n<p>相对应的，执行聚合或者联结操作的 Bolt 可能需要延迟应答 tuple，因为它需要等待一批 tuple 来完成某种结果计算。聚合和联结操作一般也会需要对他们的输出 tuple 进行多锚定。这个过程已经超出了 IBasicBolt 的应用范围。</p>\n<p>Storm 是以怎样一种高效的方式实现可靠性的？<br>Storm 的拓扑有一些特殊的称为“acker”的任务，这些任务负责跟踪每个 Spout 发出的 tuple 的 DAG。当一个 acker 发现一个 DAG 结束了，它就会给创建 spout tuple 的 Spout 任务发送一条消息，让这个任务来应答这个消息。你可以使用Config.TOPOLOGY_ACKERS 来配置拓扑的 acker 数量。Storm 默认会将 acker 的数量设置为一，不过如果你有大量消息的处理需求，你可能需要增加这个数量。</p>\n<p>理解 Storm 的可靠性实现的最好方式还是通过了解 tuple 和 tuple DAG 的生命周期。当一个 tuple 在拓扑中被创建出来的时候 —— 不管是在 Spout 中还是在 Bolt 中创建的 —— 这个 tuple 都会被配置一个随机的 64 位 id。acker 就是使用这些 id 来跟踪每个 spout tuple 的 tuple DAG 的。</p>\n<p>Spout tuple 的 tuple 树中的每个 tuple 都知道 spout tuple 的 id。当你在 bolt 中发送一个新 tuple 的时候，输入 tuple 中的所有 spout tuple 的 id 都会被复制到新的 tuple 中。在 tuple 被 ack 的时候，它会通过回掉函数向合适的 acker 发送一条消息，这条消息显示了 tuple 树中发生的变化。也就是说，它会告诉 acker 这样一条消息：“在这个 tuple 树中，我的处理已经结束了，接下来这个就是被我标记的新 tuple”。</p>\n<p>以下图为例，如果 D tuple 和 E tuple 是由 C tuple 创建的，那么在 C 应答的时候 tuple 树就会发生变化：</p>\n<p>ack tree</p>\n<p>由于在 D 和 E 添加到 tuple 树中的时候 C 已经从树中移除了，所以这个树并不会被过早地结束。</p>\n<p>关于 Storm 如何跟踪 tuple 树还有更多的细节。正如上面所提到的，你可以随意设置拓扑中 acker 的数量。这就会引起下面的问题：当 tuple 在拓扑中被 ack 的时候，它是怎么知道向那个 acker 任务发送信息的？</p>\n<p>对于这个问题，Storm 实际上是使用哈希算法来将 spout tuple 匹配到 acker 任务上的。由于每个 tuple 都会包含原始的 spout tuple id，所以他们会知道需要与哪个 acker 任务通信。</p>\n<p>关于 Storm 的另一个问题是 acker 是如何知道它所跟踪的 spout tuple 是由哪个 Spout 任务处理的。实际上，在 Spout 任务发送新 tuple 的时候，它也会给对应的 acker 发送一条消息，告诉 acker 这个 spout tuple 是与它的任务 id 相关联的。随后，在 acker 观察到 tuple 树结束处理的时候，它就会知道向哪个 Spout 任务发送结束消息。</p>\n<p>Acker 实际上并不会直接跟踪 tuple 树。对于一棵包含数万个 tuple 节点的树，如果直接跟踪其中的每个 tuple，显然会很快把这个 acker 的内存撑爆。所以，这里 acker 使用一个特殊的策略来实现跟踪的功能，使用这个方法对于每个 spout tuple 只需要占用固定的内存空间（大约 20 字节）。这个跟踪算法是 Storm 运行的关键，也是 Storm 的一个突破性技术。</p>\n<p>在 acker 任务中储存了一个表，用于将 spout tuple 的 id 和一对值相映射。其中第一个值是创建这个 tuple 的任务 id，这个 id 主要用于在后续操作中发送结束消息。第二个值是一个 64 比特的数字，称为“应答值”（ack val）。这个应答值是整个 tuple 树的一个完整的状态表述，而且它与树的大小无关。因为这个值仅仅是这棵树中所有被创建的或者被应答的 tuple 的 tuple id 进行异或运算的结果值。</p>\n<p>当一个 acker 任务观察到“应答值”变为 0 的时候，它就知道这个 tuple 树已经完成处理了。因为 tuple id 实际上是随机生成的 64 比特数值，所以“应答值”碰巧为 0 是一种极小概率的事件。理论计算得以得出，在每秒应答一万次的情况下，需要 5000 万年才会发生一次错误。而且即使是这样，也仅仅会在 tuple 碰巧在拓扑中失败的时候才会发生数据丢失的情况。</p>\n<p>假设你现在已经理解了这个可靠性算法，让我们再分析一下所有失败的情形，看看这些情形下 Storm 是如何避免数据缺失的：</p>\n<p>由于任务（线程）挂掉导致 tuple 没有被应答（ack）的情况：这时位于 tuple 树根节点的 spout tuple 会在任务超时后得到重新处理。<br>Acker 任务挂掉的情形：这种情况下 acker 所跟踪的所有 spout tuple 都会由于超时被重新处理。<br>Spout 任务挂掉的情形：这种情况下 Spout 任务的来源就会负责重新处理消息。例如，对于像 Kestrel 和 RabbitMQ 这样的消息队列就会在客户端断开连接时将所有的挂起状态的消息放回队列。<br>综上所述，Storm 的可靠性机制完全具备分布的、可伸缩的、容错的特征。</p>\n<p>调整可靠性<br>由于 acker 任务是轻量级的，在拓扑中你并不需要很多 acker 任务。你可以通过 Storm UI 监控他们的性能（acker 任务的 id 为“__acker”）。如果发现观察结果存在问题，你可能就需要增加更多的 acker 任务。</p>\n<p>如果你不关注消息的可靠性 —— 也就是说你不关心在失败情形下发生的 tuple 丢失 —— 那么你就可以通过不跟踪 tuple 树的处理来提升拓扑的性能。由于 tuple 树中的每个 tuple 都会带有一个应答消息，不追踪 tuple 树会使得传输的消息的数量减半。同时，下游数据流中的 id 也会变少，这样可以降低网络带宽的消耗。</p>\n<p>有三种方法可以移除 Storm 的可靠性机制。</p>\n<p>第一种方法是将 Config.TOPOLOGY_ACKERS 设置为0，在这种情况下，Storm 会在 Spout 发送 tuple 之后立即调用 ack 方法，tuple 树叶就不会被跟踪了。<br>第二种方法是基于消息本身移除可靠性。你可以通过在 SpoutOutputCollector.emit 方法中省略消息 id 来关闭 spout tuple 的跟踪功能。<br>最后，如果你不关心拓扑中的下游 tuple 是否会失败，你可以在发送 tuple 的时候选择发送“非锚定”的（unanchored）tuple。由于这些 tuple 不会被标记到任何一个 spout tuple 中，显然在他们处理失败的时候不会引起任何 spout tuple 的重新处理（注意，在使用这种方法时，如果上游有 spout 或 bolt 仍然保持可靠性机制，那么需要在 execute 方法之初调用OutputCollector.ack 来立即响应上游的消息，否则上游组件会误认为消息没有发送成功导致所有的消息会被反复发送）。<br>Ack原理<br>正如前文所述，Storm使用了一种巧妙的机制来判断一棵tuple数是否处理完毕，那就是通过tuple的id进行异或运算得到。</p>\n<p>在这之前，首先需要了解一点“异或”常识<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A^0 = A</span><br><span class=\"line\">A^A = 0</span><br><span class=\"line\">A^B^C^...^C^B^A=0  其中每个算子成对存在</span><br></pre></td></tr></table></figure></p>\n<p>再来看看Storm是如何利用异或进行ack确认的。</p>\n<p>tuple标记和数据结构</p>\n<p>对于Spout而言，在发送一个tuple时，需要指定一个msgId，这时，系统会根据这个msgId来给这个tuple生成一个64位的spout tuple id，也可称之为root id。这个root id会一直跟着这个将要发送的tuple，不管是在当前spout中还是在下游的bolt中，作为该tuple的唯一标识。同时，不管在Spout还是在Bolt中，系统会给每个发送的tuple随机生成一个64位的tuple id，这个id只和当前tuple相关。例如某个spout中发送了tuple A，在下游bolt中接受了A并且发送了tuple B和C，且B和C被锚定在A上，那么A、B、C都会携带一个相同的root id，并且各自拥有一个随机的 tuple id。此外，在Spout发送一个源tuple时，负责“跟踪”的acker中会记录下当前Spout task的 task id和这个tuple的root id的对应关系，以便acker知道，当某个tuple树ack完全时，去通知哪个spout task。</p>\n<p>这样一来，对于一个tuple，至少需要包含以下几项信息：<br>[root id (根据msgId生成的spout tuple id)、 tuple id]</p>\n<p>对于acker中，需要存储一个映射表：[msgId 、root id 、task id]<br>注：这里的数据结构只是帮助理解，storm的具体实现可能会与此处不同，但是思路是一致的，这里不去纠结。</p>\n<p>ack确认</p>\n<p>基于上述表述，我们知道在一个spout或者bolt发送一个tuple的时候都做了哪些工作。当我们在Bolt中进行ack确认的时候，Storm会将发送的tuple和接受到的tuple的tuple id进行异或运算，直到结果为0，则表示一棵tuple已经完成确认。</p>\n<p>举个栗子</p>\n<p>假设有一个Spout，分别发送T1给下游Bolt1，发送T2给下游Bolt2，Bolt2处理完毕后对T2进行ack并不再发送消息到下游，Bolt1继续发送T3给下游Bolt3，同时发送另一个tuple T4给下游Bolt4，Bolt3处理完毕后发送T5给下游Bolt5，Bolt3处理完毕后发送T6给下游Bolt5，Bolt5不再发送新的tuple到下游。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/201808140930396.jpeg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这里使用t1代表T1的tuple id。则一开始从spout中发送t1和t2时，系统首先对t1和t2进行异或，即</p>\n<p>root id ： t1^t2<br>显然通常而言这里t1^t2不等于0。</p>\n<p>接着，在Bolt1中，发送了T3和T4后，对T1进行ack，acker会做如下运算</p>\n<p>root id: t1^t2^(t1^t3^t4)<br>这时候Bolt3对T3处理完毕，发送T5之后进行ack，则acker继续做如下运算：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)<br>同理Bolt4处理完毕后，发送T6，对T4 ack确认，则有：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)<br>接下来，Bolt5分别收到了T5和T6并处理完毕，则acker进行运算：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6<br>与此同时，Bolt2早就对T2处理完毕并ack，acker在任何可能的时候，就会对t2进行运算，</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6^t2<br>也可能是在中间部分就假如了t2，这取决于Bolt2的处理速度：</p>\n<p>root id: t1^t2^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6<br>最后得到的计算结果，根据前面的异或的性质我们知道，是0。此时，ack便认为，这个tuple树已经处理完毕，则Spout中的原始tuple处理完毕。如果在任一环节收不到ack，那么这里的计算结果都不会是0。因此，acker通过这种巧妙的运算设计，达到了“跟踪”tuple tree的效果，同时占用内存非常小。</p>\n<p>以上便是ack的工作机制，详细的逻辑可能还要去自己阅读源码。如果有不对的地方欢迎指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://blog.csdn.net/sheen1991/article/details/52788547\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sheen1991/article/details/52788547</a></p>\n<p>Storm提供了消息处理的保障机制，可以保证从Spout发射出的每个tuple都得到完整的处理。当然Storm消息处理保障机制的前提是你使用了这种特性，如果你的业务对偶尔丢失的tuple不敏感，那么也没必要启用这种机制，毕竟有得就会有失。</p>\n<p>注：本文前几节的内容主要来自并发编程网，原文链接：<a href=\"http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/storm-guaranteeing-message-processing/。最后一节“</a> Ack原理 ”是自己的理解，不足之处欢迎指正。</p>\n<p>概述<br>“完整性处理”是什么意思？</p>\n<p>一个从 spout 中发送出的 tuple 会产生上千个基于它创建的 tuples。例如，有这样一个 word-count 拓扑：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TopologyBuilder builder = <span class=\"keyword\">new</span> TopologyBuilder();</span><br><span class=\"line\">builder.setSpout(<span class=\"string\">\"sentences\"</span>, <span class=\"keyword\">new</span> KestrelSpout(<span class=\"string\">\"kestrel.backtype.com\"</span>,</span><br><span class=\"line\">                                               <span class=\"number\">22133</span>,</span><br><span class=\"line\">                                               <span class=\"string\">\"sentence_queue\"</span>,</span><br><span class=\"line\">                                               <span class=\"keyword\">new</span> StringScheme()));</span><br><span class=\"line\">builder.setBolt(<span class=\"string\">\"split\"</span>, <span class=\"keyword\">new</span> SplitSentence(), <span class=\"number\">10</span>)</span><br><span class=\"line\">        .shuffleGrouping(<span class=\"string\">\"sentences\"</span>);</span><br><span class=\"line\">builder.setBolt(<span class=\"string\">\"count\"</span>, <span class=\"keyword\">new</span> WordCount(), <span class=\"number\">20</span>)</span><br><span class=\"line\">        .fieldsGrouping(<span class=\"string\">\"split\"</span>, <span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>这个拓扑从一个 Kestrel 队列中读取句子，然后将句子分解成若干个单词，然后将它每个单词和该单词的数量发送出去。这种情况下，从 spout 中发出的 tuple 就会产生很多基于它创建的新 tuple：包括句子中单词的 tuple 和 每个单词的个数的 tuple。这些消息构成了这样一棵树：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/20180814093241342.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>如果这棵 tuple 树发送完成，并且树中的每一条消息都得到了正确的处理，就表明发送 tuple 的 spout 已经得到了“完整性处理”。对应的，如果在指定的超时时间内 tuple 树中有消息没有完成处理就意味着这个 tuple 失败了。这个超时时间可以使用 Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS 参数在构造拓扑时进行配置，如果不配置，则默认时间为 30 秒。</p>\n<p>在消息得到完整性处理后或者处理失败后会发生什么？</p>\n<p>为了理解这个问题，让我们先了解一下 tuple 的生命周期。下面是定义 spout 的接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISpout</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(Map conf, TopologyContext context, SpoutOutputCollector collector)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">nextTuple</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ack</span><span class=\"params\">(Object msgId)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Object msgId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先，通过调用 Spout 的 nextTuple 方法，Storm 向 Spout 请求一个 tuple。Spout 会使用 open 方法中提供的SpoutOutputCollector 向它的一个输出数据流中发送一个 tuple。在发送 tuple 的时候，Spout 会提供一个 “消息 id”，这个 id 会在后续过程中用于识别 tuple。例如，上面的 KestrelSpout 就是从一个 kestrel 队列中读取一条消息，然后再发送一条带有“消息 id”的消息，这个 id 是由 Kestrel 提供的。使用 SpoutOutputCollector 发送消息一般是这样的形式：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(<span class=\"string\">\"field1\"</span>, <span class=\"string\">\"field2\"</span>, <span class=\"number\">3</span>) , msgId);</span><br></pre></td></tr></table></figure></p>\n<p>随后，tuple 会被发送到对应的 bolt 中去，在这个过程中，Storm 会很小心地跟踪创建的消息树。如果 Storm 检测到某个 tuple 被完整处理， Storm 会根据 Spout 提供的“消息 id”调用最初发送 tuple 的 Spout 任务的 ack 方法。对应的，Storm 在检测到 tuple 超时之后就会调用 fail 方法。注意，对于一个特定的 tuple，响应（ack）和失败处理（fail）都只会由最初创建这个 tuple 的任务执行。也就是说，及时 Spout 在集群中有很多个任务，某个特定的 tuple 也只会由创建它的那个任务——而不是其他的任务——来处理成功或失败的结果。</p>\n<p>我们再以 KestrlSpout 为例来看看在消息的可靠性处理中 Spout 做了什么。在 KestrlSpout 从 Kestrel 队列中取出一条消息时，可以看作它“打开”了这条消息。也就是说，这条消息实际上并没有从队列中真正地取出来，而是保持着一个“挂起”状态，等待消息处理完成的信号。在挂起状态的消息不回被发送到其他的消费者中。另外，如果消费者（客户端）断开了连接，所有处于挂起状态的消息都会重新放回到队列中。在消息“打开”的时候 Kestrel 会给客户端同时提供消息体数据和一个唯一的 id。KestrelSpout 在使用 SpoutOutputCollector 发送 tuple 的时候就会把这个唯一的 id 当作“消息 id”。一段时间之后，在 KestrelSpout 的 ack 或者 fail 方法被调用的时候，KestrelSpout 就会通过这个消息 id 向 Kestrel 请求将消息从队列中移除（对应 ack 的情况）或者将消息重新放回队列（对应 fail 的情况）。</p>\n<p>Storm 的可靠性 API<br>使用 Storm 的可靠性机制的时候你需要注意两件事：首先，在 tuple 树中创建新节点连接时务必通知 Storm；其次，在每个 tuple 处理结束的时候也必须向 Storm 发出通知。通过这两个操作，Storm 就能够检测到 tuple 树会在何时完成处理，并适时地调用 ack 或者 fail 方法。Storm 的 API 提供了一种非常精确的方式来实现着两个操作。</p>\n<p>Storm 中指定 tuple 树中的一个连接称为“锚定”（anchoring）。锚定是在发送新 tuple 的同时发生的。让我们以下面的 Bolt 为例说明这一点，这个 Bolt 将一个包含句子的 tuple 分割成若干个单词 tuple：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseRichBolt</span> </span>&#123;</span><br><span class=\"line\">        OutputCollector _collector;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Map conf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</span><br><span class=\"line\">            _collector = collector;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple)</span> </span>&#123;</span><br><span class=\"line\">            String sentence = tuple.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</span><br><span class=\"line\">                _collector.emit(tuple, <span class=\"keyword\">new</span> Values(word));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _collector.ack(tuple);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</span><br><span class=\"line\">            declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过将输入 tuple 指定为 emit 方法的第一个参数，每个单词 tuple 都被“锚定”了。这样，如果单词 tuple 在后续处理过程中失败了，作为这棵 tuple 树的根节点的原始 Spout tuple 就会被重新处理。相对应的，如果这样发送 tuple：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(word));</span><br></pre></td></tr></table></figure></p>\n<p>就称为“非锚定”。在这种情况下，下游的 tuple 处理失败不会触发原始 tuple 的任何处理操作。有时候发送这种“非锚定” tuple 也是必要的，这取决于你的拓扑的容错性要求。</p>\n<p>一个输出 tuple 可以被锚定到多个输入 tuple 上，这在流式连接或者聚合操作时很有用。显然，一个多锚定的 tuple 失败会导致 Spout 中多个 tuple 的重新处理。多锚定操作是通过指定一个 tuple 列表而不是单一的 tuple 来实现的，如下面的例子所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Tuple&gt; anchors = <span class=\"keyword\">new</span> ArrayList&lt;Tuple&gt;();</span><br><span class=\"line\">anchors.add(tuple1);</span><br><span class=\"line\">anchors.add(tuple2);</span><br><span class=\"line\">_collector.emit(anchors, <span class=\"keyword\">new</span> Values(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure></p>\n<p>多锚定操作会把输出 tuple 添加到多个 tuple 树中。注意，多锚定也可能会打破树的结构从而创建一个 tuple 的有向无环图（DAG），如下图所示：<br>…<br>Storm 的程序实现既支持对树的处理，同样也支持对 DAG 的处理（由于早期的 Storm 版本仅仅对树有效，所以“tuple 树”的这个糟糕的概念就一直沿袭下来了）。</p>\n<p>锚定其实可以看作是将 tuple 树具象化的过程 —— 在结束对一棵 tuple 树中一个单独 tuple 的处理的时候，后续以及最终的 tuple 都会在 Storm 可靠性 API 的作用下得到标定。这是通过 OutputCollector 的 ack 和 fail 方法实现的。如果你再回过头看一下 SplitSentence 的例子，你就会发现输入 tuple 是在所有的单词 tuple 发送出去之后被 ack 的。</p>\n<p>你可以使用 OutputCollector 的 fail 方法来使得位于 tuple 树根节点的 Spout tuple 立即失败。例如，你的应用可以在建立数据库连接的时候抓取异常，并且在异常出现的时候立即让输入 tuple 失败。通过这种立即失败的方式，原始 Spout tuple 就会比等待 tuple 超时的方式响应更快。</p>\n<p>每个待处理的 tuple 都必须显式地应答（ack）或者失效（fail）。因为 Storm 是使用内存来跟踪每个 tuple 的，所以，如果你不对每个 tuple 进行应答或者失效，那么负责跟踪的任务很快就会发生内存溢出。</p>\n<p>Bolt 处理 tuple 的一种通用模式是在 execute 方法中读取输入 tuple、发送出基于输入 tuple 的新 tuple，然后在方法末尾对 tuple 进行应答。大部分 Bolt 都会使用这样的过程。这些 Bolt 大多属于过滤器或者简单的处理函数一类。Storm 有一个可以简化这种操作的简便接口，称为 BasicBolt。例如，如果使用 BasicBolt，SplitSentence 的例子可以这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseBasicBolt</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple, BasicOutputCollector collector)</span> </span>&#123;</span><br><span class=\"line\">            String sentence = tuple.getString(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</span><br><span class=\"line\">                collector.emit(<span class=\"keyword\">new</span> Values(word));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</span><br><span class=\"line\">            declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个实现方式比之前的方式要简单许多，而且在语义上有着完全一致的效果。发送到 BasicOutputCollector 的 tuple 会被自动锚定到输入 tuple 上，而且输入 tuple 会在 execute 方法结束的时候自动应答。</p>\n<p>相对应的，执行聚合或者联结操作的 Bolt 可能需要延迟应答 tuple，因为它需要等待一批 tuple 来完成某种结果计算。聚合和联结操作一般也会需要对他们的输出 tuple 进行多锚定。这个过程已经超出了 IBasicBolt 的应用范围。</p>\n<p>Storm 是以怎样一种高效的方式实现可靠性的？<br>Storm 的拓扑有一些特殊的称为“acker”的任务，这些任务负责跟踪每个 Spout 发出的 tuple 的 DAG。当一个 acker 发现一个 DAG 结束了，它就会给创建 spout tuple 的 Spout 任务发送一条消息，让这个任务来应答这个消息。你可以使用Config.TOPOLOGY_ACKERS 来配置拓扑的 acker 数量。Storm 默认会将 acker 的数量设置为一，不过如果你有大量消息的处理需求，你可能需要增加这个数量。</p>\n<p>理解 Storm 的可靠性实现的最好方式还是通过了解 tuple 和 tuple DAG 的生命周期。当一个 tuple 在拓扑中被创建出来的时候 —— 不管是在 Spout 中还是在 Bolt 中创建的 —— 这个 tuple 都会被配置一个随机的 64 位 id。acker 就是使用这些 id 来跟踪每个 spout tuple 的 tuple DAG 的。</p>\n<p>Spout tuple 的 tuple 树中的每个 tuple 都知道 spout tuple 的 id。当你在 bolt 中发送一个新 tuple 的时候，输入 tuple 中的所有 spout tuple 的 id 都会被复制到新的 tuple 中。在 tuple 被 ack 的时候，它会通过回掉函数向合适的 acker 发送一条消息，这条消息显示了 tuple 树中发生的变化。也就是说，它会告诉 acker 这样一条消息：“在这个 tuple 树中，我的处理已经结束了，接下来这个就是被我标记的新 tuple”。</p>\n<p>以下图为例，如果 D tuple 和 E tuple 是由 C tuple 创建的，那么在 C 应答的时候 tuple 树就会发生变化：</p>\n<p>ack tree</p>\n<p>由于在 D 和 E 添加到 tuple 树中的时候 C 已经从树中移除了，所以这个树并不会被过早地结束。</p>\n<p>关于 Storm 如何跟踪 tuple 树还有更多的细节。正如上面所提到的，你可以随意设置拓扑中 acker 的数量。这就会引起下面的问题：当 tuple 在拓扑中被 ack 的时候，它是怎么知道向那个 acker 任务发送信息的？</p>\n<p>对于这个问题，Storm 实际上是使用哈希算法来将 spout tuple 匹配到 acker 任务上的。由于每个 tuple 都会包含原始的 spout tuple id，所以他们会知道需要与哪个 acker 任务通信。</p>\n<p>关于 Storm 的另一个问题是 acker 是如何知道它所跟踪的 spout tuple 是由哪个 Spout 任务处理的。实际上，在 Spout 任务发送新 tuple 的时候，它也会给对应的 acker 发送一条消息，告诉 acker 这个 spout tuple 是与它的任务 id 相关联的。随后，在 acker 观察到 tuple 树结束处理的时候，它就会知道向哪个 Spout 任务发送结束消息。</p>\n<p>Acker 实际上并不会直接跟踪 tuple 树。对于一棵包含数万个 tuple 节点的树，如果直接跟踪其中的每个 tuple，显然会很快把这个 acker 的内存撑爆。所以，这里 acker 使用一个特殊的策略来实现跟踪的功能，使用这个方法对于每个 spout tuple 只需要占用固定的内存空间（大约 20 字节）。这个跟踪算法是 Storm 运行的关键，也是 Storm 的一个突破性技术。</p>\n<p>在 acker 任务中储存了一个表，用于将 spout tuple 的 id 和一对值相映射。其中第一个值是创建这个 tuple 的任务 id，这个 id 主要用于在后续操作中发送结束消息。第二个值是一个 64 比特的数字，称为“应答值”（ack val）。这个应答值是整个 tuple 树的一个完整的状态表述，而且它与树的大小无关。因为这个值仅仅是这棵树中所有被创建的或者被应答的 tuple 的 tuple id 进行异或运算的结果值。</p>\n<p>当一个 acker 任务观察到“应答值”变为 0 的时候，它就知道这个 tuple 树已经完成处理了。因为 tuple id 实际上是随机生成的 64 比特数值，所以“应答值”碰巧为 0 是一种极小概率的事件。理论计算得以得出，在每秒应答一万次的情况下，需要 5000 万年才会发生一次错误。而且即使是这样，也仅仅会在 tuple 碰巧在拓扑中失败的时候才会发生数据丢失的情况。</p>\n<p>假设你现在已经理解了这个可靠性算法，让我们再分析一下所有失败的情形，看看这些情形下 Storm 是如何避免数据缺失的：</p>\n<p>由于任务（线程）挂掉导致 tuple 没有被应答（ack）的情况：这时位于 tuple 树根节点的 spout tuple 会在任务超时后得到重新处理。<br>Acker 任务挂掉的情形：这种情况下 acker 所跟踪的所有 spout tuple 都会由于超时被重新处理。<br>Spout 任务挂掉的情形：这种情况下 Spout 任务的来源就会负责重新处理消息。例如，对于像 Kestrel 和 RabbitMQ 这样的消息队列就会在客户端断开连接时将所有的挂起状态的消息放回队列。<br>综上所述，Storm 的可靠性机制完全具备分布的、可伸缩的、容错的特征。</p>\n<p>调整可靠性<br>由于 acker 任务是轻量级的，在拓扑中你并不需要很多 acker 任务。你可以通过 Storm UI 监控他们的性能（acker 任务的 id 为“__acker”）。如果发现观察结果存在问题，你可能就需要增加更多的 acker 任务。</p>\n<p>如果你不关注消息的可靠性 —— 也就是说你不关心在失败情形下发生的 tuple 丢失 —— 那么你就可以通过不跟踪 tuple 树的处理来提升拓扑的性能。由于 tuple 树中的每个 tuple 都会带有一个应答消息，不追踪 tuple 树会使得传输的消息的数量减半。同时，下游数据流中的 id 也会变少，这样可以降低网络带宽的消耗。</p>\n<p>有三种方法可以移除 Storm 的可靠性机制。</p>\n<p>第一种方法是将 Config.TOPOLOGY_ACKERS 设置为0，在这种情况下，Storm 会在 Spout 发送 tuple 之后立即调用 ack 方法，tuple 树叶就不会被跟踪了。<br>第二种方法是基于消息本身移除可靠性。你可以通过在 SpoutOutputCollector.emit 方法中省略消息 id 来关闭 spout tuple 的跟踪功能。<br>最后，如果你不关心拓扑中的下游 tuple 是否会失败，你可以在发送 tuple 的时候选择发送“非锚定”的（unanchored）tuple。由于这些 tuple 不会被标记到任何一个 spout tuple 中，显然在他们处理失败的时候不会引起任何 spout tuple 的重新处理（注意，在使用这种方法时，如果上游有 spout 或 bolt 仍然保持可靠性机制，那么需要在 execute 方法之初调用OutputCollector.ack 来立即响应上游的消息，否则上游组件会误认为消息没有发送成功导致所有的消息会被反复发送）。<br>Ack原理<br>正如前文所述，Storm使用了一种巧妙的机制来判断一棵tuple数是否处理完毕，那就是通过tuple的id进行异或运算得到。</p>\n<p>在这之前，首先需要了解一点“异或”常识<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A^0 = A</span><br><span class=\"line\">A^A = 0</span><br><span class=\"line\">A^B^C^...^C^B^A=0  其中每个算子成对存在</span><br></pre></td></tr></table></figure></p>\n<p>再来看看Storm是如何利用异或进行ack确认的。</p>\n<p>tuple标记和数据结构</p>\n<p>对于Spout而言，在发送一个tuple时，需要指定一个msgId，这时，系统会根据这个msgId来给这个tuple生成一个64位的spout tuple id，也可称之为root id。这个root id会一直跟着这个将要发送的tuple，不管是在当前spout中还是在下游的bolt中，作为该tuple的唯一标识。同时，不管在Spout还是在Bolt中，系统会给每个发送的tuple随机生成一个64位的tuple id，这个id只和当前tuple相关。例如某个spout中发送了tuple A，在下游bolt中接受了A并且发送了tuple B和C，且B和C被锚定在A上，那么A、B、C都会携带一个相同的root id，并且各自拥有一个随机的 tuple id。此外，在Spout发送一个源tuple时，负责“跟踪”的acker中会记录下当前Spout task的 task id和这个tuple的root id的对应关系，以便acker知道，当某个tuple树ack完全时，去通知哪个spout task。</p>\n<p>这样一来，对于一个tuple，至少需要包含以下几项信息：<br>[root id (根据msgId生成的spout tuple id)、 tuple id]</p>\n<p>对于acker中，需要存储一个映射表：[msgId 、root id 、task id]<br>注：这里的数据结构只是帮助理解，storm的具体实现可能会与此处不同，但是思路是一致的，这里不去纠结。</p>\n<p>ack确认</p>\n<p>基于上述表述，我们知道在一个spout或者bolt发送一个tuple的时候都做了哪些工作。当我们在Bolt中进行ack确认的时候，Storm会将发送的tuple和接受到的tuple的tuple id进行异或运算，直到结果为0，则表示一棵tuple已经完成确认。</p>\n<p>举个栗子</p>\n<p>假设有一个Spout，分别发送T1给下游Bolt1，发送T2给下游Bolt2，Bolt2处理完毕后对T2进行ack并不再发送消息到下游，Bolt1继续发送T3给下游Bolt3，同时发送另一个tuple T4给下游Bolt4，Bolt3处理完毕后发送T5给下游Bolt5，Bolt3处理完毕后发送T6给下游Bolt5，Bolt5不再发送新的tuple到下游。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/201808140930396.jpeg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这里使用t1代表T1的tuple id。则一开始从spout中发送t1和t2时，系统首先对t1和t2进行异或，即</p>\n<p>root id ： t1^t2<br>显然通常而言这里t1^t2不等于0。</p>\n<p>接着，在Bolt1中，发送了T3和T4后，对T1进行ack，acker会做如下运算</p>\n<p>root id: t1^t2^(t1^t3^t4)<br>这时候Bolt3对T3处理完毕，发送T5之后进行ack，则acker继续做如下运算：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)<br>同理Bolt4处理完毕后，发送T6，对T4 ack确认，则有：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)<br>接下来，Bolt5分别收到了T5和T6并处理完毕，则acker进行运算：</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6<br>与此同时，Bolt2早就对T2处理完毕并ack，acker在任何可能的时候，就会对t2进行运算，</p>\n<p>root id: t1^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6^t2<br>也可能是在中间部分就假如了t2，这取决于Bolt2的处理速度：</p>\n<p>root id: t1^t2^t2^(t1^t3^t4)^(t3^t5)^(t4^t6)^t5^t6<br>最后得到的计算结果，根据前面的异或的性质我们知道，是0。此时，ack便认为，这个tuple树已经处理完毕，则Spout中的原始tuple处理完毕。如果在任一环节收不到ack，那么这里的计算结果都不会是0。因此，acker通过这种巧妙的运算设计，达到了“跟踪”tuple tree的效果，同时占用内存非常小。</p>\n<p>以上便是ack的工作机制，详细的逻辑可能还要去自己阅读源码。如果有不对的地方欢迎指正。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjtoghto7000105ab9pdnt0f8","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtoi000905abg221kon9"},{"post_id":"cjtoghtoc000305ab83iu65q6","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtol000d05abpmy78sgq"},{"post_id":"cjtoghtoe000505abm0myrmko","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtoo000h05ab5wk2rtad"},{"post_id":"cjtoghtof000605abxviksela","tag_id":"cjtoghton000g05abjl1bmfo3","_id":"cjtoghtoq000m05abzky26bd8"},{"post_id":"cjtoghtog000705abh90x88yo","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtos000q05abn95yr5in"},{"post_id":"cjtoghtog000705abh90x88yo","tag_id":"cjtoghtop000k05ab98n7xb8n","_id":"cjtoghtot000s05abuhn4lkz1"},{"post_id":"cjtoghtoi000a05abm0hywwhy","tag_id":"cjtoghton000g05abjl1bmfo3","_id":"cjtoghtou000v05abt0vwcxvz"},{"post_id":"cjtoghtok000b05abgjwhih1r","tag_id":"cjtoghtot000t05abzi059wb2","_id":"cjtoghtox001205abu14y7p2q"},{"post_id":"cjtoghtok000b05abgjwhih1r","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtoy001405abh6upyii3"},{"post_id":"cjtoghtol000e05abzk93i29e","tag_id":"cjtoghtox001105abdzp0lqhg","_id":"cjtoghtoz001805abt5ipz74u"},{"post_id":"cjtoghtom000f05abutm3dvp9","tag_id":"cjtoghtoy001605abt3t04w83","_id":"cjtoghtp4001c05abnzylapg1"},{"post_id":"cjtoghtp4001d05abgewnjmyi","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtp5001g05ab7xmjr22n"},{"post_id":"cjtoghtp5001h05abv6ykwq8s","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtp7001k05abblugde5j"},{"post_id":"cjtoghtoo000i05abgdnp34d5","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtp7001m05ab8uo1h3nk"},{"post_id":"cjtoghtoo000i05abgdnp34d5","tag_id":"cjtoghtp5001e05abxhypq1xe","_id":"cjtoghtp8001p05aboc9epcpn"},{"post_id":"cjtoghtp6001i05ab6uea0sc5","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtp9001r05ab2zsmiqx4"},{"post_id":"cjtoghtp7001n05abfhjqy9jh","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtp9001u05abkfyaeuva"},{"post_id":"cjtoghtp8001q05abt0nwptde","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtpa001w05abkjjmctzf"},{"post_id":"cjtoghtop000j05abao6970it","tag_id":"cjtoghtp6001j05abr4jaxfqk","_id":"cjtoghtpb001y05abipknw852"},{"post_id":"cjtoghtop000j05abao6970it","tag_id":"cjtoghtp8001o05ab9bo4c0d6","_id":"cjtoghtpc002105abik00s7ht"},{"post_id":"cjtoghtp9001v05abv87hfg2r","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtpd002305abhmzlgq82"},{"post_id":"cjtoghtoq000l05abvx9a81ue","tag_id":"cjtoghtp9001t05aba5b60fhf","_id":"cjtoghtpe002605abh6wzr9xh"},{"post_id":"cjtoghtpa001x05abmgqie277","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtpf002805abywawxta6"},{"post_id":"cjtoghtpb002005ab1k4vs567","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtpg002b05aboxxzois0"},{"post_id":"cjtoghtpc002205absd7gabf6","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtpg002d05abahmqf1za"},{"post_id":"cjtoghtpe002705abkrmh6rr7","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtph002g05abfe73twot"},{"post_id":"cjtoghtoq000n05abn9pr905g","tag_id":"cjtoghtpb001z05ab97fwgd5o","_id":"cjtoghtpi002i05ab2b3whf6k"},{"post_id":"cjtoghtoq000n05abn9pr905g","tag_id":"cjtoghtpe002505abml1ggxn6","_id":"cjtoghtpj002k05abw7a7izr8"},{"post_id":"cjtoghtor000p05abjhvz4lvf","tag_id":"cjtoghtpg002a05abcwnj0vkv","_id":"cjtoghtpj002n05abegq82wo3"},{"post_id":"cjtoghtph002h05abhh5lrqaf","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtpk002p05abfh4b0kjm"},{"post_id":"cjtoghtos000r05ab309er3c9","tag_id":"cjtoghtph002f05ably4gnn7q","_id":"cjtoghtpl002s05abxzmejdbw"},{"post_id":"cjtoghtpi002j05abk30zztcw","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtpl002u05ab0a2et03x"},{"post_id":"cjtoghtot000u05abwpdyio6s","tag_id":"cjtoghtpj002l05abbsh0ayrt","_id":"cjtoghtpm002x05abfzpzp0rp"},{"post_id":"cjtoghtou000w05abygy36837","tag_id":"cjtoghtpk002r05abactpcqkf","_id":"cjtoghtpn002z05abgysb8ayf"},{"post_id":"cjtoghtpm002y05ab4yfxxtwc","tag_id":"cjtoghtp9001t05aba5b60fhf","_id":"cjtoghtpo003205abd7t3bolj"},{"post_id":"cjtoghtov000y05abwlf3zplt","tag_id":"cjtoghtpm002w05abit3v96f8","_id":"cjtoghtpp003405abpkx7bupm"},{"post_id":"cjtoghtpn003005ab7puwmwm4","tag_id":"cjtoghtp9001t05aba5b60fhf","_id":"cjtoghtpp003705abt9yj8v3t"},{"post_id":"cjtoghtov000z05ab7y8z4ss0","tag_id":"cjtoghtph002f05ably4gnn7q","_id":"cjtoghtpq003905abpr553p1p"},{"post_id":"cjtoghtow001005ab8sbqy402","tag_id":"cjtoghtpp003605abw0fngyfi","_id":"cjtoghtpu003g05abpdfdqcj8"},{"post_id":"cjtoghtow001005ab8sbqy402","tag_id":"cjtoghtpr003b05ab5th3880o","_id":"cjtoghtpw003i05ab2c3sazyz"},{"post_id":"cjtoghtox001305abap8j79sq","tag_id":"cjtoghtpg002a05abcwnj0vkv","_id":"cjtoghtpx003l05abf2pkzuqm"},{"post_id":"cjtoghtpw003j05abxcvye3o1","tag_id":"cjtoghtop000k05ab98n7xb8n","_id":"cjtoghtpy003n05abdt4ftk8k"},{"post_id":"cjtoghtpx003m05abbpb18350","tag_id":"cjtoghtpg002a05abcwnj0vkv","_id":"cjtoghtq0003q05ab98ev3ski"},{"post_id":"cjtoghtoy001505abes0ncevk","tag_id":"cjtoghtph002f05ably4gnn7q","_id":"cjtoghtq1003s05abvf8t1f9l"},{"post_id":"cjtoghtoz001705abgeqy3s92","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtq2003v05ab0vs4dott"},{"post_id":"cjtoghtp2001905abu6fez2vn","tag_id":"cjtoghtq2003u05ab03ngr26e","_id":"cjtoghtq2003y05abhsorjd9y"},{"post_id":"cjtoghtp2001905abu6fez2vn","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtq2003z05abfrdmuzq1"},{"post_id":"cjtoghtp4001b05abtjp03e68","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtq3004105abm6obix7y"},{"post_id":"cjtoghtp4001b05abtjp03e68","tag_id":"cjtoghtq2003x05ab7eb7s0dt","_id":"cjtoghtq3004205abswvkqa99"},{"post_id":"cjtoghtp5001f05abg784v9oq","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtq3004405ab8i91vuud"},{"post_id":"cjtoghtp5001f05abg784v9oq","tag_id":"cjtoghtq3004005abwydfcdez","_id":"cjtoghtq3004505ab0d5hdlwb"},{"post_id":"cjtoghtp7001l05abi6sniig2","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtq4004705ab5hzn1y97"},{"post_id":"cjtoghtp7001l05abi6sniig2","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtq4004805abqqxmyon1"},{"post_id":"cjtoghtp9001s05abzterl86r","tag_id":"cjtoghtq3004605ab9ifb12o7","_id":"cjtoghtq4004a05abuw2qvcxp"},{"post_id":"cjtoghtpd002405abjvi6983w","tag_id":"cjtoghtq4004905abtaugrzmm","_id":"cjtoghtq5004c05ab22h89s0r"},{"post_id":"cjtoghtpf002905abkgu1xlo1","tag_id":"cjtoghtq4004b05abr8lwgm7v","_id":"cjtoghtq6004e05abamwj0riu"},{"post_id":"cjtoghtpg002c05abo3jryrau","tag_id":"cjtoghtq4004b05abr8lwgm7v","_id":"cjtoghtq6004g05ab2o9y6eoa"},{"post_id":"cjtoghtpj002m05abytjgu38b","tag_id":"cjtoghtq6004f05abjmvy517v","_id":"cjtoghtq6004j05abx5og15h1"},{"post_id":"cjtoghtpj002m05abytjgu38b","tag_id":"cjtoghtq6004h05ab44jqhthy","_id":"cjtoghtq6004k05ab9dlcnlwn"},{"post_id":"cjtoghtpj002o05abo83py6jw","tag_id":"cjtoghtpb001z05ab97fwgd5o","_id":"cjtoghtq7004m05abt15ww98d"},{"post_id":"cjtoghtpj002o05abo83py6jw","tag_id":"cjtoghtq6004i05abu5rvee91","_id":"cjtoghtq7004n05ab673h247g"},{"post_id":"cjtoghtpk002q05abecbu76qw","tag_id":"cjtoghtq7004l05ab6i96sdrd","_id":"cjtoghtq7004p05ab1kwsybwj"},{"post_id":"cjtoghtpl002t05ab9r323ego","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtq8004s05abrijmpesl"},{"post_id":"cjtoghtpl002t05ab9r323ego","tag_id":"cjtoghtq8004q05abfjhfn21s","_id":"cjtoghtq8004t05abjnfj1ooc"},{"post_id":"cjtoghtpl002v05abpct70oyv","tag_id":"cjtoghtq7004l05ab6i96sdrd","_id":"cjtoghtq9004v05ab3e8hav1r"},{"post_id":"cjtoghtpo003305abm6dye1t0","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtq9004x05abwrra1j3r"},{"post_id":"cjtoghtpo003305abm6dye1t0","tag_id":"cjtoghtpj002l05abbsh0ayrt","_id":"cjtoghtq9004y05abksu1poh9"},{"post_id":"cjtoghtpp003505ab01w0fwrb","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtq9005005ab5xcwc5z9"},{"post_id":"cjtoghtpq003805abv7yhv0r2","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtqa005205abe4zksn8b"},{"post_id":"cjtoghtpq003805abv7yhv0r2","tag_id":"cjtoghtpj002l05abbsh0ayrt","_id":"cjtoghtqa005305abpefjtkky"},{"post_id":"cjtoghtpq003a05abewckk57r","tag_id":"cjtoghtq9005105abr67xss0b","_id":"cjtoghtqa005505abnsw507mg"},{"post_id":"cjtoghtpr003c05abiwdne7if","tag_id":"cjtoghtq9005105abr67xss0b","_id":"cjtoghtqb005805abs9vu9x77"},{"post_id":"cjtoghtpr003c05abiwdne7if","tag_id":"cjtoghtqa005605abd2ww5avw","_id":"cjtoghtqb005905abg4hyt5j6"},{"post_id":"cjtoghtpr003d05abe74fqwjx","tag_id":"cjtoghtqa005705abkj2aa48q","_id":"cjtoghtqb005b05abz4mbf6pa"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtq3004005abwydfcdez","_id":"cjtoghtqc005j05ab9h3mciv5"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtpp003605abw0fngyfi","_id":"cjtoghtqd005k05abex9g47th"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqb005c05ab1nljoqei","_id":"cjtoghtqd005m05ab7x3xfkzq"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqc005d05abhvgrg9ra","_id":"cjtoghtqd005n05abxukkohyh"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqc005e05abhd59n54r","_id":"cjtoghtqd005p05abaelawz0f"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqc005f05ab3wvpf4a9","_id":"cjtoghtqd005q05abnyyk3pss"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqc005g05abywg1n9gs","_id":"cjtoghtqe005s05abif5rq8db"},{"post_id":"cjtoghtps003e05aba6dpg6a8","tag_id":"cjtoghtqc005h05abi7yf01lw","_id":"cjtoghtqe005t05abeik16uje"},{"post_id":"cjtoghtpu003h05abwhz5lfhh","tag_id":"cjtoghtqc005i05abbb437jmw","_id":"cjtoghtqe005u05abzgw3zuth"},{"post_id":"cjtoghtpy003o05ab77augpjz","tag_id":"cjtoghtq3004005abwydfcdez","_id":"cjtoghtqe005v05abva7f2nds"},{"post_id":"cjtoghtq0003r05abolejx6qm","tag_id":"cjtoghtqd005o05abxuxncbek","_id":"cjtoghtqe005w05ab82sos4xu"},{"post_id":"cjtoghtq1003t05abbd5aemt2","tag_id":"cjtoghtq3004005abwydfcdez","_id":"cjtoghtqe005x05abd5abrmuk"},{"post_id":"cjtoghtqr005y05abkxkfg9cr","tag_id":"cjtoghtph002f05ably4gnn7q","_id":"cjtoghtqt006005ab9gz1o9n8"},{"post_id":"cjtoghtqs005z05ab9lqycjkh","tag_id":"cjtoghtpm002w05abit3v96f8","_id":"cjtoghtqu006205ab15qwy7vk"},{"post_id":"cjtoghtqs005z05ab9lqycjkh","tag_id":"cjtoghtoy001605abt3t04w83","_id":"cjtoghtqu006405abkh18p636"},{"post_id":"cjtoghtqt006105abxwkdln9q","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtqv006605abn0ppspz0"},{"post_id":"cjtoghtqu006305ablqimay9e","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtqw006905ab1gg9539j"},{"post_id":"cjtoghtqu006505abb2mwkz2j","tag_id":"cjtoghtq3004005abwydfcdez","_id":"cjtoghtqy006e05abnsbmet3a"},{"post_id":"cjtoghtqu006505abb2mwkz2j","tag_id":"cjtoghtqw006805ab5ojoba1j","_id":"cjtoghtqz006g05abtwxiahxc"},{"post_id":"cjtoghtqu006505abb2mwkz2j","tag_id":"cjtoghtou000x05abpuhqr3cf","_id":"cjtoghtr0006j05ab9hv7j8j2"},{"post_id":"cjtoghtqu006505abb2mwkz2j","tag_id":"cjtoghtq2003x05ab7eb7s0dt","_id":"cjtoghtr1006l05abepj7ta2h"},{"post_id":"cjtoghtqv006705abmhhrnr62","tag_id":"cjtoghtph002f05ably4gnn7q","_id":"cjtoghtr3006o05ab789n32n7"},{"post_id":"cjtoghtqv006705abmhhrnr62","tag_id":"cjtoghtqy006d05ab70jixnah","_id":"cjtoghtr4006q05abzk72s597"},{"post_id":"cjtoghtqw006a05abd1hs8xwi","tag_id":"cjtoghtr0006i05ab4286tcvx","_id":"cjtoghtr5006t05abhv5cbc53"},{"post_id":"cjtoghtr4006r05ab007qcifa","tag_id":"cjtoghtqc005d05abhvgrg9ra","_id":"cjtoghtr6006v05ab3bi0j00t"},{"post_id":"cjtoghtqx006b05abvz3o9zu4","tag_id":"cjtoghtqy006d05ab70jixnah","_id":"cjtoghtr7006z05abdrdpv3d0"},{"post_id":"cjtoghtqx006b05abvz3o9zu4","tag_id":"cjtoghtr5006s05abjakyfrlb","_id":"cjtoghtr8007105ababnwe559"},{"post_id":"cjtoghtqy006c05ab69pl590u","tag_id":"cjtoghtr0006i05ab4286tcvx","_id":"cjtoghtra007405abcke3ivpd"},{"post_id":"cjtoghtr9007305abpyv8g2l2","tag_id":"cjtoghtq0003p05abuxparliv","_id":"cjtoghtra007605ab32lw9z2m"},{"post_id":"cjtoghtra007505abx019ubnq","tag_id":"cjtoghtop000k05ab98n7xb8n","_id":"cjtoghtrb007905abe8t129un"},{"post_id":"cjtoghtqz006f05abevod2cgq","tag_id":"cjtoghtop000k05ab98n7xb8n","_id":"cjtoghtrd007b05abki5f5nxu"},{"post_id":"cjtoghtqz006f05abevod2cgq","tag_id":"cjtoghtr8007205abocvwsn30","_id":"cjtoghtrd007e05abnqt70vsj"},{"post_id":"cjtoghtqz006h05abbwyedpnq","tag_id":"cjtoghtrb007805ab631s6gf3","_id":"cjtoghtre007g05abhi377wqx"},{"post_id":"cjtoghtr0006k05abutvuhgzs","tag_id":"cjtoghtrd007d05ab3dig45nx","_id":"cjtoghtrh007k05abzg9cstgz"},{"post_id":"cjtoghtr1006m05ab32qwph33","tag_id":"cjtoghtrb007805ab631s6gf3","_id":"cjtoghtri007n05abarswdeb8"},{"post_id":"cjtoghtr4006p05ab4jjjivjn","tag_id":"cjtoghtqb005c05ab1nljoqei","_id":"cjtoghtrj007p05abc14bmnpt"},{"post_id":"cjtoghtr4006p05ab4jjjivjn","tag_id":"cjtoghtqc005d05abhvgrg9ra","_id":"cjtoghtrj007q05abpvkunvma"},{"post_id":"cjtoghtr4006p05ab4jjjivjn","tag_id":"cjtoghtri007m05absf5z480i","_id":"cjtoghtrj007s05ab68svd6q2"},{"post_id":"cjtoghtr5006u05ab4vmmsp4g","tag_id":"cjtoghtri007o05abardsy0kg","_id":"cjtoghtrj007t05ab09qoddrq"},{"post_id":"cjtoghtr6006w05abcew2tu18","tag_id":"cjtoghtri007o05abardsy0kg","_id":"cjtoghtrk007v05abbyf81tk7"},{"post_id":"cjtoghtr7006y05abjf03ykf2","tag_id":"cjtoghtrk007u05abgjm0sw43","_id":"cjtoghtrk007x05abw7icimbv"},{"post_id":"cjtoghtr8007005abh56syppd","tag_id":"cjtoghtri007m05absf5z480i","_id":"cjtoghtrl007z05abeiqa103v"},{"post_id":"cjtoghtrb007705abjlgc1csp","tag_id":"cjtoghtrk007u05abgjm0sw43","_id":"cjtoghtrm008205abmvtemy5v"},{"post_id":"cjtoghtrb007705abjlgc1csp","tag_id":"cjtoghtrl008005abrjlkvl80","_id":"cjtoghtrm008305abeosifh4h"},{"post_id":"cjtoghtrb007a05ab3apqu158","tag_id":"cjtoghtrk007u05abgjm0sw43","_id":"cjtoghtrm008505abf8dxbjow"},{"post_id":"cjtoghtrd007c05abe2it4c65","tag_id":"cjtoghtpj002l05abbsh0ayrt","_id":"cjtoghtrn008705abw4jygz0i"},{"post_id":"cjtoghtrd007c05abe2it4c65","tag_id":"cjtoghtrm008405abatkk1vbz","_id":"cjtoghtrn008805abf9au0ppt"},{"post_id":"cjtoghtre007f05ab0w9m76e5","tag_id":"cjtoghtrm008605abc1c7d3kg","_id":"cjtoghtrn008b05abhyqc8moc"},{"post_id":"cjtoghtre007f05ab0w9m76e5","tag_id":"cjtoghtrn008905abmy8n1yrv","_id":"cjtoghtrn008c05ab4t7n3fii"},{"post_id":"cjtoghtre007f05ab0w9m76e5","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtro008e05ab5rsvwwbf"},{"post_id":"cjtoghtre007h05abb00o8dxz","tag_id":"cjtoghtrn008a05ab855jzqsn","_id":"cjtoghtro008f05abk3p7ejal"},{"post_id":"cjtoghtrg007j05ab7v01om1h","tag_id":"cjtoghtro008d05ab0d1rm1a4","_id":"cjtoghtro008h05ab4w53s11s"},{"post_id":"cjtoghtrg007j05ab7v01om1h","tag_id":"cjtoghtqc005d05abhvgrg9ra","_id":"cjtoghtro008i05abr1aocad4"},{"post_id":"cjtoghtrg007j05ab7v01om1h","tag_id":"cjtoghtp5001e05abxhypq1xe","_id":"cjtoghtrp008k05ab2is4q78s"},{"post_id":"cjtoghtrh007l05ab7rcms4sl","tag_id":"cjtoghtrm008605abc1c7d3kg","_id":"cjtoghtrp008l05abga0m0akb"},{"post_id":"cjtoghtrh007l05ab7rcms4sl","tag_id":"cjtoghtrn008905abmy8n1yrv","_id":"cjtoghtrp008m05ab31ljhvtw"},{"post_id":"cjtoghtrh007l05ab7rcms4sl","tag_id":"cjtoghtod000405abc586zdnm","_id":"cjtoghtrp008n05abp7dlyi4x"},{"post_id":"cjtoghtrt008o05abzsjml8n9","tag_id":"cjtoghtru008p05abt4wucr8a","_id":"cjtoghtru008q05abwx8bvfiq"},{"post_id":"cjtoghtrt008o05abzsjml8n9","tag_id":"cjtoghtp3001a05ab0wkm7l51","_id":"cjtoghtru008r05ab4x407ku7"},{"post_id":"cjtoghts2008s05aba8t0hp6r","tag_id":"cjtoghtrk007u05abgjm0sw43","_id":"cjtoghts2008t05abdrgg56lh"}],"Tag":[{"name":"elasticsearch","_id":"cjtoghtod000405abc586zdnm"},{"name":"fastDFS","_id":"cjtoghton000g05abjl1bmfo3"},{"name":"python","_id":"cjtoghtop000k05ab98n7xb8n"},{"name":"harbor","_id":"cjtoghtot000t05abzi059wb2"},{"name":"docker","_id":"cjtoghtou000x05abpuhqr3cf"},{"name":"jMeter","_id":"cjtoghtox001105abdzp0lqhg"},{"name":"mac","_id":"cjtoghtoy001605abt3t04w83"},{"name":"java","_id":"cjtoghtp3001a05ab0wkm7l51"},{"name":"socket","_id":"cjtoghtp5001e05abxhypq1xe"},{"name":"jmeter","_id":"cjtoghtp6001j05abr4jaxfqk"},{"name":"webSocket","_id":"cjtoghtp8001o05ab9bo4c0d6"},{"name":"kubernetes","_id":"cjtoghtp9001t05aba5b60fhf"},{"name":"android","_id":"cjtoghtpb001z05ab97fwgd5o"},{"name":"adb","_id":"cjtoghtpe002505abml1ggxn6"},{"name":"mysql","_id":"cjtoghtpg002a05abcwnj0vkv"},{"name":"angular","_id":"cjtoghtph002f05ably4gnn7q"},{"name":"windows","_id":"cjtoghtpj002l05abbsh0ayrt"},{"name":"项目","_id":"cjtoghtpk002r05abactpcqkf"},{"name":"idea","_id":"cjtoghtpm002w05abit3v96f8"},{"name":"apache","_id":"cjtoghtpp003605abw0fngyfi"},{"name":"httpd","_id":"cjtoghtpr003b05ab5th3880o"},{"name":"linux","_id":"cjtoghtq0003p05abuxparliv"},{"name":"算法","_id":"cjtoghtq2003u05ab03ngr26e"},{"name":"wordpress","_id":"cjtoghtq2003x05ab7eb7s0dt"},{"name":"nginx","_id":"cjtoghtq3004005abwydfcdez"},{"name":"eclipse","_id":"cjtoghtq3004605ab9ifb12o7"},{"name":"filebeat","_id":"cjtoghtq4004905abtaugrzmm"},{"name":"git","_id":"cjtoghtq4004b05abr8lwgm7v"},{"name":"xss","_id":"cjtoghtq6004f05abjmvy517v"},{"name":"js","_id":"cjtoghtq6004h05ab44jqhthy"},{"name":"ndk","_id":"cjtoghtq6004i05abu5rvee91"},{"name":"jstorm","_id":"cjtoghtq7004l05ab6i96sdrd"},{"name":"物联网","_id":"cjtoghtq8004q05abfjhfn21s"},{"name":"logstash","_id":"cjtoghtq9005105abr67xss0b"},{"name":"syslog","_id":"cjtoghtqa005605abd2ww5avw"},{"name":"lua","_id":"cjtoghtqa005705abkj2aa48q"},{"name":"tomcat","_id":"cjtoghtqb005c05ab1nljoqei"},{"name":"resin","_id":"cjtoghtqc005d05abhvgrg9ra"},{"name":"IIS","_id":"cjtoghtqc005e05abhd59n54r"},{"name":"jboss","_id":"cjtoghtqc005f05ab3wvpf4a9"},{"name":"wildfly","_id":"cjtoghtqc005g05abywg1n9gs"},{"name":"weblogic","_id":"cjtoghtqc005h05abi7yf01lw"},{"name":"maven","_id":"cjtoghtqc005i05abbb437jmw"},{"name":"mybaits","_id":"cjtoghtqd005o05abxuxncbek"},{"name":"php","_id":"cjtoghtqw006805ab5ojoba1j"},{"name":"node","_id":"cjtoghtqy006d05ab70jixnah"},{"name":"openresty","_id":"cjtoghtr0006i05ab4286tcvx"},{"name":"vue","_id":"cjtoghtr5006s05abjakyfrlb"},{"name":"tensorflow","_id":"cjtoghtr8007205abocvwsn30"},{"name":"redis","_id":"cjtoghtrb007805ab631s6gf3"},{"name":"spark","_id":"cjtoghtrd007d05ab3dig45nx"},{"name":"spring","_id":"cjtoghtri007m05absf5z480i"},{"name":"seo","_id":"cjtoghtri007o05abardsy0kg"},{"name":"storm","_id":"cjtoghtrk007u05abgjm0sw43"},{"name":"zookeeper","_id":"cjtoghtrl008005abrjlkvl80"},{"name":"dll","_id":"cjtoghtrm008405abatkk1vbz"},{"name":"xpack","_id":"cjtoghtrm008605abc1c7d3kg"},{"name":"kibana","_id":"cjtoghtrn008905abmy8n1yrv"},{"name":"vmware","_id":"cjtoghtrn008a05ab855jzqsn"},{"name":"websocket","_id":"cjtoghtro008d05ab0d1rm1a4"},{"name":"proguard","_id":"cjtoghtru008p05abt4wucr8a"}]}}